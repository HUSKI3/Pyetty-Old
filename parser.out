Grammar:

Rule 0     S' -> program
Rule 1     program -> empty
Rule 2     program -> statement
Rule 3     program -> program statement
Rule 4     statement -> sandbox
Rule 5     statement -> import_statement
Rule 6     statement -> variable_operation
Rule 7     statement -> return_statement
Rule 8     statement -> delete_statement
Rule 9     statement -> for_loop
Rule 10    statement -> break_statement
Rule 11    statement -> variable_assignment
Rule 12    statement -> python_code_statement
Rule 13    statement -> while_loop
Rule 14    statement -> conditional
Rule 15    statement -> class_attribute_assignment
Rule 16    statement -> function_call_statement
Rule 17    statement -> class_declaration
Rule 18    statement -> function_declaration
Rule 19    sandbox -> SANDBOX { program }
Rule 20    sandbox -> LIMPORT expression ;
Rule 21    function_call_statement -> function_call ;
Rule 22    python_code_statement -> python_code ;
Rule 23    break_statement -> DEBUG ;
Rule 24    break_statement -> SKIP ;
Rule 25    break_statement -> BREAK ;
Rule 26    return_statement -> RETURN expression ;
Rule 27    function_call -> . ENV FROM ID { program }
Rule 28    function_call -> . ENV { program }
Rule 29    function_call -> expression ( empty ) FARROW { program }
Rule 30    function_call -> < ID > expression  [precedence=left, level=7]
Rule 31    function_call -> ID TARROW ID ( function_arguments )
Rule 32    function_call -> ID TARROW ID
Rule 33    function_call -> # DEPENDS expression
Rule 34    function_call -> # DEFINE expression ? ID
Rule 35    function_call -> expression ( empty )
Rule 36    function_call -> expression ( function_arguments ) FARROW { program }
Rule 37    function_call -> expression ( function_arguments )
Rule 38    debug_call -> ? expression
Rule 39    function_declaration -> FUNC ID ( empty ) { program } TARROW expression
Rule 40    function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
Rule 41    function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
Rule 42    function_declaration -> INIT ( function_arguments ) { program } ;
Rule 43    function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression
Rule 44    function_arguments -> kwargs
Rule 45    function_arguments -> positional_args , kwargs  [precedence=left, level=2]
Rule 46    function_arguments -> positional_args
Rule 47    class_declaration -> NAMESPACE ID { program }
Rule 48    class_declaration -> CLASS ID { program }
Rule 49    for_loop -> FOR expression IN expression { program }
Rule 50    while_loop -> WHILE ( expression ) { program }
Rule 51    positional_args -> expression
Rule 52    positional_args -> positional_args , expression  [precedence=left, level=2]
Rule 53    kwargs -> ID = expression  [precedence=right, level=3]
Rule 54    kwargs -> kwargs , id = expression  [precedence=right, level=3]
Rule 55    variable_assignment -> LET get_index = expression ;
Rule 56    variable_assignment -> LET ID : ID = expression ;
Rule 57    variable_assignment -> LET ID = expression ;
Rule 58    variable_operation -> get_index EQ_DIV expression ;
Rule 59    variable_operation -> ID EQ_DIV expression ;
Rule 60    variable_operation -> get_index EQ_MOD expression ;
Rule 61    variable_operation -> ID EQ_MOD expression ;
Rule 62    variable_operation -> get_index EQ_MUL expression ;
Rule 63    variable_operation -> ID EQ_MUL expression ;
Rule 64    variable_operation -> get_index EQ_SUB expression ;
Rule 65    variable_operation -> ID EQ_SUB expression ;
Rule 66    variable_operation -> get_index EQ_ADD expression ;
Rule 67    variable_operation -> ID EQ_ADD expression ;
Rule 68    class_attribute_assignment -> class_attribute = expression ;
Rule 69    conditional -> if_statement else_statement
Rule 70    conditional -> if_statement else_if_loop else_statement
Rule 71    conditional -> if_statement else_if_loop
Rule 72    conditional -> if_statement
Rule 73    if_statement -> IF ( expression ) { program }
Rule 74    else_if_loop -> else_if_statement
Rule 75    else_if_loop -> else_if_loop else_if_statement
Rule 76    else_if_statement -> ELSE IF ( expression ) { program }
Rule 77    else_statement -> ELSE { program }
Rule 78    delete_statement -> DEL ID ;
Rule 79    import_statement -> . SELFISH ;
Rule 80    import_statement -> . GLOBAL ;
Rule 81    import_statement -> IMPORT expression ;
Rule 82    expression -> assoc_array
Rule 83    expression -> _numpy
Rule 84    expression -> _list
Rule 85    expression -> _tuple
Rule 86    expression -> class_attribute
Rule 87    expression -> id
Rule 88    expression -> string
Rule 89    expression -> bool
Rule 90    expression -> float
Rule 91    expression -> int
Rule 92    expression -> null
Rule 93    expression -> get_index
Rule 94    expression -> function_call
Rule 95    expression -> python_code
Rule 96    expression -> ( expression )
Rule 97    expression -> expression > expression  [precedence=left, level=7]
Rule 98    expression -> expression < expression  [precedence=left, level=7]
Rule 99    expression -> ! expression  [precedence=right, level=11]
Rule 100   expression -> expression & expression  [precedence=left, level=5]
Rule 101   expression -> expression | expression  [precedence=left, level=4]
Rule 102   expression -> expression EQ_GREATER expression  [precedence=left, level=7]
Rule 103   expression -> expression EQ_LESS expression  [precedence=left, level=7]
Rule 104   expression -> expression NOT_EQEQ expression  [precedence=left, level=6]
Rule 105   expression -> expression EQEQ expression  [precedence=left, level=6]
Rule 106   expression -> expression % expression  [precedence=left, level=9]
Rule 107   expression -> expression * expression  [precedence=left, level=9]
Rule 108   expression -> expression / expression  [precedence=left, level=9]
Rule 109   expression -> expression - expression  [precedence=left, level=8]
Rule 110   expression -> expression + expression  [precedence=left, level=8]
Rule 111   expression -> + expression  [precedence=right, level=10]
Rule 112   expression -> - expression  [precedence=right, level=10]
Rule 113   expression -> * ID
Rule 114   expression -> & ID
Rule 115   expression -> ID OF ID
Rule 116   null -> NULL
Rule 117   get_index -> expression ^ expression
Rule 118   get_index -> expression [ expression ]
Rule 119   _tuple -> { positional_args , }
Rule 120   _tuple -> { positional_args }
Rule 121   _list -> [ positional_args , ]
Rule 122   _list -> [ positional_args ]
Rule 123   _numpy -> ( , )
Rule 124   _numpy -> ( )
Rule 125   _numpy -> ( expression , )
Rule 126   _numpy -> ( items , )
Rule 127   _numpy -> ( items )
Rule 128   items -> expression , expression  [precedence=left, level=2]
Rule 129   items -> items , expression  [precedence=left, level=2]
Rule 130   int -> INT
Rule 131   string -> STRING
Rule 132   float -> FLOAT
Rule 133   bool -> FALSE
Rule 134   bool -> TRUE
Rule 135   class_attribute -> expression COLON_COLON ID
Rule 136   id -> ID
Rule 137   assoc_array -> { assoc_array_items }
Rule 138   assoc_array_items -> expression : expression
Rule 139   assoc_array_items -> assoc_array_items , expression : expression
Rule 140   python_code -> PYTHON_CODE_EXEC
Rule 141   python_code -> PYTHON_CODE
Rule 142   empty -> <empty>  [precedence=left, level=1]

Unused terminals:

    TELSE

Terminals, with rules where they appear:

!                    : 99
#                    : 33 34
%                    : 106
&                    : 100 114
(                    : 29 31 35 36 37 39 40 41 42 43 50 73 76 96 123 124 125 126 127
)                    : 29 31 35 36 37 39 40 41 42 43 50 73 76 96 123 124 125 126 127
*                    : 107 113
+                    : 110 111
,                    : 45 52 54 119 121 123 125 126 128 129 139
-                    : 109 112
.                    : 27 28 79 80
/                    : 108
:                    : 56 138 139
;                    : 20 21 22 23 24 25 26 42 55 56 57 58 59 60 61 62 63 64 65 66 67 68 78 79 80 81
<                    : 30 98
=                    : 53 54 55 56 57 68
>                    : 30 97
?                    : 34 38
BREAK                : 25
CLASS                : 48
COLON_COLON          : 40 41 135
DEBUG                : 23
DEFINE               : 34
DEL                  : 78
DEPENDS              : 33
ELSE                 : 76 77
ENV                  : 27 28
EQEQ                 : 105
EQ_ADD               : 66 67
EQ_DIV               : 58 59
EQ_GREATER           : 102
EQ_LESS              : 103
EQ_MOD               : 60 61
EQ_MUL               : 62 63
EQ_SUB               : 64 65
FALSE                : 133
FARROW               : 29 36
FLOAT                : 132
FOR                  : 49
FROM                 : 27
FUNC                 : 39 40 41 43
GLOBAL               : 80
ID                   : 27 30 31 31 32 32 34 39 40 40 41 41 43 47 48 53 56 56 57 59 61 63 65 67 78 113 114 115 115 135 136
IF                   : 73 76
IMPORT               : 81
IN                   : 49
INIT                 : 42
INT                  : 130
LET                  : 55 56 57
LIMPORT              : 20
NAMESPACE            : 47
NOT_EQEQ             : 104
NULL                 : 116
OF                   : 115
PYTHON_CODE          : 141
PYTHON_CODE_EXEC     : 140
RETURN               : 26
SANDBOX              : 19
SELFISH              : 79
SKIP                 : 24
STRING               : 131
TARROW               : 31 32 39 40 41 43
TELSE                : 
TRUE                 : 134
WHILE                : 50
[                    : 118 121 122
]                    : 118 121 122
^                    : 117
error                : 
{                    : 19 27 28 29 36 39 40 41 42 43 47 48 49 50 73 76 77 119 120 137
|                    : 101
}                    : 19 27 28 29 36 39 40 41 42 43 47 48 49 50 73 76 77 119 120 137

Nonterminals, with rules where they appear:

_list                : 84
_numpy               : 83
_tuple               : 85
assoc_array          : 82
assoc_array_items    : 137 139
bool                 : 89
break_statement      : 10
class_attribute      : 68 86
class_attribute_assignment : 15
class_declaration    : 17
conditional          : 14
debug_call           : 
delete_statement     : 8
else_if_loop         : 70 71 75
else_if_statement    : 74 75
else_statement       : 69 70
empty                : 1 29 35 39 40
expression           : 20 26 29 30 33 34 35 36 37 38 39 40 41 43 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 73 76 81 96 97 97 98 98 99 100 100 101 101 102 102 103 103 104 104 105 105 106 106 107 107 108 108 109 109 110 110 111 112 117 117 118 118 125 128 128 129 135 138 138 139 139
float                : 90
for_loop             : 9
function_arguments   : 31 36 37 41 42 43
function_call        : 21 94
function_call_statement : 16
function_declaration : 18
get_index            : 55 58 60 62 64 66 93
id                   : 54 87
if_statement         : 69 70 71 72
import_statement     : 5
int                  : 91
items                : 126 127 129
kwargs               : 44 45 54
null                 : 92
positional_args      : 45 46 52 119 120 121 122
program              : 3 19 27 28 29 36 39 40 41 42 43 47 48 49 50 73 76 77 0
python_code          : 22 95
python_code_statement : 12
return_statement     : 7
sandbox              : 4
statement            : 2 3
string               : 88
variable_assignment  : 11
variable_operation   : 6
while_loop           : 13


state 0

    (0) S' -> . program
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    $end            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    program                        shift and go to state 1
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 1

    (0) S' -> program .
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 2

    (1) program -> empty .
    SANDBOX         reduce using rule 1 (program -> empty .)
    LIMPORT         reduce using rule 1 (program -> empty .)
    .               reduce using rule 1 (program -> empty .)
    IMPORT          reduce using rule 1 (program -> empty .)
    ID              reduce using rule 1 (program -> empty .)
    RETURN          reduce using rule 1 (program -> empty .)
    DEL             reduce using rule 1 (program -> empty .)
    FOR             reduce using rule 1 (program -> empty .)
    DEBUG           reduce using rule 1 (program -> empty .)
    SKIP            reduce using rule 1 (program -> empty .)
    BREAK           reduce using rule 1 (program -> empty .)
    LET             reduce using rule 1 (program -> empty .)
    WHILE           reduce using rule 1 (program -> empty .)
    NAMESPACE       reduce using rule 1 (program -> empty .)
    CLASS           reduce using rule 1 (program -> empty .)
    FUNC            reduce using rule 1 (program -> empty .)
    INIT            reduce using rule 1 (program -> empty .)
    PYTHON_CODE_EXEC reduce using rule 1 (program -> empty .)
    PYTHON_CODE     reduce using rule 1 (program -> empty .)
    IF              reduce using rule 1 (program -> empty .)
    <               reduce using rule 1 (program -> empty .)
    #               reduce using rule 1 (program -> empty .)
    (               reduce using rule 1 (program -> empty .)
    !               reduce using rule 1 (program -> empty .)
    +               reduce using rule 1 (program -> empty .)
    -               reduce using rule 1 (program -> empty .)
    *               reduce using rule 1 (program -> empty .)
    &               reduce using rule 1 (program -> empty .)
    {               reduce using rule 1 (program -> empty .)
    [               reduce using rule 1 (program -> empty .)
    STRING          reduce using rule 1 (program -> empty .)
    FALSE           reduce using rule 1 (program -> empty .)
    TRUE            reduce using rule 1 (program -> empty .)
    FLOAT           reduce using rule 1 (program -> empty .)
    INT             reduce using rule 1 (program -> empty .)
    NULL            reduce using rule 1 (program -> empty .)
    $end            reduce using rule 1 (program -> empty .)
    }               reduce using rule 1 (program -> empty .)


state 3

    (2) program -> statement .
    SANDBOX         reduce using rule 2 (program -> statement .)
    LIMPORT         reduce using rule 2 (program -> statement .)
    .               reduce using rule 2 (program -> statement .)
    IMPORT          reduce using rule 2 (program -> statement .)
    ID              reduce using rule 2 (program -> statement .)
    RETURN          reduce using rule 2 (program -> statement .)
    DEL             reduce using rule 2 (program -> statement .)
    FOR             reduce using rule 2 (program -> statement .)
    DEBUG           reduce using rule 2 (program -> statement .)
    SKIP            reduce using rule 2 (program -> statement .)
    BREAK           reduce using rule 2 (program -> statement .)
    LET             reduce using rule 2 (program -> statement .)
    WHILE           reduce using rule 2 (program -> statement .)
    NAMESPACE       reduce using rule 2 (program -> statement .)
    CLASS           reduce using rule 2 (program -> statement .)
    FUNC            reduce using rule 2 (program -> statement .)
    INIT            reduce using rule 2 (program -> statement .)
    PYTHON_CODE_EXEC reduce using rule 2 (program -> statement .)
    PYTHON_CODE     reduce using rule 2 (program -> statement .)
    IF              reduce using rule 2 (program -> statement .)
    <               reduce using rule 2 (program -> statement .)
    #               reduce using rule 2 (program -> statement .)
    (               reduce using rule 2 (program -> statement .)
    !               reduce using rule 2 (program -> statement .)
    +               reduce using rule 2 (program -> statement .)
    -               reduce using rule 2 (program -> statement .)
    *               reduce using rule 2 (program -> statement .)
    &               reduce using rule 2 (program -> statement .)
    {               reduce using rule 2 (program -> statement .)
    [               reduce using rule 2 (program -> statement .)
    STRING          reduce using rule 2 (program -> statement .)
    FALSE           reduce using rule 2 (program -> statement .)
    TRUE            reduce using rule 2 (program -> statement .)
    FLOAT           reduce using rule 2 (program -> statement .)
    INT             reduce using rule 2 (program -> statement .)
    NULL            reduce using rule 2 (program -> statement .)
    $end            reduce using rule 2 (program -> statement .)
    }               reduce using rule 2 (program -> statement .)


state 4

    (4) statement -> sandbox .
    SANDBOX         reduce using rule 4 (statement -> sandbox .)
    LIMPORT         reduce using rule 4 (statement -> sandbox .)
    .               reduce using rule 4 (statement -> sandbox .)
    IMPORT          reduce using rule 4 (statement -> sandbox .)
    ID              reduce using rule 4 (statement -> sandbox .)
    RETURN          reduce using rule 4 (statement -> sandbox .)
    DEL             reduce using rule 4 (statement -> sandbox .)
    FOR             reduce using rule 4 (statement -> sandbox .)
    DEBUG           reduce using rule 4 (statement -> sandbox .)
    SKIP            reduce using rule 4 (statement -> sandbox .)
    BREAK           reduce using rule 4 (statement -> sandbox .)
    LET             reduce using rule 4 (statement -> sandbox .)
    WHILE           reduce using rule 4 (statement -> sandbox .)
    NAMESPACE       reduce using rule 4 (statement -> sandbox .)
    CLASS           reduce using rule 4 (statement -> sandbox .)
    FUNC            reduce using rule 4 (statement -> sandbox .)
    INIT            reduce using rule 4 (statement -> sandbox .)
    PYTHON_CODE_EXEC reduce using rule 4 (statement -> sandbox .)
    PYTHON_CODE     reduce using rule 4 (statement -> sandbox .)
    IF              reduce using rule 4 (statement -> sandbox .)
    <               reduce using rule 4 (statement -> sandbox .)
    #               reduce using rule 4 (statement -> sandbox .)
    (               reduce using rule 4 (statement -> sandbox .)
    !               reduce using rule 4 (statement -> sandbox .)
    +               reduce using rule 4 (statement -> sandbox .)
    -               reduce using rule 4 (statement -> sandbox .)
    *               reduce using rule 4 (statement -> sandbox .)
    &               reduce using rule 4 (statement -> sandbox .)
    {               reduce using rule 4 (statement -> sandbox .)
    [               reduce using rule 4 (statement -> sandbox .)
    STRING          reduce using rule 4 (statement -> sandbox .)
    FALSE           reduce using rule 4 (statement -> sandbox .)
    TRUE            reduce using rule 4 (statement -> sandbox .)
    FLOAT           reduce using rule 4 (statement -> sandbox .)
    INT             reduce using rule 4 (statement -> sandbox .)
    NULL            reduce using rule 4 (statement -> sandbox .)
    $end            reduce using rule 4 (statement -> sandbox .)
    }               reduce using rule 4 (statement -> sandbox .)


state 5

    (5) statement -> import_statement .
    SANDBOX         reduce using rule 5 (statement -> import_statement .)
    LIMPORT         reduce using rule 5 (statement -> import_statement .)
    .               reduce using rule 5 (statement -> import_statement .)
    IMPORT          reduce using rule 5 (statement -> import_statement .)
    ID              reduce using rule 5 (statement -> import_statement .)
    RETURN          reduce using rule 5 (statement -> import_statement .)
    DEL             reduce using rule 5 (statement -> import_statement .)
    FOR             reduce using rule 5 (statement -> import_statement .)
    DEBUG           reduce using rule 5 (statement -> import_statement .)
    SKIP            reduce using rule 5 (statement -> import_statement .)
    BREAK           reduce using rule 5 (statement -> import_statement .)
    LET             reduce using rule 5 (statement -> import_statement .)
    WHILE           reduce using rule 5 (statement -> import_statement .)
    NAMESPACE       reduce using rule 5 (statement -> import_statement .)
    CLASS           reduce using rule 5 (statement -> import_statement .)
    FUNC            reduce using rule 5 (statement -> import_statement .)
    INIT            reduce using rule 5 (statement -> import_statement .)
    PYTHON_CODE_EXEC reduce using rule 5 (statement -> import_statement .)
    PYTHON_CODE     reduce using rule 5 (statement -> import_statement .)
    IF              reduce using rule 5 (statement -> import_statement .)
    <               reduce using rule 5 (statement -> import_statement .)
    #               reduce using rule 5 (statement -> import_statement .)
    (               reduce using rule 5 (statement -> import_statement .)
    !               reduce using rule 5 (statement -> import_statement .)
    +               reduce using rule 5 (statement -> import_statement .)
    -               reduce using rule 5 (statement -> import_statement .)
    *               reduce using rule 5 (statement -> import_statement .)
    &               reduce using rule 5 (statement -> import_statement .)
    {               reduce using rule 5 (statement -> import_statement .)
    [               reduce using rule 5 (statement -> import_statement .)
    STRING          reduce using rule 5 (statement -> import_statement .)
    FALSE           reduce using rule 5 (statement -> import_statement .)
    TRUE            reduce using rule 5 (statement -> import_statement .)
    FLOAT           reduce using rule 5 (statement -> import_statement .)
    INT             reduce using rule 5 (statement -> import_statement .)
    NULL            reduce using rule 5 (statement -> import_statement .)
    $end            reduce using rule 5 (statement -> import_statement .)
    }               reduce using rule 5 (statement -> import_statement .)


state 6

    (6) statement -> variable_operation .
    SANDBOX         reduce using rule 6 (statement -> variable_operation .)
    LIMPORT         reduce using rule 6 (statement -> variable_operation .)
    .               reduce using rule 6 (statement -> variable_operation .)
    IMPORT          reduce using rule 6 (statement -> variable_operation .)
    ID              reduce using rule 6 (statement -> variable_operation .)
    RETURN          reduce using rule 6 (statement -> variable_operation .)
    DEL             reduce using rule 6 (statement -> variable_operation .)
    FOR             reduce using rule 6 (statement -> variable_operation .)
    DEBUG           reduce using rule 6 (statement -> variable_operation .)
    SKIP            reduce using rule 6 (statement -> variable_operation .)
    BREAK           reduce using rule 6 (statement -> variable_operation .)
    LET             reduce using rule 6 (statement -> variable_operation .)
    WHILE           reduce using rule 6 (statement -> variable_operation .)
    NAMESPACE       reduce using rule 6 (statement -> variable_operation .)
    CLASS           reduce using rule 6 (statement -> variable_operation .)
    FUNC            reduce using rule 6 (statement -> variable_operation .)
    INIT            reduce using rule 6 (statement -> variable_operation .)
    PYTHON_CODE_EXEC reduce using rule 6 (statement -> variable_operation .)
    PYTHON_CODE     reduce using rule 6 (statement -> variable_operation .)
    IF              reduce using rule 6 (statement -> variable_operation .)
    <               reduce using rule 6 (statement -> variable_operation .)
    #               reduce using rule 6 (statement -> variable_operation .)
    (               reduce using rule 6 (statement -> variable_operation .)
    !               reduce using rule 6 (statement -> variable_operation .)
    +               reduce using rule 6 (statement -> variable_operation .)
    -               reduce using rule 6 (statement -> variable_operation .)
    *               reduce using rule 6 (statement -> variable_operation .)
    &               reduce using rule 6 (statement -> variable_operation .)
    {               reduce using rule 6 (statement -> variable_operation .)
    [               reduce using rule 6 (statement -> variable_operation .)
    STRING          reduce using rule 6 (statement -> variable_operation .)
    FALSE           reduce using rule 6 (statement -> variable_operation .)
    TRUE            reduce using rule 6 (statement -> variable_operation .)
    FLOAT           reduce using rule 6 (statement -> variable_operation .)
    INT             reduce using rule 6 (statement -> variable_operation .)
    NULL            reduce using rule 6 (statement -> variable_operation .)
    $end            reduce using rule 6 (statement -> variable_operation .)
    }               reduce using rule 6 (statement -> variable_operation .)


state 7

    (7) statement -> return_statement .
    SANDBOX         reduce using rule 7 (statement -> return_statement .)
    LIMPORT         reduce using rule 7 (statement -> return_statement .)
    .               reduce using rule 7 (statement -> return_statement .)
    IMPORT          reduce using rule 7 (statement -> return_statement .)
    ID              reduce using rule 7 (statement -> return_statement .)
    RETURN          reduce using rule 7 (statement -> return_statement .)
    DEL             reduce using rule 7 (statement -> return_statement .)
    FOR             reduce using rule 7 (statement -> return_statement .)
    DEBUG           reduce using rule 7 (statement -> return_statement .)
    SKIP            reduce using rule 7 (statement -> return_statement .)
    BREAK           reduce using rule 7 (statement -> return_statement .)
    LET             reduce using rule 7 (statement -> return_statement .)
    WHILE           reduce using rule 7 (statement -> return_statement .)
    NAMESPACE       reduce using rule 7 (statement -> return_statement .)
    CLASS           reduce using rule 7 (statement -> return_statement .)
    FUNC            reduce using rule 7 (statement -> return_statement .)
    INIT            reduce using rule 7 (statement -> return_statement .)
    PYTHON_CODE_EXEC reduce using rule 7 (statement -> return_statement .)
    PYTHON_CODE     reduce using rule 7 (statement -> return_statement .)
    IF              reduce using rule 7 (statement -> return_statement .)
    <               reduce using rule 7 (statement -> return_statement .)
    #               reduce using rule 7 (statement -> return_statement .)
    (               reduce using rule 7 (statement -> return_statement .)
    !               reduce using rule 7 (statement -> return_statement .)
    +               reduce using rule 7 (statement -> return_statement .)
    -               reduce using rule 7 (statement -> return_statement .)
    *               reduce using rule 7 (statement -> return_statement .)
    &               reduce using rule 7 (statement -> return_statement .)
    {               reduce using rule 7 (statement -> return_statement .)
    [               reduce using rule 7 (statement -> return_statement .)
    STRING          reduce using rule 7 (statement -> return_statement .)
    FALSE           reduce using rule 7 (statement -> return_statement .)
    TRUE            reduce using rule 7 (statement -> return_statement .)
    FLOAT           reduce using rule 7 (statement -> return_statement .)
    INT             reduce using rule 7 (statement -> return_statement .)
    NULL            reduce using rule 7 (statement -> return_statement .)
    $end            reduce using rule 7 (statement -> return_statement .)
    }               reduce using rule 7 (statement -> return_statement .)


state 8

    (8) statement -> delete_statement .
    SANDBOX         reduce using rule 8 (statement -> delete_statement .)
    LIMPORT         reduce using rule 8 (statement -> delete_statement .)
    .               reduce using rule 8 (statement -> delete_statement .)
    IMPORT          reduce using rule 8 (statement -> delete_statement .)
    ID              reduce using rule 8 (statement -> delete_statement .)
    RETURN          reduce using rule 8 (statement -> delete_statement .)
    DEL             reduce using rule 8 (statement -> delete_statement .)
    FOR             reduce using rule 8 (statement -> delete_statement .)
    DEBUG           reduce using rule 8 (statement -> delete_statement .)
    SKIP            reduce using rule 8 (statement -> delete_statement .)
    BREAK           reduce using rule 8 (statement -> delete_statement .)
    LET             reduce using rule 8 (statement -> delete_statement .)
    WHILE           reduce using rule 8 (statement -> delete_statement .)
    NAMESPACE       reduce using rule 8 (statement -> delete_statement .)
    CLASS           reduce using rule 8 (statement -> delete_statement .)
    FUNC            reduce using rule 8 (statement -> delete_statement .)
    INIT            reduce using rule 8 (statement -> delete_statement .)
    PYTHON_CODE_EXEC reduce using rule 8 (statement -> delete_statement .)
    PYTHON_CODE     reduce using rule 8 (statement -> delete_statement .)
    IF              reduce using rule 8 (statement -> delete_statement .)
    <               reduce using rule 8 (statement -> delete_statement .)
    #               reduce using rule 8 (statement -> delete_statement .)
    (               reduce using rule 8 (statement -> delete_statement .)
    !               reduce using rule 8 (statement -> delete_statement .)
    +               reduce using rule 8 (statement -> delete_statement .)
    -               reduce using rule 8 (statement -> delete_statement .)
    *               reduce using rule 8 (statement -> delete_statement .)
    &               reduce using rule 8 (statement -> delete_statement .)
    {               reduce using rule 8 (statement -> delete_statement .)
    [               reduce using rule 8 (statement -> delete_statement .)
    STRING          reduce using rule 8 (statement -> delete_statement .)
    FALSE           reduce using rule 8 (statement -> delete_statement .)
    TRUE            reduce using rule 8 (statement -> delete_statement .)
    FLOAT           reduce using rule 8 (statement -> delete_statement .)
    INT             reduce using rule 8 (statement -> delete_statement .)
    NULL            reduce using rule 8 (statement -> delete_statement .)
    $end            reduce using rule 8 (statement -> delete_statement .)
    }               reduce using rule 8 (statement -> delete_statement .)


state 9

    (9) statement -> for_loop .
    SANDBOX         reduce using rule 9 (statement -> for_loop .)
    LIMPORT         reduce using rule 9 (statement -> for_loop .)
    .               reduce using rule 9 (statement -> for_loop .)
    IMPORT          reduce using rule 9 (statement -> for_loop .)
    ID              reduce using rule 9 (statement -> for_loop .)
    RETURN          reduce using rule 9 (statement -> for_loop .)
    DEL             reduce using rule 9 (statement -> for_loop .)
    FOR             reduce using rule 9 (statement -> for_loop .)
    DEBUG           reduce using rule 9 (statement -> for_loop .)
    SKIP            reduce using rule 9 (statement -> for_loop .)
    BREAK           reduce using rule 9 (statement -> for_loop .)
    LET             reduce using rule 9 (statement -> for_loop .)
    WHILE           reduce using rule 9 (statement -> for_loop .)
    NAMESPACE       reduce using rule 9 (statement -> for_loop .)
    CLASS           reduce using rule 9 (statement -> for_loop .)
    FUNC            reduce using rule 9 (statement -> for_loop .)
    INIT            reduce using rule 9 (statement -> for_loop .)
    PYTHON_CODE_EXEC reduce using rule 9 (statement -> for_loop .)
    PYTHON_CODE     reduce using rule 9 (statement -> for_loop .)
    IF              reduce using rule 9 (statement -> for_loop .)
    <               reduce using rule 9 (statement -> for_loop .)
    #               reduce using rule 9 (statement -> for_loop .)
    (               reduce using rule 9 (statement -> for_loop .)
    !               reduce using rule 9 (statement -> for_loop .)
    +               reduce using rule 9 (statement -> for_loop .)
    -               reduce using rule 9 (statement -> for_loop .)
    *               reduce using rule 9 (statement -> for_loop .)
    &               reduce using rule 9 (statement -> for_loop .)
    {               reduce using rule 9 (statement -> for_loop .)
    [               reduce using rule 9 (statement -> for_loop .)
    STRING          reduce using rule 9 (statement -> for_loop .)
    FALSE           reduce using rule 9 (statement -> for_loop .)
    TRUE            reduce using rule 9 (statement -> for_loop .)
    FLOAT           reduce using rule 9 (statement -> for_loop .)
    INT             reduce using rule 9 (statement -> for_loop .)
    NULL            reduce using rule 9 (statement -> for_loop .)
    $end            reduce using rule 9 (statement -> for_loop .)
    }               reduce using rule 9 (statement -> for_loop .)


state 10

    (10) statement -> break_statement .
    SANDBOX         reduce using rule 10 (statement -> break_statement .)
    LIMPORT         reduce using rule 10 (statement -> break_statement .)
    .               reduce using rule 10 (statement -> break_statement .)
    IMPORT          reduce using rule 10 (statement -> break_statement .)
    ID              reduce using rule 10 (statement -> break_statement .)
    RETURN          reduce using rule 10 (statement -> break_statement .)
    DEL             reduce using rule 10 (statement -> break_statement .)
    FOR             reduce using rule 10 (statement -> break_statement .)
    DEBUG           reduce using rule 10 (statement -> break_statement .)
    SKIP            reduce using rule 10 (statement -> break_statement .)
    BREAK           reduce using rule 10 (statement -> break_statement .)
    LET             reduce using rule 10 (statement -> break_statement .)
    WHILE           reduce using rule 10 (statement -> break_statement .)
    NAMESPACE       reduce using rule 10 (statement -> break_statement .)
    CLASS           reduce using rule 10 (statement -> break_statement .)
    FUNC            reduce using rule 10 (statement -> break_statement .)
    INIT            reduce using rule 10 (statement -> break_statement .)
    PYTHON_CODE_EXEC reduce using rule 10 (statement -> break_statement .)
    PYTHON_CODE     reduce using rule 10 (statement -> break_statement .)
    IF              reduce using rule 10 (statement -> break_statement .)
    <               reduce using rule 10 (statement -> break_statement .)
    #               reduce using rule 10 (statement -> break_statement .)
    (               reduce using rule 10 (statement -> break_statement .)
    !               reduce using rule 10 (statement -> break_statement .)
    +               reduce using rule 10 (statement -> break_statement .)
    -               reduce using rule 10 (statement -> break_statement .)
    *               reduce using rule 10 (statement -> break_statement .)
    &               reduce using rule 10 (statement -> break_statement .)
    {               reduce using rule 10 (statement -> break_statement .)
    [               reduce using rule 10 (statement -> break_statement .)
    STRING          reduce using rule 10 (statement -> break_statement .)
    FALSE           reduce using rule 10 (statement -> break_statement .)
    TRUE            reduce using rule 10 (statement -> break_statement .)
    FLOAT           reduce using rule 10 (statement -> break_statement .)
    INT             reduce using rule 10 (statement -> break_statement .)
    NULL            reduce using rule 10 (statement -> break_statement .)
    $end            reduce using rule 10 (statement -> break_statement .)
    }               reduce using rule 10 (statement -> break_statement .)


state 11

    (11) statement -> variable_assignment .
    SANDBOX         reduce using rule 11 (statement -> variable_assignment .)
    LIMPORT         reduce using rule 11 (statement -> variable_assignment .)
    .               reduce using rule 11 (statement -> variable_assignment .)
    IMPORT          reduce using rule 11 (statement -> variable_assignment .)
    ID              reduce using rule 11 (statement -> variable_assignment .)
    RETURN          reduce using rule 11 (statement -> variable_assignment .)
    DEL             reduce using rule 11 (statement -> variable_assignment .)
    FOR             reduce using rule 11 (statement -> variable_assignment .)
    DEBUG           reduce using rule 11 (statement -> variable_assignment .)
    SKIP            reduce using rule 11 (statement -> variable_assignment .)
    BREAK           reduce using rule 11 (statement -> variable_assignment .)
    LET             reduce using rule 11 (statement -> variable_assignment .)
    WHILE           reduce using rule 11 (statement -> variable_assignment .)
    NAMESPACE       reduce using rule 11 (statement -> variable_assignment .)
    CLASS           reduce using rule 11 (statement -> variable_assignment .)
    FUNC            reduce using rule 11 (statement -> variable_assignment .)
    INIT            reduce using rule 11 (statement -> variable_assignment .)
    PYTHON_CODE_EXEC reduce using rule 11 (statement -> variable_assignment .)
    PYTHON_CODE     reduce using rule 11 (statement -> variable_assignment .)
    IF              reduce using rule 11 (statement -> variable_assignment .)
    <               reduce using rule 11 (statement -> variable_assignment .)
    #               reduce using rule 11 (statement -> variable_assignment .)
    (               reduce using rule 11 (statement -> variable_assignment .)
    !               reduce using rule 11 (statement -> variable_assignment .)
    +               reduce using rule 11 (statement -> variable_assignment .)
    -               reduce using rule 11 (statement -> variable_assignment .)
    *               reduce using rule 11 (statement -> variable_assignment .)
    &               reduce using rule 11 (statement -> variable_assignment .)
    {               reduce using rule 11 (statement -> variable_assignment .)
    [               reduce using rule 11 (statement -> variable_assignment .)
    STRING          reduce using rule 11 (statement -> variable_assignment .)
    FALSE           reduce using rule 11 (statement -> variable_assignment .)
    TRUE            reduce using rule 11 (statement -> variable_assignment .)
    FLOAT           reduce using rule 11 (statement -> variable_assignment .)
    INT             reduce using rule 11 (statement -> variable_assignment .)
    NULL            reduce using rule 11 (statement -> variable_assignment .)
    $end            reduce using rule 11 (statement -> variable_assignment .)
    }               reduce using rule 11 (statement -> variable_assignment .)


state 12

    (12) statement -> python_code_statement .
    SANDBOX         reduce using rule 12 (statement -> python_code_statement .)
    LIMPORT         reduce using rule 12 (statement -> python_code_statement .)
    .               reduce using rule 12 (statement -> python_code_statement .)
    IMPORT          reduce using rule 12 (statement -> python_code_statement .)
    ID              reduce using rule 12 (statement -> python_code_statement .)
    RETURN          reduce using rule 12 (statement -> python_code_statement .)
    DEL             reduce using rule 12 (statement -> python_code_statement .)
    FOR             reduce using rule 12 (statement -> python_code_statement .)
    DEBUG           reduce using rule 12 (statement -> python_code_statement .)
    SKIP            reduce using rule 12 (statement -> python_code_statement .)
    BREAK           reduce using rule 12 (statement -> python_code_statement .)
    LET             reduce using rule 12 (statement -> python_code_statement .)
    WHILE           reduce using rule 12 (statement -> python_code_statement .)
    NAMESPACE       reduce using rule 12 (statement -> python_code_statement .)
    CLASS           reduce using rule 12 (statement -> python_code_statement .)
    FUNC            reduce using rule 12 (statement -> python_code_statement .)
    INIT            reduce using rule 12 (statement -> python_code_statement .)
    PYTHON_CODE_EXEC reduce using rule 12 (statement -> python_code_statement .)
    PYTHON_CODE     reduce using rule 12 (statement -> python_code_statement .)
    IF              reduce using rule 12 (statement -> python_code_statement .)
    <               reduce using rule 12 (statement -> python_code_statement .)
    #               reduce using rule 12 (statement -> python_code_statement .)
    (               reduce using rule 12 (statement -> python_code_statement .)
    !               reduce using rule 12 (statement -> python_code_statement .)
    +               reduce using rule 12 (statement -> python_code_statement .)
    -               reduce using rule 12 (statement -> python_code_statement .)
    *               reduce using rule 12 (statement -> python_code_statement .)
    &               reduce using rule 12 (statement -> python_code_statement .)
    {               reduce using rule 12 (statement -> python_code_statement .)
    [               reduce using rule 12 (statement -> python_code_statement .)
    STRING          reduce using rule 12 (statement -> python_code_statement .)
    FALSE           reduce using rule 12 (statement -> python_code_statement .)
    TRUE            reduce using rule 12 (statement -> python_code_statement .)
    FLOAT           reduce using rule 12 (statement -> python_code_statement .)
    INT             reduce using rule 12 (statement -> python_code_statement .)
    NULL            reduce using rule 12 (statement -> python_code_statement .)
    $end            reduce using rule 12 (statement -> python_code_statement .)
    }               reduce using rule 12 (statement -> python_code_statement .)


state 13

    (13) statement -> while_loop .
    SANDBOX         reduce using rule 13 (statement -> while_loop .)
    LIMPORT         reduce using rule 13 (statement -> while_loop .)
    .               reduce using rule 13 (statement -> while_loop .)
    IMPORT          reduce using rule 13 (statement -> while_loop .)
    ID              reduce using rule 13 (statement -> while_loop .)
    RETURN          reduce using rule 13 (statement -> while_loop .)
    DEL             reduce using rule 13 (statement -> while_loop .)
    FOR             reduce using rule 13 (statement -> while_loop .)
    DEBUG           reduce using rule 13 (statement -> while_loop .)
    SKIP            reduce using rule 13 (statement -> while_loop .)
    BREAK           reduce using rule 13 (statement -> while_loop .)
    LET             reduce using rule 13 (statement -> while_loop .)
    WHILE           reduce using rule 13 (statement -> while_loop .)
    NAMESPACE       reduce using rule 13 (statement -> while_loop .)
    CLASS           reduce using rule 13 (statement -> while_loop .)
    FUNC            reduce using rule 13 (statement -> while_loop .)
    INIT            reduce using rule 13 (statement -> while_loop .)
    PYTHON_CODE_EXEC reduce using rule 13 (statement -> while_loop .)
    PYTHON_CODE     reduce using rule 13 (statement -> while_loop .)
    IF              reduce using rule 13 (statement -> while_loop .)
    <               reduce using rule 13 (statement -> while_loop .)
    #               reduce using rule 13 (statement -> while_loop .)
    (               reduce using rule 13 (statement -> while_loop .)
    !               reduce using rule 13 (statement -> while_loop .)
    +               reduce using rule 13 (statement -> while_loop .)
    -               reduce using rule 13 (statement -> while_loop .)
    *               reduce using rule 13 (statement -> while_loop .)
    &               reduce using rule 13 (statement -> while_loop .)
    {               reduce using rule 13 (statement -> while_loop .)
    [               reduce using rule 13 (statement -> while_loop .)
    STRING          reduce using rule 13 (statement -> while_loop .)
    FALSE           reduce using rule 13 (statement -> while_loop .)
    TRUE            reduce using rule 13 (statement -> while_loop .)
    FLOAT           reduce using rule 13 (statement -> while_loop .)
    INT             reduce using rule 13 (statement -> while_loop .)
    NULL            reduce using rule 13 (statement -> while_loop .)
    $end            reduce using rule 13 (statement -> while_loop .)
    }               reduce using rule 13 (statement -> while_loop .)


state 14

    (14) statement -> conditional .
    SANDBOX         reduce using rule 14 (statement -> conditional .)
    LIMPORT         reduce using rule 14 (statement -> conditional .)
    .               reduce using rule 14 (statement -> conditional .)
    IMPORT          reduce using rule 14 (statement -> conditional .)
    ID              reduce using rule 14 (statement -> conditional .)
    RETURN          reduce using rule 14 (statement -> conditional .)
    DEL             reduce using rule 14 (statement -> conditional .)
    FOR             reduce using rule 14 (statement -> conditional .)
    DEBUG           reduce using rule 14 (statement -> conditional .)
    SKIP            reduce using rule 14 (statement -> conditional .)
    BREAK           reduce using rule 14 (statement -> conditional .)
    LET             reduce using rule 14 (statement -> conditional .)
    WHILE           reduce using rule 14 (statement -> conditional .)
    NAMESPACE       reduce using rule 14 (statement -> conditional .)
    CLASS           reduce using rule 14 (statement -> conditional .)
    FUNC            reduce using rule 14 (statement -> conditional .)
    INIT            reduce using rule 14 (statement -> conditional .)
    PYTHON_CODE_EXEC reduce using rule 14 (statement -> conditional .)
    PYTHON_CODE     reduce using rule 14 (statement -> conditional .)
    IF              reduce using rule 14 (statement -> conditional .)
    <               reduce using rule 14 (statement -> conditional .)
    #               reduce using rule 14 (statement -> conditional .)
    (               reduce using rule 14 (statement -> conditional .)
    !               reduce using rule 14 (statement -> conditional .)
    +               reduce using rule 14 (statement -> conditional .)
    -               reduce using rule 14 (statement -> conditional .)
    *               reduce using rule 14 (statement -> conditional .)
    &               reduce using rule 14 (statement -> conditional .)
    {               reduce using rule 14 (statement -> conditional .)
    [               reduce using rule 14 (statement -> conditional .)
    STRING          reduce using rule 14 (statement -> conditional .)
    FALSE           reduce using rule 14 (statement -> conditional .)
    TRUE            reduce using rule 14 (statement -> conditional .)
    FLOAT           reduce using rule 14 (statement -> conditional .)
    INT             reduce using rule 14 (statement -> conditional .)
    NULL            reduce using rule 14 (statement -> conditional .)
    $end            reduce using rule 14 (statement -> conditional .)
    }               reduce using rule 14 (statement -> conditional .)


state 15

    (15) statement -> class_attribute_assignment .
    SANDBOX         reduce using rule 15 (statement -> class_attribute_assignment .)
    LIMPORT         reduce using rule 15 (statement -> class_attribute_assignment .)
    .               reduce using rule 15 (statement -> class_attribute_assignment .)
    IMPORT          reduce using rule 15 (statement -> class_attribute_assignment .)
    ID              reduce using rule 15 (statement -> class_attribute_assignment .)
    RETURN          reduce using rule 15 (statement -> class_attribute_assignment .)
    DEL             reduce using rule 15 (statement -> class_attribute_assignment .)
    FOR             reduce using rule 15 (statement -> class_attribute_assignment .)
    DEBUG           reduce using rule 15 (statement -> class_attribute_assignment .)
    SKIP            reduce using rule 15 (statement -> class_attribute_assignment .)
    BREAK           reduce using rule 15 (statement -> class_attribute_assignment .)
    LET             reduce using rule 15 (statement -> class_attribute_assignment .)
    WHILE           reduce using rule 15 (statement -> class_attribute_assignment .)
    NAMESPACE       reduce using rule 15 (statement -> class_attribute_assignment .)
    CLASS           reduce using rule 15 (statement -> class_attribute_assignment .)
    FUNC            reduce using rule 15 (statement -> class_attribute_assignment .)
    INIT            reduce using rule 15 (statement -> class_attribute_assignment .)
    PYTHON_CODE_EXEC reduce using rule 15 (statement -> class_attribute_assignment .)
    PYTHON_CODE     reduce using rule 15 (statement -> class_attribute_assignment .)
    IF              reduce using rule 15 (statement -> class_attribute_assignment .)
    <               reduce using rule 15 (statement -> class_attribute_assignment .)
    #               reduce using rule 15 (statement -> class_attribute_assignment .)
    (               reduce using rule 15 (statement -> class_attribute_assignment .)
    !               reduce using rule 15 (statement -> class_attribute_assignment .)
    +               reduce using rule 15 (statement -> class_attribute_assignment .)
    -               reduce using rule 15 (statement -> class_attribute_assignment .)
    *               reduce using rule 15 (statement -> class_attribute_assignment .)
    &               reduce using rule 15 (statement -> class_attribute_assignment .)
    {               reduce using rule 15 (statement -> class_attribute_assignment .)
    [               reduce using rule 15 (statement -> class_attribute_assignment .)
    STRING          reduce using rule 15 (statement -> class_attribute_assignment .)
    FALSE           reduce using rule 15 (statement -> class_attribute_assignment .)
    TRUE            reduce using rule 15 (statement -> class_attribute_assignment .)
    FLOAT           reduce using rule 15 (statement -> class_attribute_assignment .)
    INT             reduce using rule 15 (statement -> class_attribute_assignment .)
    NULL            reduce using rule 15 (statement -> class_attribute_assignment .)
    $end            reduce using rule 15 (statement -> class_attribute_assignment .)
    }               reduce using rule 15 (statement -> class_attribute_assignment .)


state 16

    (16) statement -> function_call_statement .
    SANDBOX         reduce using rule 16 (statement -> function_call_statement .)
    LIMPORT         reduce using rule 16 (statement -> function_call_statement .)
    .               reduce using rule 16 (statement -> function_call_statement .)
    IMPORT          reduce using rule 16 (statement -> function_call_statement .)
    ID              reduce using rule 16 (statement -> function_call_statement .)
    RETURN          reduce using rule 16 (statement -> function_call_statement .)
    DEL             reduce using rule 16 (statement -> function_call_statement .)
    FOR             reduce using rule 16 (statement -> function_call_statement .)
    DEBUG           reduce using rule 16 (statement -> function_call_statement .)
    SKIP            reduce using rule 16 (statement -> function_call_statement .)
    BREAK           reduce using rule 16 (statement -> function_call_statement .)
    LET             reduce using rule 16 (statement -> function_call_statement .)
    WHILE           reduce using rule 16 (statement -> function_call_statement .)
    NAMESPACE       reduce using rule 16 (statement -> function_call_statement .)
    CLASS           reduce using rule 16 (statement -> function_call_statement .)
    FUNC            reduce using rule 16 (statement -> function_call_statement .)
    INIT            reduce using rule 16 (statement -> function_call_statement .)
    PYTHON_CODE_EXEC reduce using rule 16 (statement -> function_call_statement .)
    PYTHON_CODE     reduce using rule 16 (statement -> function_call_statement .)
    IF              reduce using rule 16 (statement -> function_call_statement .)
    <               reduce using rule 16 (statement -> function_call_statement .)
    #               reduce using rule 16 (statement -> function_call_statement .)
    (               reduce using rule 16 (statement -> function_call_statement .)
    !               reduce using rule 16 (statement -> function_call_statement .)
    +               reduce using rule 16 (statement -> function_call_statement .)
    -               reduce using rule 16 (statement -> function_call_statement .)
    *               reduce using rule 16 (statement -> function_call_statement .)
    &               reduce using rule 16 (statement -> function_call_statement .)
    {               reduce using rule 16 (statement -> function_call_statement .)
    [               reduce using rule 16 (statement -> function_call_statement .)
    STRING          reduce using rule 16 (statement -> function_call_statement .)
    FALSE           reduce using rule 16 (statement -> function_call_statement .)
    TRUE            reduce using rule 16 (statement -> function_call_statement .)
    FLOAT           reduce using rule 16 (statement -> function_call_statement .)
    INT             reduce using rule 16 (statement -> function_call_statement .)
    NULL            reduce using rule 16 (statement -> function_call_statement .)
    $end            reduce using rule 16 (statement -> function_call_statement .)
    }               reduce using rule 16 (statement -> function_call_statement .)


state 17

    (17) statement -> class_declaration .
    SANDBOX         reduce using rule 17 (statement -> class_declaration .)
    LIMPORT         reduce using rule 17 (statement -> class_declaration .)
    .               reduce using rule 17 (statement -> class_declaration .)
    IMPORT          reduce using rule 17 (statement -> class_declaration .)
    ID              reduce using rule 17 (statement -> class_declaration .)
    RETURN          reduce using rule 17 (statement -> class_declaration .)
    DEL             reduce using rule 17 (statement -> class_declaration .)
    FOR             reduce using rule 17 (statement -> class_declaration .)
    DEBUG           reduce using rule 17 (statement -> class_declaration .)
    SKIP            reduce using rule 17 (statement -> class_declaration .)
    BREAK           reduce using rule 17 (statement -> class_declaration .)
    LET             reduce using rule 17 (statement -> class_declaration .)
    WHILE           reduce using rule 17 (statement -> class_declaration .)
    NAMESPACE       reduce using rule 17 (statement -> class_declaration .)
    CLASS           reduce using rule 17 (statement -> class_declaration .)
    FUNC            reduce using rule 17 (statement -> class_declaration .)
    INIT            reduce using rule 17 (statement -> class_declaration .)
    PYTHON_CODE_EXEC reduce using rule 17 (statement -> class_declaration .)
    PYTHON_CODE     reduce using rule 17 (statement -> class_declaration .)
    IF              reduce using rule 17 (statement -> class_declaration .)
    <               reduce using rule 17 (statement -> class_declaration .)
    #               reduce using rule 17 (statement -> class_declaration .)
    (               reduce using rule 17 (statement -> class_declaration .)
    !               reduce using rule 17 (statement -> class_declaration .)
    +               reduce using rule 17 (statement -> class_declaration .)
    -               reduce using rule 17 (statement -> class_declaration .)
    *               reduce using rule 17 (statement -> class_declaration .)
    &               reduce using rule 17 (statement -> class_declaration .)
    {               reduce using rule 17 (statement -> class_declaration .)
    [               reduce using rule 17 (statement -> class_declaration .)
    STRING          reduce using rule 17 (statement -> class_declaration .)
    FALSE           reduce using rule 17 (statement -> class_declaration .)
    TRUE            reduce using rule 17 (statement -> class_declaration .)
    FLOAT           reduce using rule 17 (statement -> class_declaration .)
    INT             reduce using rule 17 (statement -> class_declaration .)
    NULL            reduce using rule 17 (statement -> class_declaration .)
    $end            reduce using rule 17 (statement -> class_declaration .)
    }               reduce using rule 17 (statement -> class_declaration .)


state 18

    (18) statement -> function_declaration .
    SANDBOX         reduce using rule 18 (statement -> function_declaration .)
    LIMPORT         reduce using rule 18 (statement -> function_declaration .)
    .               reduce using rule 18 (statement -> function_declaration .)
    IMPORT          reduce using rule 18 (statement -> function_declaration .)
    ID              reduce using rule 18 (statement -> function_declaration .)
    RETURN          reduce using rule 18 (statement -> function_declaration .)
    DEL             reduce using rule 18 (statement -> function_declaration .)
    FOR             reduce using rule 18 (statement -> function_declaration .)
    DEBUG           reduce using rule 18 (statement -> function_declaration .)
    SKIP            reduce using rule 18 (statement -> function_declaration .)
    BREAK           reduce using rule 18 (statement -> function_declaration .)
    LET             reduce using rule 18 (statement -> function_declaration .)
    WHILE           reduce using rule 18 (statement -> function_declaration .)
    NAMESPACE       reduce using rule 18 (statement -> function_declaration .)
    CLASS           reduce using rule 18 (statement -> function_declaration .)
    FUNC            reduce using rule 18 (statement -> function_declaration .)
    INIT            reduce using rule 18 (statement -> function_declaration .)
    PYTHON_CODE_EXEC reduce using rule 18 (statement -> function_declaration .)
    PYTHON_CODE     reduce using rule 18 (statement -> function_declaration .)
    IF              reduce using rule 18 (statement -> function_declaration .)
    <               reduce using rule 18 (statement -> function_declaration .)
    #               reduce using rule 18 (statement -> function_declaration .)
    (               reduce using rule 18 (statement -> function_declaration .)
    !               reduce using rule 18 (statement -> function_declaration .)
    +               reduce using rule 18 (statement -> function_declaration .)
    -               reduce using rule 18 (statement -> function_declaration .)
    *               reduce using rule 18 (statement -> function_declaration .)
    &               reduce using rule 18 (statement -> function_declaration .)
    {               reduce using rule 18 (statement -> function_declaration .)
    [               reduce using rule 18 (statement -> function_declaration .)
    STRING          reduce using rule 18 (statement -> function_declaration .)
    FALSE           reduce using rule 18 (statement -> function_declaration .)
    TRUE            reduce using rule 18 (statement -> function_declaration .)
    FLOAT           reduce using rule 18 (statement -> function_declaration .)
    INT             reduce using rule 18 (statement -> function_declaration .)
    NULL            reduce using rule 18 (statement -> function_declaration .)
    $end            reduce using rule 18 (statement -> function_declaration .)
    }               reduce using rule 18 (statement -> function_declaration .)


state 19

    (19) sandbox -> SANDBOX . { program }
    {               shift and go to state 72


state 20

    (137) assoc_array -> { . assoc_array_items }
    (119) _tuple -> { . positional_args , }
    (120) _tuple -> { . positional_args }
    (138) assoc_array_items -> . expression : expression
    (139) assoc_array_items -> . assoc_array_items , expression : expression
    (51) positional_args -> . expression
    (52) positional_args -> . positional_args , expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    assoc_array_items              shift and go to state 73
    positional_args                shift and go to state 74
    expression                     shift and go to state 75
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 21

    (20) sandbox -> LIMPORT . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 82
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 22

    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (135) class_attribute -> expression . COLON_COLON ID
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    ^               shift and go to state 83
    [               shift and go to state 84
    COLON_COLON     shift and go to state 85
    (               shift and go to state 86
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99


state 23

    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    SELFISH         shift and go to state 100
    GLOBAL          shift and go to state 101
    ENV             shift and go to state 102


state 24

    (81) import_statement -> IMPORT . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 103
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 25

    (58) variable_operation -> get_index . EQ_DIV expression ;
    (60) variable_operation -> get_index . EQ_MOD expression ;
    (62) variable_operation -> get_index . EQ_MUL expression ;
    (64) variable_operation -> get_index . EQ_SUB expression ;
    (66) variable_operation -> get_index . EQ_ADD expression ;
    (93) expression -> get_index .
    EQ_DIV          shift and go to state 104
    EQ_MOD          shift and go to state 105
    EQ_MUL          shift and go to state 106
    EQ_SUB          shift and go to state 107
    EQ_ADD          shift and go to state 108
    ^               reduce using rule 93 (expression -> get_index .)
    [               reduce using rule 93 (expression -> get_index .)
    COLON_COLON     reduce using rule 93 (expression -> get_index .)
    (               reduce using rule 93 (expression -> get_index .)
    >               reduce using rule 93 (expression -> get_index .)
    <               reduce using rule 93 (expression -> get_index .)
    &               reduce using rule 93 (expression -> get_index .)
    |               reduce using rule 93 (expression -> get_index .)
    EQ_GREATER      reduce using rule 93 (expression -> get_index .)
    EQ_LESS         reduce using rule 93 (expression -> get_index .)
    NOT_EQEQ        reduce using rule 93 (expression -> get_index .)
    EQEQ            reduce using rule 93 (expression -> get_index .)
    %               reduce using rule 93 (expression -> get_index .)
    *               reduce using rule 93 (expression -> get_index .)
    /               reduce using rule 93 (expression -> get_index .)
    -               reduce using rule 93 (expression -> get_index .)
    +               reduce using rule 93 (expression -> get_index .)


state 26

    (59) variable_operation -> ID . EQ_DIV expression ;
    (61) variable_operation -> ID . EQ_MOD expression ;
    (63) variable_operation -> ID . EQ_MUL expression ;
    (65) variable_operation -> ID . EQ_SUB expression ;
    (67) variable_operation -> ID . EQ_ADD expression ;
    (31) function_call -> ID . TARROW ID ( function_arguments )
    (32) function_call -> ID . TARROW ID
    (115) expression -> ID . OF ID
    (136) id -> ID .
    EQ_DIV          shift and go to state 109
    EQ_MOD          shift and go to state 110
    EQ_MUL          shift and go to state 111
    EQ_SUB          shift and go to state 112
    EQ_ADD          shift and go to state 113
    TARROW          shift and go to state 114
    OF              shift and go to state 115
    ^               reduce using rule 136 (id -> ID .)
    [               reduce using rule 136 (id -> ID .)
    COLON_COLON     reduce using rule 136 (id -> ID .)
    (               reduce using rule 136 (id -> ID .)
    >               reduce using rule 136 (id -> ID .)
    <               reduce using rule 136 (id -> ID .)
    &               reduce using rule 136 (id -> ID .)
    |               reduce using rule 136 (id -> ID .)
    EQ_GREATER      reduce using rule 136 (id -> ID .)
    EQ_LESS         reduce using rule 136 (id -> ID .)
    NOT_EQEQ        reduce using rule 136 (id -> ID .)
    EQEQ            reduce using rule 136 (id -> ID .)
    %               reduce using rule 136 (id -> ID .)
    *               reduce using rule 136 (id -> ID .)
    /               reduce using rule 136 (id -> ID .)
    -               reduce using rule 136 (id -> ID .)
    +               reduce using rule 136 (id -> ID .)


state 27

    (26) return_statement -> RETURN . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 116
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 28

    (78) delete_statement -> DEL . ID ;
    ID              shift and go to state 117


state 29

    (49) for_loop -> FOR . expression IN expression { program }
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 118
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 30

    (23) break_statement -> DEBUG . ;
    ;               shift and go to state 119


state 31

    (24) break_statement -> SKIP . ;
    ;               shift and go to state 120


state 32

    (25) break_statement -> BREAK . ;
    ;               shift and go to state 121


state 33

    (55) variable_assignment -> LET . get_index = expression ;
    (56) variable_assignment -> LET . ID : ID = expression ;
    (57) variable_assignment -> LET . ID = expression ;
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    ID              shift and go to state 124
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    get_index                      shift and go to state 122
    expression                     shift and go to state 123
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 34

    (22) python_code_statement -> python_code . ;
    (95) expression -> python_code .
    ;               shift and go to state 125
    ^               reduce using rule 95 (expression -> python_code .)
    [               reduce using rule 95 (expression -> python_code .)
    COLON_COLON     reduce using rule 95 (expression -> python_code .)
    (               reduce using rule 95 (expression -> python_code .)
    >               reduce using rule 95 (expression -> python_code .)
    <               reduce using rule 95 (expression -> python_code .)
    &               reduce using rule 95 (expression -> python_code .)
    |               reduce using rule 95 (expression -> python_code .)
    EQ_GREATER      reduce using rule 95 (expression -> python_code .)
    EQ_LESS         reduce using rule 95 (expression -> python_code .)
    NOT_EQEQ        reduce using rule 95 (expression -> python_code .)
    EQEQ            reduce using rule 95 (expression -> python_code .)
    %               reduce using rule 95 (expression -> python_code .)
    *               reduce using rule 95 (expression -> python_code .)
    /               reduce using rule 95 (expression -> python_code .)
    -               reduce using rule 95 (expression -> python_code .)
    +               reduce using rule 95 (expression -> python_code .)


state 35

    (50) while_loop -> WHILE . ( expression ) { program }
    (               shift and go to state 126


state 36

    (96) expression -> ( . expression )
    (123) _numpy -> ( . , )
    (124) _numpy -> ( . )
    (125) _numpy -> ( . expression , )
    (126) _numpy -> ( . items , )
    (127) _numpy -> ( . items )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (128) items -> . expression , expression
    (129) items -> . items , expression
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    ,               shift and go to state 129
    )               shift and go to state 128
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 127
    items                          shift and go to state 130
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 37

    (69) conditional -> if_statement . else_statement
    (70) conditional -> if_statement . else_if_loop else_statement
    (71) conditional -> if_statement . else_if_loop
    (72) conditional -> if_statement .
    (77) else_statement -> . ELSE { program }
    (74) else_if_loop -> . else_if_statement
    (75) else_if_loop -> . else_if_loop else_if_statement
    (76) else_if_statement -> . ELSE IF ( expression ) { program }
    SANDBOX         reduce using rule 72 (conditional -> if_statement .)
    LIMPORT         reduce using rule 72 (conditional -> if_statement .)
    .               reduce using rule 72 (conditional -> if_statement .)
    IMPORT          reduce using rule 72 (conditional -> if_statement .)
    ID              reduce using rule 72 (conditional -> if_statement .)
    RETURN          reduce using rule 72 (conditional -> if_statement .)
    DEL             reduce using rule 72 (conditional -> if_statement .)
    FOR             reduce using rule 72 (conditional -> if_statement .)
    DEBUG           reduce using rule 72 (conditional -> if_statement .)
    SKIP            reduce using rule 72 (conditional -> if_statement .)
    BREAK           reduce using rule 72 (conditional -> if_statement .)
    LET             reduce using rule 72 (conditional -> if_statement .)
    WHILE           reduce using rule 72 (conditional -> if_statement .)
    NAMESPACE       reduce using rule 72 (conditional -> if_statement .)
    CLASS           reduce using rule 72 (conditional -> if_statement .)
    FUNC            reduce using rule 72 (conditional -> if_statement .)
    INIT            reduce using rule 72 (conditional -> if_statement .)
    PYTHON_CODE_EXEC reduce using rule 72 (conditional -> if_statement .)
    PYTHON_CODE     reduce using rule 72 (conditional -> if_statement .)
    IF              reduce using rule 72 (conditional -> if_statement .)
    <               reduce using rule 72 (conditional -> if_statement .)
    #               reduce using rule 72 (conditional -> if_statement .)
    (               reduce using rule 72 (conditional -> if_statement .)
    !               reduce using rule 72 (conditional -> if_statement .)
    +               reduce using rule 72 (conditional -> if_statement .)
    -               reduce using rule 72 (conditional -> if_statement .)
    *               reduce using rule 72 (conditional -> if_statement .)
    &               reduce using rule 72 (conditional -> if_statement .)
    {               reduce using rule 72 (conditional -> if_statement .)
    [               reduce using rule 72 (conditional -> if_statement .)
    STRING          reduce using rule 72 (conditional -> if_statement .)
    FALSE           reduce using rule 72 (conditional -> if_statement .)
    TRUE            reduce using rule 72 (conditional -> if_statement .)
    FLOAT           reduce using rule 72 (conditional -> if_statement .)
    INT             reduce using rule 72 (conditional -> if_statement .)
    NULL            reduce using rule 72 (conditional -> if_statement .)
    $end            reduce using rule 72 (conditional -> if_statement .)
    }               reduce using rule 72 (conditional -> if_statement .)
    ELSE            shift and go to state 133

    else_statement                 shift and go to state 131
    else_if_loop                   shift and go to state 132
    else_if_statement              shift and go to state 134

state 38

    (68) class_attribute_assignment -> class_attribute . = expression ;
    (86) expression -> class_attribute .
    =               shift and go to state 135
    ^               reduce using rule 86 (expression -> class_attribute .)
    [               reduce using rule 86 (expression -> class_attribute .)
    COLON_COLON     reduce using rule 86 (expression -> class_attribute .)
    (               reduce using rule 86 (expression -> class_attribute .)
    >               reduce using rule 86 (expression -> class_attribute .)
    <               reduce using rule 86 (expression -> class_attribute .)
    &               reduce using rule 86 (expression -> class_attribute .)
    |               reduce using rule 86 (expression -> class_attribute .)
    EQ_GREATER      reduce using rule 86 (expression -> class_attribute .)
    EQ_LESS         reduce using rule 86 (expression -> class_attribute .)
    NOT_EQEQ        reduce using rule 86 (expression -> class_attribute .)
    EQEQ            reduce using rule 86 (expression -> class_attribute .)
    %               reduce using rule 86 (expression -> class_attribute .)
    *               reduce using rule 86 (expression -> class_attribute .)
    /               reduce using rule 86 (expression -> class_attribute .)
    -               reduce using rule 86 (expression -> class_attribute .)
    +               reduce using rule 86 (expression -> class_attribute .)


state 39

    (21) function_call_statement -> function_call . ;
    (94) expression -> function_call .
    ;               shift and go to state 136
    ^               reduce using rule 94 (expression -> function_call .)
    [               reduce using rule 94 (expression -> function_call .)
    COLON_COLON     reduce using rule 94 (expression -> function_call .)
    (               reduce using rule 94 (expression -> function_call .)
    >               reduce using rule 94 (expression -> function_call .)
    <               reduce using rule 94 (expression -> function_call .)
    &               reduce using rule 94 (expression -> function_call .)
    |               reduce using rule 94 (expression -> function_call .)
    EQ_GREATER      reduce using rule 94 (expression -> function_call .)
    EQ_LESS         reduce using rule 94 (expression -> function_call .)
    NOT_EQEQ        reduce using rule 94 (expression -> function_call .)
    EQEQ            reduce using rule 94 (expression -> function_call .)
    %               reduce using rule 94 (expression -> function_call .)
    *               reduce using rule 94 (expression -> function_call .)
    /               reduce using rule 94 (expression -> function_call .)
    -               reduce using rule 94 (expression -> function_call .)
    +               reduce using rule 94 (expression -> function_call .)


state 40

    (47) class_declaration -> NAMESPACE . ID { program }
    ID              shift and go to state 137


state 41

    (48) class_declaration -> CLASS . ID { program }
    ID              shift and go to state 138


state 42

    (39) function_declaration -> FUNC . ID ( empty ) { program } TARROW expression
    (40) function_declaration -> FUNC . ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> FUNC . ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (43) function_declaration -> FUNC . ID ( function_arguments ) { program } TARROW expression
    ID              shift and go to state 139


state 43

    (42) function_declaration -> INIT . ( function_arguments ) { program } ;
    (               shift and go to state 140


state 44

    (121) _list -> [ . positional_args , ]
    (122) _list -> [ . positional_args ]
    (51) positional_args -> . expression
    (52) positional_args -> . positional_args , expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    positional_args                shift and go to state 141
    expression                     shift and go to state 142
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 45

    (140) python_code -> PYTHON_CODE_EXEC .
    ;               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    ^               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    [               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    COLON_COLON     reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    (               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    >               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    <               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    &               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    |               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    EQ_GREATER      reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    EQ_LESS         reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    NOT_EQEQ        reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    EQEQ            reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    %               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    *               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    /               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    -               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    +               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    :               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    ,               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    }               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    IN              reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    )               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    ]               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    EQ_DIV          reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    EQ_MOD          reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    EQ_MUL          reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    EQ_SUB          reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    EQ_ADD          reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    =               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    ?               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    {               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    SANDBOX         reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    LIMPORT         reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    .               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    IMPORT          reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    ID              reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    RETURN          reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    DEL             reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    FOR             reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    DEBUG           reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    SKIP            reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    BREAK           reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    LET             reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    WHILE           reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    NAMESPACE       reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    CLASS           reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    FUNC            reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    INIT            reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    PYTHON_CODE_EXEC reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    PYTHON_CODE     reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    IF              reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    #               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    !               reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    STRING          reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    FALSE           reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    TRUE            reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    FLOAT           reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    INT             reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    NULL            reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)
    $end            reduce using rule 140 (python_code -> PYTHON_CODE_EXEC .)


state 46

    (141) python_code -> PYTHON_CODE .
    ;               reduce using rule 141 (python_code -> PYTHON_CODE .)
    ^               reduce using rule 141 (python_code -> PYTHON_CODE .)
    [               reduce using rule 141 (python_code -> PYTHON_CODE .)
    COLON_COLON     reduce using rule 141 (python_code -> PYTHON_CODE .)
    (               reduce using rule 141 (python_code -> PYTHON_CODE .)
    >               reduce using rule 141 (python_code -> PYTHON_CODE .)
    <               reduce using rule 141 (python_code -> PYTHON_CODE .)
    &               reduce using rule 141 (python_code -> PYTHON_CODE .)
    |               reduce using rule 141 (python_code -> PYTHON_CODE .)
    EQ_GREATER      reduce using rule 141 (python_code -> PYTHON_CODE .)
    EQ_LESS         reduce using rule 141 (python_code -> PYTHON_CODE .)
    NOT_EQEQ        reduce using rule 141 (python_code -> PYTHON_CODE .)
    EQEQ            reduce using rule 141 (python_code -> PYTHON_CODE .)
    %               reduce using rule 141 (python_code -> PYTHON_CODE .)
    *               reduce using rule 141 (python_code -> PYTHON_CODE .)
    /               reduce using rule 141 (python_code -> PYTHON_CODE .)
    -               reduce using rule 141 (python_code -> PYTHON_CODE .)
    +               reduce using rule 141 (python_code -> PYTHON_CODE .)
    :               reduce using rule 141 (python_code -> PYTHON_CODE .)
    ,               reduce using rule 141 (python_code -> PYTHON_CODE .)
    }               reduce using rule 141 (python_code -> PYTHON_CODE .)
    IN              reduce using rule 141 (python_code -> PYTHON_CODE .)
    )               reduce using rule 141 (python_code -> PYTHON_CODE .)
    ]               reduce using rule 141 (python_code -> PYTHON_CODE .)
    EQ_DIV          reduce using rule 141 (python_code -> PYTHON_CODE .)
    EQ_MOD          reduce using rule 141 (python_code -> PYTHON_CODE .)
    EQ_MUL          reduce using rule 141 (python_code -> PYTHON_CODE .)
    EQ_SUB          reduce using rule 141 (python_code -> PYTHON_CODE .)
    EQ_ADD          reduce using rule 141 (python_code -> PYTHON_CODE .)
    =               reduce using rule 141 (python_code -> PYTHON_CODE .)
    ?               reduce using rule 141 (python_code -> PYTHON_CODE .)
    {               reduce using rule 141 (python_code -> PYTHON_CODE .)
    SANDBOX         reduce using rule 141 (python_code -> PYTHON_CODE .)
    LIMPORT         reduce using rule 141 (python_code -> PYTHON_CODE .)
    .               reduce using rule 141 (python_code -> PYTHON_CODE .)
    IMPORT          reduce using rule 141 (python_code -> PYTHON_CODE .)
    ID              reduce using rule 141 (python_code -> PYTHON_CODE .)
    RETURN          reduce using rule 141 (python_code -> PYTHON_CODE .)
    DEL             reduce using rule 141 (python_code -> PYTHON_CODE .)
    FOR             reduce using rule 141 (python_code -> PYTHON_CODE .)
    DEBUG           reduce using rule 141 (python_code -> PYTHON_CODE .)
    SKIP            reduce using rule 141 (python_code -> PYTHON_CODE .)
    BREAK           reduce using rule 141 (python_code -> PYTHON_CODE .)
    LET             reduce using rule 141 (python_code -> PYTHON_CODE .)
    WHILE           reduce using rule 141 (python_code -> PYTHON_CODE .)
    NAMESPACE       reduce using rule 141 (python_code -> PYTHON_CODE .)
    CLASS           reduce using rule 141 (python_code -> PYTHON_CODE .)
    FUNC            reduce using rule 141 (python_code -> PYTHON_CODE .)
    INIT            reduce using rule 141 (python_code -> PYTHON_CODE .)
    PYTHON_CODE_EXEC reduce using rule 141 (python_code -> PYTHON_CODE .)
    PYTHON_CODE     reduce using rule 141 (python_code -> PYTHON_CODE .)
    IF              reduce using rule 141 (python_code -> PYTHON_CODE .)
    #               reduce using rule 141 (python_code -> PYTHON_CODE .)
    !               reduce using rule 141 (python_code -> PYTHON_CODE .)
    STRING          reduce using rule 141 (python_code -> PYTHON_CODE .)
    FALSE           reduce using rule 141 (python_code -> PYTHON_CODE .)
    TRUE            reduce using rule 141 (python_code -> PYTHON_CODE .)
    FLOAT           reduce using rule 141 (python_code -> PYTHON_CODE .)
    INT             reduce using rule 141 (python_code -> PYTHON_CODE .)
    NULL            reduce using rule 141 (python_code -> PYTHON_CODE .)
    $end            reduce using rule 141 (python_code -> PYTHON_CODE .)


state 47

    (73) if_statement -> IF . ( expression ) { program }
    (               shift and go to state 143


state 48

    (30) function_call -> < . ID > expression
    ID              shift and go to state 144


state 49

    (33) function_call -> # . DEPENDS expression
    (34) function_call -> # . DEFINE expression ? ID
    DEPENDS         shift and go to state 145
    DEFINE          shift and go to state 146


state 50

    (82) expression -> assoc_array .
    ^               reduce using rule 82 (expression -> assoc_array .)
    [               reduce using rule 82 (expression -> assoc_array .)
    COLON_COLON     reduce using rule 82 (expression -> assoc_array .)
    (               reduce using rule 82 (expression -> assoc_array .)
    >               reduce using rule 82 (expression -> assoc_array .)
    <               reduce using rule 82 (expression -> assoc_array .)
    &               reduce using rule 82 (expression -> assoc_array .)
    |               reduce using rule 82 (expression -> assoc_array .)
    EQ_GREATER      reduce using rule 82 (expression -> assoc_array .)
    EQ_LESS         reduce using rule 82 (expression -> assoc_array .)
    NOT_EQEQ        reduce using rule 82 (expression -> assoc_array .)
    EQEQ            reduce using rule 82 (expression -> assoc_array .)
    %               reduce using rule 82 (expression -> assoc_array .)
    *               reduce using rule 82 (expression -> assoc_array .)
    /               reduce using rule 82 (expression -> assoc_array .)
    -               reduce using rule 82 (expression -> assoc_array .)
    +               reduce using rule 82 (expression -> assoc_array .)
    :               reduce using rule 82 (expression -> assoc_array .)
    ,               reduce using rule 82 (expression -> assoc_array .)
    }               reduce using rule 82 (expression -> assoc_array .)
    ;               reduce using rule 82 (expression -> assoc_array .)
    IN              reduce using rule 82 (expression -> assoc_array .)
    )               reduce using rule 82 (expression -> assoc_array .)
    ]               reduce using rule 82 (expression -> assoc_array .)
    EQ_DIV          reduce using rule 82 (expression -> assoc_array .)
    EQ_MOD          reduce using rule 82 (expression -> assoc_array .)
    EQ_MUL          reduce using rule 82 (expression -> assoc_array .)
    EQ_SUB          reduce using rule 82 (expression -> assoc_array .)
    EQ_ADD          reduce using rule 82 (expression -> assoc_array .)
    =               reduce using rule 82 (expression -> assoc_array .)
    ?               reduce using rule 82 (expression -> assoc_array .)
    {               reduce using rule 82 (expression -> assoc_array .)
    SANDBOX         reduce using rule 82 (expression -> assoc_array .)
    LIMPORT         reduce using rule 82 (expression -> assoc_array .)
    .               reduce using rule 82 (expression -> assoc_array .)
    IMPORT          reduce using rule 82 (expression -> assoc_array .)
    ID              reduce using rule 82 (expression -> assoc_array .)
    RETURN          reduce using rule 82 (expression -> assoc_array .)
    DEL             reduce using rule 82 (expression -> assoc_array .)
    FOR             reduce using rule 82 (expression -> assoc_array .)
    DEBUG           reduce using rule 82 (expression -> assoc_array .)
    SKIP            reduce using rule 82 (expression -> assoc_array .)
    BREAK           reduce using rule 82 (expression -> assoc_array .)
    LET             reduce using rule 82 (expression -> assoc_array .)
    WHILE           reduce using rule 82 (expression -> assoc_array .)
    NAMESPACE       reduce using rule 82 (expression -> assoc_array .)
    CLASS           reduce using rule 82 (expression -> assoc_array .)
    FUNC            reduce using rule 82 (expression -> assoc_array .)
    INIT            reduce using rule 82 (expression -> assoc_array .)
    PYTHON_CODE_EXEC reduce using rule 82 (expression -> assoc_array .)
    PYTHON_CODE     reduce using rule 82 (expression -> assoc_array .)
    IF              reduce using rule 82 (expression -> assoc_array .)
    #               reduce using rule 82 (expression -> assoc_array .)
    !               reduce using rule 82 (expression -> assoc_array .)
    STRING          reduce using rule 82 (expression -> assoc_array .)
    FALSE           reduce using rule 82 (expression -> assoc_array .)
    TRUE            reduce using rule 82 (expression -> assoc_array .)
    FLOAT           reduce using rule 82 (expression -> assoc_array .)
    INT             reduce using rule 82 (expression -> assoc_array .)
    NULL            reduce using rule 82 (expression -> assoc_array .)
    $end            reduce using rule 82 (expression -> assoc_array .)


state 51

    (83) expression -> _numpy .
    ^               reduce using rule 83 (expression -> _numpy .)
    [               reduce using rule 83 (expression -> _numpy .)
    COLON_COLON     reduce using rule 83 (expression -> _numpy .)
    (               reduce using rule 83 (expression -> _numpy .)
    >               reduce using rule 83 (expression -> _numpy .)
    <               reduce using rule 83 (expression -> _numpy .)
    &               reduce using rule 83 (expression -> _numpy .)
    |               reduce using rule 83 (expression -> _numpy .)
    EQ_GREATER      reduce using rule 83 (expression -> _numpy .)
    EQ_LESS         reduce using rule 83 (expression -> _numpy .)
    NOT_EQEQ        reduce using rule 83 (expression -> _numpy .)
    EQEQ            reduce using rule 83 (expression -> _numpy .)
    %               reduce using rule 83 (expression -> _numpy .)
    *               reduce using rule 83 (expression -> _numpy .)
    /               reduce using rule 83 (expression -> _numpy .)
    -               reduce using rule 83 (expression -> _numpy .)
    +               reduce using rule 83 (expression -> _numpy .)
    :               reduce using rule 83 (expression -> _numpy .)
    ,               reduce using rule 83 (expression -> _numpy .)
    }               reduce using rule 83 (expression -> _numpy .)
    ;               reduce using rule 83 (expression -> _numpy .)
    IN              reduce using rule 83 (expression -> _numpy .)
    )               reduce using rule 83 (expression -> _numpy .)
    ]               reduce using rule 83 (expression -> _numpy .)
    EQ_DIV          reduce using rule 83 (expression -> _numpy .)
    EQ_MOD          reduce using rule 83 (expression -> _numpy .)
    EQ_MUL          reduce using rule 83 (expression -> _numpy .)
    EQ_SUB          reduce using rule 83 (expression -> _numpy .)
    EQ_ADD          reduce using rule 83 (expression -> _numpy .)
    =               reduce using rule 83 (expression -> _numpy .)
    ?               reduce using rule 83 (expression -> _numpy .)
    {               reduce using rule 83 (expression -> _numpy .)
    SANDBOX         reduce using rule 83 (expression -> _numpy .)
    LIMPORT         reduce using rule 83 (expression -> _numpy .)
    .               reduce using rule 83 (expression -> _numpy .)
    IMPORT          reduce using rule 83 (expression -> _numpy .)
    ID              reduce using rule 83 (expression -> _numpy .)
    RETURN          reduce using rule 83 (expression -> _numpy .)
    DEL             reduce using rule 83 (expression -> _numpy .)
    FOR             reduce using rule 83 (expression -> _numpy .)
    DEBUG           reduce using rule 83 (expression -> _numpy .)
    SKIP            reduce using rule 83 (expression -> _numpy .)
    BREAK           reduce using rule 83 (expression -> _numpy .)
    LET             reduce using rule 83 (expression -> _numpy .)
    WHILE           reduce using rule 83 (expression -> _numpy .)
    NAMESPACE       reduce using rule 83 (expression -> _numpy .)
    CLASS           reduce using rule 83 (expression -> _numpy .)
    FUNC            reduce using rule 83 (expression -> _numpy .)
    INIT            reduce using rule 83 (expression -> _numpy .)
    PYTHON_CODE_EXEC reduce using rule 83 (expression -> _numpy .)
    PYTHON_CODE     reduce using rule 83 (expression -> _numpy .)
    IF              reduce using rule 83 (expression -> _numpy .)
    #               reduce using rule 83 (expression -> _numpy .)
    !               reduce using rule 83 (expression -> _numpy .)
    STRING          reduce using rule 83 (expression -> _numpy .)
    FALSE           reduce using rule 83 (expression -> _numpy .)
    TRUE            reduce using rule 83 (expression -> _numpy .)
    FLOAT           reduce using rule 83 (expression -> _numpy .)
    INT             reduce using rule 83 (expression -> _numpy .)
    NULL            reduce using rule 83 (expression -> _numpy .)
    $end            reduce using rule 83 (expression -> _numpy .)


state 52

    (84) expression -> _list .
    ^               reduce using rule 84 (expression -> _list .)
    [               reduce using rule 84 (expression -> _list .)
    COLON_COLON     reduce using rule 84 (expression -> _list .)
    (               reduce using rule 84 (expression -> _list .)
    >               reduce using rule 84 (expression -> _list .)
    <               reduce using rule 84 (expression -> _list .)
    &               reduce using rule 84 (expression -> _list .)
    |               reduce using rule 84 (expression -> _list .)
    EQ_GREATER      reduce using rule 84 (expression -> _list .)
    EQ_LESS         reduce using rule 84 (expression -> _list .)
    NOT_EQEQ        reduce using rule 84 (expression -> _list .)
    EQEQ            reduce using rule 84 (expression -> _list .)
    %               reduce using rule 84 (expression -> _list .)
    *               reduce using rule 84 (expression -> _list .)
    /               reduce using rule 84 (expression -> _list .)
    -               reduce using rule 84 (expression -> _list .)
    +               reduce using rule 84 (expression -> _list .)
    :               reduce using rule 84 (expression -> _list .)
    ,               reduce using rule 84 (expression -> _list .)
    }               reduce using rule 84 (expression -> _list .)
    ;               reduce using rule 84 (expression -> _list .)
    IN              reduce using rule 84 (expression -> _list .)
    )               reduce using rule 84 (expression -> _list .)
    ]               reduce using rule 84 (expression -> _list .)
    EQ_DIV          reduce using rule 84 (expression -> _list .)
    EQ_MOD          reduce using rule 84 (expression -> _list .)
    EQ_MUL          reduce using rule 84 (expression -> _list .)
    EQ_SUB          reduce using rule 84 (expression -> _list .)
    EQ_ADD          reduce using rule 84 (expression -> _list .)
    =               reduce using rule 84 (expression -> _list .)
    ?               reduce using rule 84 (expression -> _list .)
    {               reduce using rule 84 (expression -> _list .)
    SANDBOX         reduce using rule 84 (expression -> _list .)
    LIMPORT         reduce using rule 84 (expression -> _list .)
    .               reduce using rule 84 (expression -> _list .)
    IMPORT          reduce using rule 84 (expression -> _list .)
    ID              reduce using rule 84 (expression -> _list .)
    RETURN          reduce using rule 84 (expression -> _list .)
    DEL             reduce using rule 84 (expression -> _list .)
    FOR             reduce using rule 84 (expression -> _list .)
    DEBUG           reduce using rule 84 (expression -> _list .)
    SKIP            reduce using rule 84 (expression -> _list .)
    BREAK           reduce using rule 84 (expression -> _list .)
    LET             reduce using rule 84 (expression -> _list .)
    WHILE           reduce using rule 84 (expression -> _list .)
    NAMESPACE       reduce using rule 84 (expression -> _list .)
    CLASS           reduce using rule 84 (expression -> _list .)
    FUNC            reduce using rule 84 (expression -> _list .)
    INIT            reduce using rule 84 (expression -> _list .)
    PYTHON_CODE_EXEC reduce using rule 84 (expression -> _list .)
    PYTHON_CODE     reduce using rule 84 (expression -> _list .)
    IF              reduce using rule 84 (expression -> _list .)
    #               reduce using rule 84 (expression -> _list .)
    !               reduce using rule 84 (expression -> _list .)
    STRING          reduce using rule 84 (expression -> _list .)
    FALSE           reduce using rule 84 (expression -> _list .)
    TRUE            reduce using rule 84 (expression -> _list .)
    FLOAT           reduce using rule 84 (expression -> _list .)
    INT             reduce using rule 84 (expression -> _list .)
    NULL            reduce using rule 84 (expression -> _list .)
    $end            reduce using rule 84 (expression -> _list .)


state 53

    (85) expression -> _tuple .
    ^               reduce using rule 85 (expression -> _tuple .)
    [               reduce using rule 85 (expression -> _tuple .)
    COLON_COLON     reduce using rule 85 (expression -> _tuple .)
    (               reduce using rule 85 (expression -> _tuple .)
    >               reduce using rule 85 (expression -> _tuple .)
    <               reduce using rule 85 (expression -> _tuple .)
    &               reduce using rule 85 (expression -> _tuple .)
    |               reduce using rule 85 (expression -> _tuple .)
    EQ_GREATER      reduce using rule 85 (expression -> _tuple .)
    EQ_LESS         reduce using rule 85 (expression -> _tuple .)
    NOT_EQEQ        reduce using rule 85 (expression -> _tuple .)
    EQEQ            reduce using rule 85 (expression -> _tuple .)
    %               reduce using rule 85 (expression -> _tuple .)
    *               reduce using rule 85 (expression -> _tuple .)
    /               reduce using rule 85 (expression -> _tuple .)
    -               reduce using rule 85 (expression -> _tuple .)
    +               reduce using rule 85 (expression -> _tuple .)
    :               reduce using rule 85 (expression -> _tuple .)
    ,               reduce using rule 85 (expression -> _tuple .)
    }               reduce using rule 85 (expression -> _tuple .)
    ;               reduce using rule 85 (expression -> _tuple .)
    IN              reduce using rule 85 (expression -> _tuple .)
    )               reduce using rule 85 (expression -> _tuple .)
    ]               reduce using rule 85 (expression -> _tuple .)
    EQ_DIV          reduce using rule 85 (expression -> _tuple .)
    EQ_MOD          reduce using rule 85 (expression -> _tuple .)
    EQ_MUL          reduce using rule 85 (expression -> _tuple .)
    EQ_SUB          reduce using rule 85 (expression -> _tuple .)
    EQ_ADD          reduce using rule 85 (expression -> _tuple .)
    =               reduce using rule 85 (expression -> _tuple .)
    ?               reduce using rule 85 (expression -> _tuple .)
    {               reduce using rule 85 (expression -> _tuple .)
    SANDBOX         reduce using rule 85 (expression -> _tuple .)
    LIMPORT         reduce using rule 85 (expression -> _tuple .)
    .               reduce using rule 85 (expression -> _tuple .)
    IMPORT          reduce using rule 85 (expression -> _tuple .)
    ID              reduce using rule 85 (expression -> _tuple .)
    RETURN          reduce using rule 85 (expression -> _tuple .)
    DEL             reduce using rule 85 (expression -> _tuple .)
    FOR             reduce using rule 85 (expression -> _tuple .)
    DEBUG           reduce using rule 85 (expression -> _tuple .)
    SKIP            reduce using rule 85 (expression -> _tuple .)
    BREAK           reduce using rule 85 (expression -> _tuple .)
    LET             reduce using rule 85 (expression -> _tuple .)
    WHILE           reduce using rule 85 (expression -> _tuple .)
    NAMESPACE       reduce using rule 85 (expression -> _tuple .)
    CLASS           reduce using rule 85 (expression -> _tuple .)
    FUNC            reduce using rule 85 (expression -> _tuple .)
    INIT            reduce using rule 85 (expression -> _tuple .)
    PYTHON_CODE_EXEC reduce using rule 85 (expression -> _tuple .)
    PYTHON_CODE     reduce using rule 85 (expression -> _tuple .)
    IF              reduce using rule 85 (expression -> _tuple .)
    #               reduce using rule 85 (expression -> _tuple .)
    !               reduce using rule 85 (expression -> _tuple .)
    STRING          reduce using rule 85 (expression -> _tuple .)
    FALSE           reduce using rule 85 (expression -> _tuple .)
    TRUE            reduce using rule 85 (expression -> _tuple .)
    FLOAT           reduce using rule 85 (expression -> _tuple .)
    INT             reduce using rule 85 (expression -> _tuple .)
    NULL            reduce using rule 85 (expression -> _tuple .)
    $end            reduce using rule 85 (expression -> _tuple .)


state 54

    (87) expression -> id .
    ^               reduce using rule 87 (expression -> id .)
    [               reduce using rule 87 (expression -> id .)
    COLON_COLON     reduce using rule 87 (expression -> id .)
    (               reduce using rule 87 (expression -> id .)
    >               reduce using rule 87 (expression -> id .)
    <               reduce using rule 87 (expression -> id .)
    &               reduce using rule 87 (expression -> id .)
    |               reduce using rule 87 (expression -> id .)
    EQ_GREATER      reduce using rule 87 (expression -> id .)
    EQ_LESS         reduce using rule 87 (expression -> id .)
    NOT_EQEQ        reduce using rule 87 (expression -> id .)
    EQEQ            reduce using rule 87 (expression -> id .)
    %               reduce using rule 87 (expression -> id .)
    *               reduce using rule 87 (expression -> id .)
    /               reduce using rule 87 (expression -> id .)
    -               reduce using rule 87 (expression -> id .)
    +               reduce using rule 87 (expression -> id .)
    :               reduce using rule 87 (expression -> id .)
    ,               reduce using rule 87 (expression -> id .)
    }               reduce using rule 87 (expression -> id .)
    ;               reduce using rule 87 (expression -> id .)
    IN              reduce using rule 87 (expression -> id .)
    )               reduce using rule 87 (expression -> id .)
    ]               reduce using rule 87 (expression -> id .)
    EQ_DIV          reduce using rule 87 (expression -> id .)
    EQ_MOD          reduce using rule 87 (expression -> id .)
    EQ_MUL          reduce using rule 87 (expression -> id .)
    EQ_SUB          reduce using rule 87 (expression -> id .)
    EQ_ADD          reduce using rule 87 (expression -> id .)
    =               reduce using rule 87 (expression -> id .)
    ?               reduce using rule 87 (expression -> id .)
    {               reduce using rule 87 (expression -> id .)
    SANDBOX         reduce using rule 87 (expression -> id .)
    LIMPORT         reduce using rule 87 (expression -> id .)
    .               reduce using rule 87 (expression -> id .)
    IMPORT          reduce using rule 87 (expression -> id .)
    ID              reduce using rule 87 (expression -> id .)
    RETURN          reduce using rule 87 (expression -> id .)
    DEL             reduce using rule 87 (expression -> id .)
    FOR             reduce using rule 87 (expression -> id .)
    DEBUG           reduce using rule 87 (expression -> id .)
    SKIP            reduce using rule 87 (expression -> id .)
    BREAK           reduce using rule 87 (expression -> id .)
    LET             reduce using rule 87 (expression -> id .)
    WHILE           reduce using rule 87 (expression -> id .)
    NAMESPACE       reduce using rule 87 (expression -> id .)
    CLASS           reduce using rule 87 (expression -> id .)
    FUNC            reduce using rule 87 (expression -> id .)
    INIT            reduce using rule 87 (expression -> id .)
    PYTHON_CODE_EXEC reduce using rule 87 (expression -> id .)
    PYTHON_CODE     reduce using rule 87 (expression -> id .)
    IF              reduce using rule 87 (expression -> id .)
    #               reduce using rule 87 (expression -> id .)
    !               reduce using rule 87 (expression -> id .)
    STRING          reduce using rule 87 (expression -> id .)
    FALSE           reduce using rule 87 (expression -> id .)
    TRUE            reduce using rule 87 (expression -> id .)
    FLOAT           reduce using rule 87 (expression -> id .)
    INT             reduce using rule 87 (expression -> id .)
    NULL            reduce using rule 87 (expression -> id .)
    $end            reduce using rule 87 (expression -> id .)


state 55

    (88) expression -> string .
    ^               reduce using rule 88 (expression -> string .)
    [               reduce using rule 88 (expression -> string .)
    COLON_COLON     reduce using rule 88 (expression -> string .)
    (               reduce using rule 88 (expression -> string .)
    >               reduce using rule 88 (expression -> string .)
    <               reduce using rule 88 (expression -> string .)
    &               reduce using rule 88 (expression -> string .)
    |               reduce using rule 88 (expression -> string .)
    EQ_GREATER      reduce using rule 88 (expression -> string .)
    EQ_LESS         reduce using rule 88 (expression -> string .)
    NOT_EQEQ        reduce using rule 88 (expression -> string .)
    EQEQ            reduce using rule 88 (expression -> string .)
    %               reduce using rule 88 (expression -> string .)
    *               reduce using rule 88 (expression -> string .)
    /               reduce using rule 88 (expression -> string .)
    -               reduce using rule 88 (expression -> string .)
    +               reduce using rule 88 (expression -> string .)
    :               reduce using rule 88 (expression -> string .)
    ,               reduce using rule 88 (expression -> string .)
    }               reduce using rule 88 (expression -> string .)
    ;               reduce using rule 88 (expression -> string .)
    IN              reduce using rule 88 (expression -> string .)
    )               reduce using rule 88 (expression -> string .)
    ]               reduce using rule 88 (expression -> string .)
    EQ_DIV          reduce using rule 88 (expression -> string .)
    EQ_MOD          reduce using rule 88 (expression -> string .)
    EQ_MUL          reduce using rule 88 (expression -> string .)
    EQ_SUB          reduce using rule 88 (expression -> string .)
    EQ_ADD          reduce using rule 88 (expression -> string .)
    =               reduce using rule 88 (expression -> string .)
    ?               reduce using rule 88 (expression -> string .)
    {               reduce using rule 88 (expression -> string .)
    SANDBOX         reduce using rule 88 (expression -> string .)
    LIMPORT         reduce using rule 88 (expression -> string .)
    .               reduce using rule 88 (expression -> string .)
    IMPORT          reduce using rule 88 (expression -> string .)
    ID              reduce using rule 88 (expression -> string .)
    RETURN          reduce using rule 88 (expression -> string .)
    DEL             reduce using rule 88 (expression -> string .)
    FOR             reduce using rule 88 (expression -> string .)
    DEBUG           reduce using rule 88 (expression -> string .)
    SKIP            reduce using rule 88 (expression -> string .)
    BREAK           reduce using rule 88 (expression -> string .)
    LET             reduce using rule 88 (expression -> string .)
    WHILE           reduce using rule 88 (expression -> string .)
    NAMESPACE       reduce using rule 88 (expression -> string .)
    CLASS           reduce using rule 88 (expression -> string .)
    FUNC            reduce using rule 88 (expression -> string .)
    INIT            reduce using rule 88 (expression -> string .)
    PYTHON_CODE_EXEC reduce using rule 88 (expression -> string .)
    PYTHON_CODE     reduce using rule 88 (expression -> string .)
    IF              reduce using rule 88 (expression -> string .)
    #               reduce using rule 88 (expression -> string .)
    !               reduce using rule 88 (expression -> string .)
    STRING          reduce using rule 88 (expression -> string .)
    FALSE           reduce using rule 88 (expression -> string .)
    TRUE            reduce using rule 88 (expression -> string .)
    FLOAT           reduce using rule 88 (expression -> string .)
    INT             reduce using rule 88 (expression -> string .)
    NULL            reduce using rule 88 (expression -> string .)
    $end            reduce using rule 88 (expression -> string .)


state 56

    (89) expression -> bool .
    ^               reduce using rule 89 (expression -> bool .)
    [               reduce using rule 89 (expression -> bool .)
    COLON_COLON     reduce using rule 89 (expression -> bool .)
    (               reduce using rule 89 (expression -> bool .)
    >               reduce using rule 89 (expression -> bool .)
    <               reduce using rule 89 (expression -> bool .)
    &               reduce using rule 89 (expression -> bool .)
    |               reduce using rule 89 (expression -> bool .)
    EQ_GREATER      reduce using rule 89 (expression -> bool .)
    EQ_LESS         reduce using rule 89 (expression -> bool .)
    NOT_EQEQ        reduce using rule 89 (expression -> bool .)
    EQEQ            reduce using rule 89 (expression -> bool .)
    %               reduce using rule 89 (expression -> bool .)
    *               reduce using rule 89 (expression -> bool .)
    /               reduce using rule 89 (expression -> bool .)
    -               reduce using rule 89 (expression -> bool .)
    +               reduce using rule 89 (expression -> bool .)
    :               reduce using rule 89 (expression -> bool .)
    ,               reduce using rule 89 (expression -> bool .)
    }               reduce using rule 89 (expression -> bool .)
    ;               reduce using rule 89 (expression -> bool .)
    IN              reduce using rule 89 (expression -> bool .)
    )               reduce using rule 89 (expression -> bool .)
    ]               reduce using rule 89 (expression -> bool .)
    EQ_DIV          reduce using rule 89 (expression -> bool .)
    EQ_MOD          reduce using rule 89 (expression -> bool .)
    EQ_MUL          reduce using rule 89 (expression -> bool .)
    EQ_SUB          reduce using rule 89 (expression -> bool .)
    EQ_ADD          reduce using rule 89 (expression -> bool .)
    =               reduce using rule 89 (expression -> bool .)
    ?               reduce using rule 89 (expression -> bool .)
    {               reduce using rule 89 (expression -> bool .)
    SANDBOX         reduce using rule 89 (expression -> bool .)
    LIMPORT         reduce using rule 89 (expression -> bool .)
    .               reduce using rule 89 (expression -> bool .)
    IMPORT          reduce using rule 89 (expression -> bool .)
    ID              reduce using rule 89 (expression -> bool .)
    RETURN          reduce using rule 89 (expression -> bool .)
    DEL             reduce using rule 89 (expression -> bool .)
    FOR             reduce using rule 89 (expression -> bool .)
    DEBUG           reduce using rule 89 (expression -> bool .)
    SKIP            reduce using rule 89 (expression -> bool .)
    BREAK           reduce using rule 89 (expression -> bool .)
    LET             reduce using rule 89 (expression -> bool .)
    WHILE           reduce using rule 89 (expression -> bool .)
    NAMESPACE       reduce using rule 89 (expression -> bool .)
    CLASS           reduce using rule 89 (expression -> bool .)
    FUNC            reduce using rule 89 (expression -> bool .)
    INIT            reduce using rule 89 (expression -> bool .)
    PYTHON_CODE_EXEC reduce using rule 89 (expression -> bool .)
    PYTHON_CODE     reduce using rule 89 (expression -> bool .)
    IF              reduce using rule 89 (expression -> bool .)
    #               reduce using rule 89 (expression -> bool .)
    !               reduce using rule 89 (expression -> bool .)
    STRING          reduce using rule 89 (expression -> bool .)
    FALSE           reduce using rule 89 (expression -> bool .)
    TRUE            reduce using rule 89 (expression -> bool .)
    FLOAT           reduce using rule 89 (expression -> bool .)
    INT             reduce using rule 89 (expression -> bool .)
    NULL            reduce using rule 89 (expression -> bool .)
    $end            reduce using rule 89 (expression -> bool .)


state 57

    (90) expression -> float .
    ^               reduce using rule 90 (expression -> float .)
    [               reduce using rule 90 (expression -> float .)
    COLON_COLON     reduce using rule 90 (expression -> float .)
    (               reduce using rule 90 (expression -> float .)
    >               reduce using rule 90 (expression -> float .)
    <               reduce using rule 90 (expression -> float .)
    &               reduce using rule 90 (expression -> float .)
    |               reduce using rule 90 (expression -> float .)
    EQ_GREATER      reduce using rule 90 (expression -> float .)
    EQ_LESS         reduce using rule 90 (expression -> float .)
    NOT_EQEQ        reduce using rule 90 (expression -> float .)
    EQEQ            reduce using rule 90 (expression -> float .)
    %               reduce using rule 90 (expression -> float .)
    *               reduce using rule 90 (expression -> float .)
    /               reduce using rule 90 (expression -> float .)
    -               reduce using rule 90 (expression -> float .)
    +               reduce using rule 90 (expression -> float .)
    :               reduce using rule 90 (expression -> float .)
    ,               reduce using rule 90 (expression -> float .)
    }               reduce using rule 90 (expression -> float .)
    ;               reduce using rule 90 (expression -> float .)
    IN              reduce using rule 90 (expression -> float .)
    )               reduce using rule 90 (expression -> float .)
    ]               reduce using rule 90 (expression -> float .)
    EQ_DIV          reduce using rule 90 (expression -> float .)
    EQ_MOD          reduce using rule 90 (expression -> float .)
    EQ_MUL          reduce using rule 90 (expression -> float .)
    EQ_SUB          reduce using rule 90 (expression -> float .)
    EQ_ADD          reduce using rule 90 (expression -> float .)
    =               reduce using rule 90 (expression -> float .)
    ?               reduce using rule 90 (expression -> float .)
    {               reduce using rule 90 (expression -> float .)
    SANDBOX         reduce using rule 90 (expression -> float .)
    LIMPORT         reduce using rule 90 (expression -> float .)
    .               reduce using rule 90 (expression -> float .)
    IMPORT          reduce using rule 90 (expression -> float .)
    ID              reduce using rule 90 (expression -> float .)
    RETURN          reduce using rule 90 (expression -> float .)
    DEL             reduce using rule 90 (expression -> float .)
    FOR             reduce using rule 90 (expression -> float .)
    DEBUG           reduce using rule 90 (expression -> float .)
    SKIP            reduce using rule 90 (expression -> float .)
    BREAK           reduce using rule 90 (expression -> float .)
    LET             reduce using rule 90 (expression -> float .)
    WHILE           reduce using rule 90 (expression -> float .)
    NAMESPACE       reduce using rule 90 (expression -> float .)
    CLASS           reduce using rule 90 (expression -> float .)
    FUNC            reduce using rule 90 (expression -> float .)
    INIT            reduce using rule 90 (expression -> float .)
    PYTHON_CODE_EXEC reduce using rule 90 (expression -> float .)
    PYTHON_CODE     reduce using rule 90 (expression -> float .)
    IF              reduce using rule 90 (expression -> float .)
    #               reduce using rule 90 (expression -> float .)
    !               reduce using rule 90 (expression -> float .)
    STRING          reduce using rule 90 (expression -> float .)
    FALSE           reduce using rule 90 (expression -> float .)
    TRUE            reduce using rule 90 (expression -> float .)
    FLOAT           reduce using rule 90 (expression -> float .)
    INT             reduce using rule 90 (expression -> float .)
    NULL            reduce using rule 90 (expression -> float .)
    $end            reduce using rule 90 (expression -> float .)


state 58

    (91) expression -> int .
    ^               reduce using rule 91 (expression -> int .)
    [               reduce using rule 91 (expression -> int .)
    COLON_COLON     reduce using rule 91 (expression -> int .)
    (               reduce using rule 91 (expression -> int .)
    >               reduce using rule 91 (expression -> int .)
    <               reduce using rule 91 (expression -> int .)
    &               reduce using rule 91 (expression -> int .)
    |               reduce using rule 91 (expression -> int .)
    EQ_GREATER      reduce using rule 91 (expression -> int .)
    EQ_LESS         reduce using rule 91 (expression -> int .)
    NOT_EQEQ        reduce using rule 91 (expression -> int .)
    EQEQ            reduce using rule 91 (expression -> int .)
    %               reduce using rule 91 (expression -> int .)
    *               reduce using rule 91 (expression -> int .)
    /               reduce using rule 91 (expression -> int .)
    -               reduce using rule 91 (expression -> int .)
    +               reduce using rule 91 (expression -> int .)
    :               reduce using rule 91 (expression -> int .)
    ,               reduce using rule 91 (expression -> int .)
    }               reduce using rule 91 (expression -> int .)
    ;               reduce using rule 91 (expression -> int .)
    IN              reduce using rule 91 (expression -> int .)
    )               reduce using rule 91 (expression -> int .)
    ]               reduce using rule 91 (expression -> int .)
    EQ_DIV          reduce using rule 91 (expression -> int .)
    EQ_MOD          reduce using rule 91 (expression -> int .)
    EQ_MUL          reduce using rule 91 (expression -> int .)
    EQ_SUB          reduce using rule 91 (expression -> int .)
    EQ_ADD          reduce using rule 91 (expression -> int .)
    =               reduce using rule 91 (expression -> int .)
    ?               reduce using rule 91 (expression -> int .)
    {               reduce using rule 91 (expression -> int .)
    SANDBOX         reduce using rule 91 (expression -> int .)
    LIMPORT         reduce using rule 91 (expression -> int .)
    .               reduce using rule 91 (expression -> int .)
    IMPORT          reduce using rule 91 (expression -> int .)
    ID              reduce using rule 91 (expression -> int .)
    RETURN          reduce using rule 91 (expression -> int .)
    DEL             reduce using rule 91 (expression -> int .)
    FOR             reduce using rule 91 (expression -> int .)
    DEBUG           reduce using rule 91 (expression -> int .)
    SKIP            reduce using rule 91 (expression -> int .)
    BREAK           reduce using rule 91 (expression -> int .)
    LET             reduce using rule 91 (expression -> int .)
    WHILE           reduce using rule 91 (expression -> int .)
    NAMESPACE       reduce using rule 91 (expression -> int .)
    CLASS           reduce using rule 91 (expression -> int .)
    FUNC            reduce using rule 91 (expression -> int .)
    INIT            reduce using rule 91 (expression -> int .)
    PYTHON_CODE_EXEC reduce using rule 91 (expression -> int .)
    PYTHON_CODE     reduce using rule 91 (expression -> int .)
    IF              reduce using rule 91 (expression -> int .)
    #               reduce using rule 91 (expression -> int .)
    !               reduce using rule 91 (expression -> int .)
    STRING          reduce using rule 91 (expression -> int .)
    FALSE           reduce using rule 91 (expression -> int .)
    TRUE            reduce using rule 91 (expression -> int .)
    FLOAT           reduce using rule 91 (expression -> int .)
    INT             reduce using rule 91 (expression -> int .)
    NULL            reduce using rule 91 (expression -> int .)
    $end            reduce using rule 91 (expression -> int .)


state 59

    (92) expression -> null .
    ^               reduce using rule 92 (expression -> null .)
    [               reduce using rule 92 (expression -> null .)
    COLON_COLON     reduce using rule 92 (expression -> null .)
    (               reduce using rule 92 (expression -> null .)
    >               reduce using rule 92 (expression -> null .)
    <               reduce using rule 92 (expression -> null .)
    &               reduce using rule 92 (expression -> null .)
    |               reduce using rule 92 (expression -> null .)
    EQ_GREATER      reduce using rule 92 (expression -> null .)
    EQ_LESS         reduce using rule 92 (expression -> null .)
    NOT_EQEQ        reduce using rule 92 (expression -> null .)
    EQEQ            reduce using rule 92 (expression -> null .)
    %               reduce using rule 92 (expression -> null .)
    *               reduce using rule 92 (expression -> null .)
    /               reduce using rule 92 (expression -> null .)
    -               reduce using rule 92 (expression -> null .)
    +               reduce using rule 92 (expression -> null .)
    :               reduce using rule 92 (expression -> null .)
    ,               reduce using rule 92 (expression -> null .)
    }               reduce using rule 92 (expression -> null .)
    ;               reduce using rule 92 (expression -> null .)
    IN              reduce using rule 92 (expression -> null .)
    )               reduce using rule 92 (expression -> null .)
    ]               reduce using rule 92 (expression -> null .)
    EQ_DIV          reduce using rule 92 (expression -> null .)
    EQ_MOD          reduce using rule 92 (expression -> null .)
    EQ_MUL          reduce using rule 92 (expression -> null .)
    EQ_SUB          reduce using rule 92 (expression -> null .)
    EQ_ADD          reduce using rule 92 (expression -> null .)
    =               reduce using rule 92 (expression -> null .)
    ?               reduce using rule 92 (expression -> null .)
    {               reduce using rule 92 (expression -> null .)
    SANDBOX         reduce using rule 92 (expression -> null .)
    LIMPORT         reduce using rule 92 (expression -> null .)
    .               reduce using rule 92 (expression -> null .)
    IMPORT          reduce using rule 92 (expression -> null .)
    ID              reduce using rule 92 (expression -> null .)
    RETURN          reduce using rule 92 (expression -> null .)
    DEL             reduce using rule 92 (expression -> null .)
    FOR             reduce using rule 92 (expression -> null .)
    DEBUG           reduce using rule 92 (expression -> null .)
    SKIP            reduce using rule 92 (expression -> null .)
    BREAK           reduce using rule 92 (expression -> null .)
    LET             reduce using rule 92 (expression -> null .)
    WHILE           reduce using rule 92 (expression -> null .)
    NAMESPACE       reduce using rule 92 (expression -> null .)
    CLASS           reduce using rule 92 (expression -> null .)
    FUNC            reduce using rule 92 (expression -> null .)
    INIT            reduce using rule 92 (expression -> null .)
    PYTHON_CODE_EXEC reduce using rule 92 (expression -> null .)
    PYTHON_CODE     reduce using rule 92 (expression -> null .)
    IF              reduce using rule 92 (expression -> null .)
    #               reduce using rule 92 (expression -> null .)
    !               reduce using rule 92 (expression -> null .)
    STRING          reduce using rule 92 (expression -> null .)
    FALSE           reduce using rule 92 (expression -> null .)
    TRUE            reduce using rule 92 (expression -> null .)
    FLOAT           reduce using rule 92 (expression -> null .)
    INT             reduce using rule 92 (expression -> null .)
    NULL            reduce using rule 92 (expression -> null .)
    $end            reduce using rule 92 (expression -> null .)


state 60

    (99) expression -> ! . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 147
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 61

    (114) expression -> & . ID
    ID              shift and go to state 148


state 62

    (113) expression -> * . ID
    ID              shift and go to state 149


state 63

    (112) expression -> - . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 150
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 64

    (111) expression -> + . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 151
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 65

    (131) string -> STRING .
    ^               reduce using rule 131 (string -> STRING .)
    [               reduce using rule 131 (string -> STRING .)
    COLON_COLON     reduce using rule 131 (string -> STRING .)
    (               reduce using rule 131 (string -> STRING .)
    >               reduce using rule 131 (string -> STRING .)
    <               reduce using rule 131 (string -> STRING .)
    &               reduce using rule 131 (string -> STRING .)
    |               reduce using rule 131 (string -> STRING .)
    EQ_GREATER      reduce using rule 131 (string -> STRING .)
    EQ_LESS         reduce using rule 131 (string -> STRING .)
    NOT_EQEQ        reduce using rule 131 (string -> STRING .)
    EQEQ            reduce using rule 131 (string -> STRING .)
    %               reduce using rule 131 (string -> STRING .)
    *               reduce using rule 131 (string -> STRING .)
    /               reduce using rule 131 (string -> STRING .)
    -               reduce using rule 131 (string -> STRING .)
    +               reduce using rule 131 (string -> STRING .)
    :               reduce using rule 131 (string -> STRING .)
    ,               reduce using rule 131 (string -> STRING .)
    }               reduce using rule 131 (string -> STRING .)
    ;               reduce using rule 131 (string -> STRING .)
    IN              reduce using rule 131 (string -> STRING .)
    )               reduce using rule 131 (string -> STRING .)
    ]               reduce using rule 131 (string -> STRING .)
    EQ_DIV          reduce using rule 131 (string -> STRING .)
    EQ_MOD          reduce using rule 131 (string -> STRING .)
    EQ_MUL          reduce using rule 131 (string -> STRING .)
    EQ_SUB          reduce using rule 131 (string -> STRING .)
    EQ_ADD          reduce using rule 131 (string -> STRING .)
    =               reduce using rule 131 (string -> STRING .)
    ?               reduce using rule 131 (string -> STRING .)
    {               reduce using rule 131 (string -> STRING .)
    SANDBOX         reduce using rule 131 (string -> STRING .)
    LIMPORT         reduce using rule 131 (string -> STRING .)
    .               reduce using rule 131 (string -> STRING .)
    IMPORT          reduce using rule 131 (string -> STRING .)
    ID              reduce using rule 131 (string -> STRING .)
    RETURN          reduce using rule 131 (string -> STRING .)
    DEL             reduce using rule 131 (string -> STRING .)
    FOR             reduce using rule 131 (string -> STRING .)
    DEBUG           reduce using rule 131 (string -> STRING .)
    SKIP            reduce using rule 131 (string -> STRING .)
    BREAK           reduce using rule 131 (string -> STRING .)
    LET             reduce using rule 131 (string -> STRING .)
    WHILE           reduce using rule 131 (string -> STRING .)
    NAMESPACE       reduce using rule 131 (string -> STRING .)
    CLASS           reduce using rule 131 (string -> STRING .)
    FUNC            reduce using rule 131 (string -> STRING .)
    INIT            reduce using rule 131 (string -> STRING .)
    PYTHON_CODE_EXEC reduce using rule 131 (string -> STRING .)
    PYTHON_CODE     reduce using rule 131 (string -> STRING .)
    IF              reduce using rule 131 (string -> STRING .)
    #               reduce using rule 131 (string -> STRING .)
    !               reduce using rule 131 (string -> STRING .)
    STRING          reduce using rule 131 (string -> STRING .)
    FALSE           reduce using rule 131 (string -> STRING .)
    TRUE            reduce using rule 131 (string -> STRING .)
    FLOAT           reduce using rule 131 (string -> STRING .)
    INT             reduce using rule 131 (string -> STRING .)
    NULL            reduce using rule 131 (string -> STRING .)
    $end            reduce using rule 131 (string -> STRING .)


state 66

    (133) bool -> FALSE .
    ^               reduce using rule 133 (bool -> FALSE .)
    [               reduce using rule 133 (bool -> FALSE .)
    COLON_COLON     reduce using rule 133 (bool -> FALSE .)
    (               reduce using rule 133 (bool -> FALSE .)
    >               reduce using rule 133 (bool -> FALSE .)
    <               reduce using rule 133 (bool -> FALSE .)
    &               reduce using rule 133 (bool -> FALSE .)
    |               reduce using rule 133 (bool -> FALSE .)
    EQ_GREATER      reduce using rule 133 (bool -> FALSE .)
    EQ_LESS         reduce using rule 133 (bool -> FALSE .)
    NOT_EQEQ        reduce using rule 133 (bool -> FALSE .)
    EQEQ            reduce using rule 133 (bool -> FALSE .)
    %               reduce using rule 133 (bool -> FALSE .)
    *               reduce using rule 133 (bool -> FALSE .)
    /               reduce using rule 133 (bool -> FALSE .)
    -               reduce using rule 133 (bool -> FALSE .)
    +               reduce using rule 133 (bool -> FALSE .)
    :               reduce using rule 133 (bool -> FALSE .)
    ,               reduce using rule 133 (bool -> FALSE .)
    }               reduce using rule 133 (bool -> FALSE .)
    ;               reduce using rule 133 (bool -> FALSE .)
    IN              reduce using rule 133 (bool -> FALSE .)
    )               reduce using rule 133 (bool -> FALSE .)
    ]               reduce using rule 133 (bool -> FALSE .)
    EQ_DIV          reduce using rule 133 (bool -> FALSE .)
    EQ_MOD          reduce using rule 133 (bool -> FALSE .)
    EQ_MUL          reduce using rule 133 (bool -> FALSE .)
    EQ_SUB          reduce using rule 133 (bool -> FALSE .)
    EQ_ADD          reduce using rule 133 (bool -> FALSE .)
    =               reduce using rule 133 (bool -> FALSE .)
    ?               reduce using rule 133 (bool -> FALSE .)
    {               reduce using rule 133 (bool -> FALSE .)
    SANDBOX         reduce using rule 133 (bool -> FALSE .)
    LIMPORT         reduce using rule 133 (bool -> FALSE .)
    .               reduce using rule 133 (bool -> FALSE .)
    IMPORT          reduce using rule 133 (bool -> FALSE .)
    ID              reduce using rule 133 (bool -> FALSE .)
    RETURN          reduce using rule 133 (bool -> FALSE .)
    DEL             reduce using rule 133 (bool -> FALSE .)
    FOR             reduce using rule 133 (bool -> FALSE .)
    DEBUG           reduce using rule 133 (bool -> FALSE .)
    SKIP            reduce using rule 133 (bool -> FALSE .)
    BREAK           reduce using rule 133 (bool -> FALSE .)
    LET             reduce using rule 133 (bool -> FALSE .)
    WHILE           reduce using rule 133 (bool -> FALSE .)
    NAMESPACE       reduce using rule 133 (bool -> FALSE .)
    CLASS           reduce using rule 133 (bool -> FALSE .)
    FUNC            reduce using rule 133 (bool -> FALSE .)
    INIT            reduce using rule 133 (bool -> FALSE .)
    PYTHON_CODE_EXEC reduce using rule 133 (bool -> FALSE .)
    PYTHON_CODE     reduce using rule 133 (bool -> FALSE .)
    IF              reduce using rule 133 (bool -> FALSE .)
    #               reduce using rule 133 (bool -> FALSE .)
    !               reduce using rule 133 (bool -> FALSE .)
    STRING          reduce using rule 133 (bool -> FALSE .)
    FALSE           reduce using rule 133 (bool -> FALSE .)
    TRUE            reduce using rule 133 (bool -> FALSE .)
    FLOAT           reduce using rule 133 (bool -> FALSE .)
    INT             reduce using rule 133 (bool -> FALSE .)
    NULL            reduce using rule 133 (bool -> FALSE .)
    $end            reduce using rule 133 (bool -> FALSE .)


state 67

    (134) bool -> TRUE .
    ^               reduce using rule 134 (bool -> TRUE .)
    [               reduce using rule 134 (bool -> TRUE .)
    COLON_COLON     reduce using rule 134 (bool -> TRUE .)
    (               reduce using rule 134 (bool -> TRUE .)
    >               reduce using rule 134 (bool -> TRUE .)
    <               reduce using rule 134 (bool -> TRUE .)
    &               reduce using rule 134 (bool -> TRUE .)
    |               reduce using rule 134 (bool -> TRUE .)
    EQ_GREATER      reduce using rule 134 (bool -> TRUE .)
    EQ_LESS         reduce using rule 134 (bool -> TRUE .)
    NOT_EQEQ        reduce using rule 134 (bool -> TRUE .)
    EQEQ            reduce using rule 134 (bool -> TRUE .)
    %               reduce using rule 134 (bool -> TRUE .)
    *               reduce using rule 134 (bool -> TRUE .)
    /               reduce using rule 134 (bool -> TRUE .)
    -               reduce using rule 134 (bool -> TRUE .)
    +               reduce using rule 134 (bool -> TRUE .)
    :               reduce using rule 134 (bool -> TRUE .)
    ,               reduce using rule 134 (bool -> TRUE .)
    }               reduce using rule 134 (bool -> TRUE .)
    ;               reduce using rule 134 (bool -> TRUE .)
    IN              reduce using rule 134 (bool -> TRUE .)
    )               reduce using rule 134 (bool -> TRUE .)
    ]               reduce using rule 134 (bool -> TRUE .)
    EQ_DIV          reduce using rule 134 (bool -> TRUE .)
    EQ_MOD          reduce using rule 134 (bool -> TRUE .)
    EQ_MUL          reduce using rule 134 (bool -> TRUE .)
    EQ_SUB          reduce using rule 134 (bool -> TRUE .)
    EQ_ADD          reduce using rule 134 (bool -> TRUE .)
    =               reduce using rule 134 (bool -> TRUE .)
    ?               reduce using rule 134 (bool -> TRUE .)
    {               reduce using rule 134 (bool -> TRUE .)
    SANDBOX         reduce using rule 134 (bool -> TRUE .)
    LIMPORT         reduce using rule 134 (bool -> TRUE .)
    .               reduce using rule 134 (bool -> TRUE .)
    IMPORT          reduce using rule 134 (bool -> TRUE .)
    ID              reduce using rule 134 (bool -> TRUE .)
    RETURN          reduce using rule 134 (bool -> TRUE .)
    DEL             reduce using rule 134 (bool -> TRUE .)
    FOR             reduce using rule 134 (bool -> TRUE .)
    DEBUG           reduce using rule 134 (bool -> TRUE .)
    SKIP            reduce using rule 134 (bool -> TRUE .)
    BREAK           reduce using rule 134 (bool -> TRUE .)
    LET             reduce using rule 134 (bool -> TRUE .)
    WHILE           reduce using rule 134 (bool -> TRUE .)
    NAMESPACE       reduce using rule 134 (bool -> TRUE .)
    CLASS           reduce using rule 134 (bool -> TRUE .)
    FUNC            reduce using rule 134 (bool -> TRUE .)
    INIT            reduce using rule 134 (bool -> TRUE .)
    PYTHON_CODE_EXEC reduce using rule 134 (bool -> TRUE .)
    PYTHON_CODE     reduce using rule 134 (bool -> TRUE .)
    IF              reduce using rule 134 (bool -> TRUE .)
    #               reduce using rule 134 (bool -> TRUE .)
    !               reduce using rule 134 (bool -> TRUE .)
    STRING          reduce using rule 134 (bool -> TRUE .)
    FALSE           reduce using rule 134 (bool -> TRUE .)
    TRUE            reduce using rule 134 (bool -> TRUE .)
    FLOAT           reduce using rule 134 (bool -> TRUE .)
    INT             reduce using rule 134 (bool -> TRUE .)
    NULL            reduce using rule 134 (bool -> TRUE .)
    $end            reduce using rule 134 (bool -> TRUE .)


state 68

    (132) float -> FLOAT .
    ^               reduce using rule 132 (float -> FLOAT .)
    [               reduce using rule 132 (float -> FLOAT .)
    COLON_COLON     reduce using rule 132 (float -> FLOAT .)
    (               reduce using rule 132 (float -> FLOAT .)
    >               reduce using rule 132 (float -> FLOAT .)
    <               reduce using rule 132 (float -> FLOAT .)
    &               reduce using rule 132 (float -> FLOAT .)
    |               reduce using rule 132 (float -> FLOAT .)
    EQ_GREATER      reduce using rule 132 (float -> FLOAT .)
    EQ_LESS         reduce using rule 132 (float -> FLOAT .)
    NOT_EQEQ        reduce using rule 132 (float -> FLOAT .)
    EQEQ            reduce using rule 132 (float -> FLOAT .)
    %               reduce using rule 132 (float -> FLOAT .)
    *               reduce using rule 132 (float -> FLOAT .)
    /               reduce using rule 132 (float -> FLOAT .)
    -               reduce using rule 132 (float -> FLOAT .)
    +               reduce using rule 132 (float -> FLOAT .)
    :               reduce using rule 132 (float -> FLOAT .)
    ,               reduce using rule 132 (float -> FLOAT .)
    }               reduce using rule 132 (float -> FLOAT .)
    ;               reduce using rule 132 (float -> FLOAT .)
    IN              reduce using rule 132 (float -> FLOAT .)
    )               reduce using rule 132 (float -> FLOAT .)
    ]               reduce using rule 132 (float -> FLOAT .)
    EQ_DIV          reduce using rule 132 (float -> FLOAT .)
    EQ_MOD          reduce using rule 132 (float -> FLOAT .)
    EQ_MUL          reduce using rule 132 (float -> FLOAT .)
    EQ_SUB          reduce using rule 132 (float -> FLOAT .)
    EQ_ADD          reduce using rule 132 (float -> FLOAT .)
    =               reduce using rule 132 (float -> FLOAT .)
    ?               reduce using rule 132 (float -> FLOAT .)
    {               reduce using rule 132 (float -> FLOAT .)
    SANDBOX         reduce using rule 132 (float -> FLOAT .)
    LIMPORT         reduce using rule 132 (float -> FLOAT .)
    .               reduce using rule 132 (float -> FLOAT .)
    IMPORT          reduce using rule 132 (float -> FLOAT .)
    ID              reduce using rule 132 (float -> FLOAT .)
    RETURN          reduce using rule 132 (float -> FLOAT .)
    DEL             reduce using rule 132 (float -> FLOAT .)
    FOR             reduce using rule 132 (float -> FLOAT .)
    DEBUG           reduce using rule 132 (float -> FLOAT .)
    SKIP            reduce using rule 132 (float -> FLOAT .)
    BREAK           reduce using rule 132 (float -> FLOAT .)
    LET             reduce using rule 132 (float -> FLOAT .)
    WHILE           reduce using rule 132 (float -> FLOAT .)
    NAMESPACE       reduce using rule 132 (float -> FLOAT .)
    CLASS           reduce using rule 132 (float -> FLOAT .)
    FUNC            reduce using rule 132 (float -> FLOAT .)
    INIT            reduce using rule 132 (float -> FLOAT .)
    PYTHON_CODE_EXEC reduce using rule 132 (float -> FLOAT .)
    PYTHON_CODE     reduce using rule 132 (float -> FLOAT .)
    IF              reduce using rule 132 (float -> FLOAT .)
    #               reduce using rule 132 (float -> FLOAT .)
    !               reduce using rule 132 (float -> FLOAT .)
    STRING          reduce using rule 132 (float -> FLOAT .)
    FALSE           reduce using rule 132 (float -> FLOAT .)
    TRUE            reduce using rule 132 (float -> FLOAT .)
    FLOAT           reduce using rule 132 (float -> FLOAT .)
    INT             reduce using rule 132 (float -> FLOAT .)
    NULL            reduce using rule 132 (float -> FLOAT .)
    $end            reduce using rule 132 (float -> FLOAT .)


state 69

    (130) int -> INT .
    ^               reduce using rule 130 (int -> INT .)
    [               reduce using rule 130 (int -> INT .)
    COLON_COLON     reduce using rule 130 (int -> INT .)
    (               reduce using rule 130 (int -> INT .)
    >               reduce using rule 130 (int -> INT .)
    <               reduce using rule 130 (int -> INT .)
    &               reduce using rule 130 (int -> INT .)
    |               reduce using rule 130 (int -> INT .)
    EQ_GREATER      reduce using rule 130 (int -> INT .)
    EQ_LESS         reduce using rule 130 (int -> INT .)
    NOT_EQEQ        reduce using rule 130 (int -> INT .)
    EQEQ            reduce using rule 130 (int -> INT .)
    %               reduce using rule 130 (int -> INT .)
    *               reduce using rule 130 (int -> INT .)
    /               reduce using rule 130 (int -> INT .)
    -               reduce using rule 130 (int -> INT .)
    +               reduce using rule 130 (int -> INT .)
    :               reduce using rule 130 (int -> INT .)
    ,               reduce using rule 130 (int -> INT .)
    }               reduce using rule 130 (int -> INT .)
    ;               reduce using rule 130 (int -> INT .)
    IN              reduce using rule 130 (int -> INT .)
    )               reduce using rule 130 (int -> INT .)
    ]               reduce using rule 130 (int -> INT .)
    EQ_DIV          reduce using rule 130 (int -> INT .)
    EQ_MOD          reduce using rule 130 (int -> INT .)
    EQ_MUL          reduce using rule 130 (int -> INT .)
    EQ_SUB          reduce using rule 130 (int -> INT .)
    EQ_ADD          reduce using rule 130 (int -> INT .)
    =               reduce using rule 130 (int -> INT .)
    ?               reduce using rule 130 (int -> INT .)
    {               reduce using rule 130 (int -> INT .)
    SANDBOX         reduce using rule 130 (int -> INT .)
    LIMPORT         reduce using rule 130 (int -> INT .)
    .               reduce using rule 130 (int -> INT .)
    IMPORT          reduce using rule 130 (int -> INT .)
    ID              reduce using rule 130 (int -> INT .)
    RETURN          reduce using rule 130 (int -> INT .)
    DEL             reduce using rule 130 (int -> INT .)
    FOR             reduce using rule 130 (int -> INT .)
    DEBUG           reduce using rule 130 (int -> INT .)
    SKIP            reduce using rule 130 (int -> INT .)
    BREAK           reduce using rule 130 (int -> INT .)
    LET             reduce using rule 130 (int -> INT .)
    WHILE           reduce using rule 130 (int -> INT .)
    NAMESPACE       reduce using rule 130 (int -> INT .)
    CLASS           reduce using rule 130 (int -> INT .)
    FUNC            reduce using rule 130 (int -> INT .)
    INIT            reduce using rule 130 (int -> INT .)
    PYTHON_CODE_EXEC reduce using rule 130 (int -> INT .)
    PYTHON_CODE     reduce using rule 130 (int -> INT .)
    IF              reduce using rule 130 (int -> INT .)
    #               reduce using rule 130 (int -> INT .)
    !               reduce using rule 130 (int -> INT .)
    STRING          reduce using rule 130 (int -> INT .)
    FALSE           reduce using rule 130 (int -> INT .)
    TRUE            reduce using rule 130 (int -> INT .)
    FLOAT           reduce using rule 130 (int -> INT .)
    INT             reduce using rule 130 (int -> INT .)
    NULL            reduce using rule 130 (int -> INT .)
    $end            reduce using rule 130 (int -> INT .)


state 70

    (116) null -> NULL .
    ^               reduce using rule 116 (null -> NULL .)
    [               reduce using rule 116 (null -> NULL .)
    COLON_COLON     reduce using rule 116 (null -> NULL .)
    (               reduce using rule 116 (null -> NULL .)
    >               reduce using rule 116 (null -> NULL .)
    <               reduce using rule 116 (null -> NULL .)
    &               reduce using rule 116 (null -> NULL .)
    |               reduce using rule 116 (null -> NULL .)
    EQ_GREATER      reduce using rule 116 (null -> NULL .)
    EQ_LESS         reduce using rule 116 (null -> NULL .)
    NOT_EQEQ        reduce using rule 116 (null -> NULL .)
    EQEQ            reduce using rule 116 (null -> NULL .)
    %               reduce using rule 116 (null -> NULL .)
    *               reduce using rule 116 (null -> NULL .)
    /               reduce using rule 116 (null -> NULL .)
    -               reduce using rule 116 (null -> NULL .)
    +               reduce using rule 116 (null -> NULL .)
    :               reduce using rule 116 (null -> NULL .)
    ,               reduce using rule 116 (null -> NULL .)
    }               reduce using rule 116 (null -> NULL .)
    ;               reduce using rule 116 (null -> NULL .)
    IN              reduce using rule 116 (null -> NULL .)
    )               reduce using rule 116 (null -> NULL .)
    ]               reduce using rule 116 (null -> NULL .)
    EQ_DIV          reduce using rule 116 (null -> NULL .)
    EQ_MOD          reduce using rule 116 (null -> NULL .)
    EQ_MUL          reduce using rule 116 (null -> NULL .)
    EQ_SUB          reduce using rule 116 (null -> NULL .)
    EQ_ADD          reduce using rule 116 (null -> NULL .)
    =               reduce using rule 116 (null -> NULL .)
    ?               reduce using rule 116 (null -> NULL .)
    {               reduce using rule 116 (null -> NULL .)
    SANDBOX         reduce using rule 116 (null -> NULL .)
    LIMPORT         reduce using rule 116 (null -> NULL .)
    .               reduce using rule 116 (null -> NULL .)
    IMPORT          reduce using rule 116 (null -> NULL .)
    ID              reduce using rule 116 (null -> NULL .)
    RETURN          reduce using rule 116 (null -> NULL .)
    DEL             reduce using rule 116 (null -> NULL .)
    FOR             reduce using rule 116 (null -> NULL .)
    DEBUG           reduce using rule 116 (null -> NULL .)
    SKIP            reduce using rule 116 (null -> NULL .)
    BREAK           reduce using rule 116 (null -> NULL .)
    LET             reduce using rule 116 (null -> NULL .)
    WHILE           reduce using rule 116 (null -> NULL .)
    NAMESPACE       reduce using rule 116 (null -> NULL .)
    CLASS           reduce using rule 116 (null -> NULL .)
    FUNC            reduce using rule 116 (null -> NULL .)
    INIT            reduce using rule 116 (null -> NULL .)
    PYTHON_CODE_EXEC reduce using rule 116 (null -> NULL .)
    PYTHON_CODE     reduce using rule 116 (null -> NULL .)
    IF              reduce using rule 116 (null -> NULL .)
    #               reduce using rule 116 (null -> NULL .)
    !               reduce using rule 116 (null -> NULL .)
    STRING          reduce using rule 116 (null -> NULL .)
    FALSE           reduce using rule 116 (null -> NULL .)
    TRUE            reduce using rule 116 (null -> NULL .)
    FLOAT           reduce using rule 116 (null -> NULL .)
    INT             reduce using rule 116 (null -> NULL .)
    NULL            reduce using rule 116 (null -> NULL .)
    $end            reduce using rule 116 (null -> NULL .)


state 71

    (3) program -> program statement .
    SANDBOX         reduce using rule 3 (program -> program statement .)
    LIMPORT         reduce using rule 3 (program -> program statement .)
    .               reduce using rule 3 (program -> program statement .)
    IMPORT          reduce using rule 3 (program -> program statement .)
    ID              reduce using rule 3 (program -> program statement .)
    RETURN          reduce using rule 3 (program -> program statement .)
    DEL             reduce using rule 3 (program -> program statement .)
    FOR             reduce using rule 3 (program -> program statement .)
    DEBUG           reduce using rule 3 (program -> program statement .)
    SKIP            reduce using rule 3 (program -> program statement .)
    BREAK           reduce using rule 3 (program -> program statement .)
    LET             reduce using rule 3 (program -> program statement .)
    WHILE           reduce using rule 3 (program -> program statement .)
    NAMESPACE       reduce using rule 3 (program -> program statement .)
    CLASS           reduce using rule 3 (program -> program statement .)
    FUNC            reduce using rule 3 (program -> program statement .)
    INIT            reduce using rule 3 (program -> program statement .)
    PYTHON_CODE_EXEC reduce using rule 3 (program -> program statement .)
    PYTHON_CODE     reduce using rule 3 (program -> program statement .)
    IF              reduce using rule 3 (program -> program statement .)
    <               reduce using rule 3 (program -> program statement .)
    #               reduce using rule 3 (program -> program statement .)
    (               reduce using rule 3 (program -> program statement .)
    !               reduce using rule 3 (program -> program statement .)
    +               reduce using rule 3 (program -> program statement .)
    -               reduce using rule 3 (program -> program statement .)
    *               reduce using rule 3 (program -> program statement .)
    &               reduce using rule 3 (program -> program statement .)
    {               reduce using rule 3 (program -> program statement .)
    [               reduce using rule 3 (program -> program statement .)
    STRING          reduce using rule 3 (program -> program statement .)
    FALSE           reduce using rule 3 (program -> program statement .)
    TRUE            reduce using rule 3 (program -> program statement .)
    FLOAT           reduce using rule 3 (program -> program statement .)
    INT             reduce using rule 3 (program -> program statement .)
    NULL            reduce using rule 3 (program -> program statement .)
    $end            reduce using rule 3 (program -> program statement .)
    }               reduce using rule 3 (program -> program statement .)


state 72

    (19) sandbox -> SANDBOX { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    program                        shift and go to state 152
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 73

    (137) assoc_array -> { assoc_array_items . }
    (139) assoc_array_items -> assoc_array_items . , expression : expression
    }               shift and go to state 153
    ,               shift and go to state 154


state 74

    (119) _tuple -> { positional_args . , }
    (120) _tuple -> { positional_args . }
    (52) positional_args -> positional_args . , expression
    ,               shift and go to state 155
    }               shift and go to state 156


state 75

    (138) assoc_array_items -> expression . : expression
    (51) positional_args -> expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    :               shift and go to state 157
    ,               reduce using rule 51 (positional_args -> expression .)
    }               reduce using rule 51 (positional_args -> expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 76

    (86) expression -> class_attribute .
    :               reduce using rule 86 (expression -> class_attribute .)
    >               reduce using rule 86 (expression -> class_attribute .)
    <               reduce using rule 86 (expression -> class_attribute .)
    &               reduce using rule 86 (expression -> class_attribute .)
    |               reduce using rule 86 (expression -> class_attribute .)
    EQ_GREATER      reduce using rule 86 (expression -> class_attribute .)
    EQ_LESS         reduce using rule 86 (expression -> class_attribute .)
    NOT_EQEQ        reduce using rule 86 (expression -> class_attribute .)
    EQEQ            reduce using rule 86 (expression -> class_attribute .)
    %               reduce using rule 86 (expression -> class_attribute .)
    *               reduce using rule 86 (expression -> class_attribute .)
    /               reduce using rule 86 (expression -> class_attribute .)
    -               reduce using rule 86 (expression -> class_attribute .)
    +               reduce using rule 86 (expression -> class_attribute .)
    COLON_COLON     reduce using rule 86 (expression -> class_attribute .)
    ^               reduce using rule 86 (expression -> class_attribute .)
    [               reduce using rule 86 (expression -> class_attribute .)
    (               reduce using rule 86 (expression -> class_attribute .)
    ,               reduce using rule 86 (expression -> class_attribute .)
    }               reduce using rule 86 (expression -> class_attribute .)
    ;               reduce using rule 86 (expression -> class_attribute .)
    IN              reduce using rule 86 (expression -> class_attribute .)
    )               reduce using rule 86 (expression -> class_attribute .)
    ]               reduce using rule 86 (expression -> class_attribute .)
    EQ_DIV          reduce using rule 86 (expression -> class_attribute .)
    EQ_MOD          reduce using rule 86 (expression -> class_attribute .)
    EQ_MUL          reduce using rule 86 (expression -> class_attribute .)
    EQ_SUB          reduce using rule 86 (expression -> class_attribute .)
    EQ_ADD          reduce using rule 86 (expression -> class_attribute .)
    =               reduce using rule 86 (expression -> class_attribute .)
    ?               reduce using rule 86 (expression -> class_attribute .)
    {               reduce using rule 86 (expression -> class_attribute .)
    SANDBOX         reduce using rule 86 (expression -> class_attribute .)
    LIMPORT         reduce using rule 86 (expression -> class_attribute .)
    .               reduce using rule 86 (expression -> class_attribute .)
    IMPORT          reduce using rule 86 (expression -> class_attribute .)
    ID              reduce using rule 86 (expression -> class_attribute .)
    RETURN          reduce using rule 86 (expression -> class_attribute .)
    DEL             reduce using rule 86 (expression -> class_attribute .)
    FOR             reduce using rule 86 (expression -> class_attribute .)
    DEBUG           reduce using rule 86 (expression -> class_attribute .)
    SKIP            reduce using rule 86 (expression -> class_attribute .)
    BREAK           reduce using rule 86 (expression -> class_attribute .)
    LET             reduce using rule 86 (expression -> class_attribute .)
    WHILE           reduce using rule 86 (expression -> class_attribute .)
    NAMESPACE       reduce using rule 86 (expression -> class_attribute .)
    CLASS           reduce using rule 86 (expression -> class_attribute .)
    FUNC            reduce using rule 86 (expression -> class_attribute .)
    INIT            reduce using rule 86 (expression -> class_attribute .)
    PYTHON_CODE_EXEC reduce using rule 86 (expression -> class_attribute .)
    PYTHON_CODE     reduce using rule 86 (expression -> class_attribute .)
    IF              reduce using rule 86 (expression -> class_attribute .)
    #               reduce using rule 86 (expression -> class_attribute .)
    !               reduce using rule 86 (expression -> class_attribute .)
    STRING          reduce using rule 86 (expression -> class_attribute .)
    FALSE           reduce using rule 86 (expression -> class_attribute .)
    TRUE            reduce using rule 86 (expression -> class_attribute .)
    FLOAT           reduce using rule 86 (expression -> class_attribute .)
    INT             reduce using rule 86 (expression -> class_attribute .)
    NULL            reduce using rule 86 (expression -> class_attribute .)
    $end            reduce using rule 86 (expression -> class_attribute .)


state 77

    (93) expression -> get_index .
    :               reduce using rule 93 (expression -> get_index .)
    >               reduce using rule 93 (expression -> get_index .)
    <               reduce using rule 93 (expression -> get_index .)
    &               reduce using rule 93 (expression -> get_index .)
    |               reduce using rule 93 (expression -> get_index .)
    EQ_GREATER      reduce using rule 93 (expression -> get_index .)
    EQ_LESS         reduce using rule 93 (expression -> get_index .)
    NOT_EQEQ        reduce using rule 93 (expression -> get_index .)
    EQEQ            reduce using rule 93 (expression -> get_index .)
    %               reduce using rule 93 (expression -> get_index .)
    *               reduce using rule 93 (expression -> get_index .)
    /               reduce using rule 93 (expression -> get_index .)
    -               reduce using rule 93 (expression -> get_index .)
    +               reduce using rule 93 (expression -> get_index .)
    COLON_COLON     reduce using rule 93 (expression -> get_index .)
    ^               reduce using rule 93 (expression -> get_index .)
    [               reduce using rule 93 (expression -> get_index .)
    (               reduce using rule 93 (expression -> get_index .)
    ,               reduce using rule 93 (expression -> get_index .)
    }               reduce using rule 93 (expression -> get_index .)
    ;               reduce using rule 93 (expression -> get_index .)
    IN              reduce using rule 93 (expression -> get_index .)
    )               reduce using rule 93 (expression -> get_index .)
    ]               reduce using rule 93 (expression -> get_index .)
    EQ_DIV          reduce using rule 93 (expression -> get_index .)
    EQ_MOD          reduce using rule 93 (expression -> get_index .)
    EQ_MUL          reduce using rule 93 (expression -> get_index .)
    EQ_SUB          reduce using rule 93 (expression -> get_index .)
    EQ_ADD          reduce using rule 93 (expression -> get_index .)
    =               reduce using rule 93 (expression -> get_index .)
    ?               reduce using rule 93 (expression -> get_index .)
    {               reduce using rule 93 (expression -> get_index .)
    SANDBOX         reduce using rule 93 (expression -> get_index .)
    LIMPORT         reduce using rule 93 (expression -> get_index .)
    .               reduce using rule 93 (expression -> get_index .)
    IMPORT          reduce using rule 93 (expression -> get_index .)
    ID              reduce using rule 93 (expression -> get_index .)
    RETURN          reduce using rule 93 (expression -> get_index .)
    DEL             reduce using rule 93 (expression -> get_index .)
    FOR             reduce using rule 93 (expression -> get_index .)
    DEBUG           reduce using rule 93 (expression -> get_index .)
    SKIP            reduce using rule 93 (expression -> get_index .)
    BREAK           reduce using rule 93 (expression -> get_index .)
    LET             reduce using rule 93 (expression -> get_index .)
    WHILE           reduce using rule 93 (expression -> get_index .)
    NAMESPACE       reduce using rule 93 (expression -> get_index .)
    CLASS           reduce using rule 93 (expression -> get_index .)
    FUNC            reduce using rule 93 (expression -> get_index .)
    INIT            reduce using rule 93 (expression -> get_index .)
    PYTHON_CODE_EXEC reduce using rule 93 (expression -> get_index .)
    PYTHON_CODE     reduce using rule 93 (expression -> get_index .)
    IF              reduce using rule 93 (expression -> get_index .)
    #               reduce using rule 93 (expression -> get_index .)
    !               reduce using rule 93 (expression -> get_index .)
    STRING          reduce using rule 93 (expression -> get_index .)
    FALSE           reduce using rule 93 (expression -> get_index .)
    TRUE            reduce using rule 93 (expression -> get_index .)
    FLOAT           reduce using rule 93 (expression -> get_index .)
    INT             reduce using rule 93 (expression -> get_index .)
    NULL            reduce using rule 93 (expression -> get_index .)
    $end            reduce using rule 93 (expression -> get_index .)


state 78

    (94) expression -> function_call .
    :               reduce using rule 94 (expression -> function_call .)
    >               reduce using rule 94 (expression -> function_call .)
    <               reduce using rule 94 (expression -> function_call .)
    &               reduce using rule 94 (expression -> function_call .)
    |               reduce using rule 94 (expression -> function_call .)
    EQ_GREATER      reduce using rule 94 (expression -> function_call .)
    EQ_LESS         reduce using rule 94 (expression -> function_call .)
    NOT_EQEQ        reduce using rule 94 (expression -> function_call .)
    EQEQ            reduce using rule 94 (expression -> function_call .)
    %               reduce using rule 94 (expression -> function_call .)
    *               reduce using rule 94 (expression -> function_call .)
    /               reduce using rule 94 (expression -> function_call .)
    -               reduce using rule 94 (expression -> function_call .)
    +               reduce using rule 94 (expression -> function_call .)
    COLON_COLON     reduce using rule 94 (expression -> function_call .)
    ^               reduce using rule 94 (expression -> function_call .)
    [               reduce using rule 94 (expression -> function_call .)
    (               reduce using rule 94 (expression -> function_call .)
    ,               reduce using rule 94 (expression -> function_call .)
    }               reduce using rule 94 (expression -> function_call .)
    ;               reduce using rule 94 (expression -> function_call .)
    IN              reduce using rule 94 (expression -> function_call .)
    )               reduce using rule 94 (expression -> function_call .)
    ]               reduce using rule 94 (expression -> function_call .)
    EQ_DIV          reduce using rule 94 (expression -> function_call .)
    EQ_MOD          reduce using rule 94 (expression -> function_call .)
    EQ_MUL          reduce using rule 94 (expression -> function_call .)
    EQ_SUB          reduce using rule 94 (expression -> function_call .)
    EQ_ADD          reduce using rule 94 (expression -> function_call .)
    =               reduce using rule 94 (expression -> function_call .)
    ?               reduce using rule 94 (expression -> function_call .)
    {               reduce using rule 94 (expression -> function_call .)
    SANDBOX         reduce using rule 94 (expression -> function_call .)
    LIMPORT         reduce using rule 94 (expression -> function_call .)
    .               reduce using rule 94 (expression -> function_call .)
    IMPORT          reduce using rule 94 (expression -> function_call .)
    ID              reduce using rule 94 (expression -> function_call .)
    RETURN          reduce using rule 94 (expression -> function_call .)
    DEL             reduce using rule 94 (expression -> function_call .)
    FOR             reduce using rule 94 (expression -> function_call .)
    DEBUG           reduce using rule 94 (expression -> function_call .)
    SKIP            reduce using rule 94 (expression -> function_call .)
    BREAK           reduce using rule 94 (expression -> function_call .)
    LET             reduce using rule 94 (expression -> function_call .)
    WHILE           reduce using rule 94 (expression -> function_call .)
    NAMESPACE       reduce using rule 94 (expression -> function_call .)
    CLASS           reduce using rule 94 (expression -> function_call .)
    FUNC            reduce using rule 94 (expression -> function_call .)
    INIT            reduce using rule 94 (expression -> function_call .)
    PYTHON_CODE_EXEC reduce using rule 94 (expression -> function_call .)
    PYTHON_CODE     reduce using rule 94 (expression -> function_call .)
    IF              reduce using rule 94 (expression -> function_call .)
    #               reduce using rule 94 (expression -> function_call .)
    !               reduce using rule 94 (expression -> function_call .)
    STRING          reduce using rule 94 (expression -> function_call .)
    FALSE           reduce using rule 94 (expression -> function_call .)
    TRUE            reduce using rule 94 (expression -> function_call .)
    FLOAT           reduce using rule 94 (expression -> function_call .)
    INT             reduce using rule 94 (expression -> function_call .)
    NULL            reduce using rule 94 (expression -> function_call .)
    $end            reduce using rule 94 (expression -> function_call .)


state 79

    (95) expression -> python_code .
    :               reduce using rule 95 (expression -> python_code .)
    >               reduce using rule 95 (expression -> python_code .)
    <               reduce using rule 95 (expression -> python_code .)
    &               reduce using rule 95 (expression -> python_code .)
    |               reduce using rule 95 (expression -> python_code .)
    EQ_GREATER      reduce using rule 95 (expression -> python_code .)
    EQ_LESS         reduce using rule 95 (expression -> python_code .)
    NOT_EQEQ        reduce using rule 95 (expression -> python_code .)
    EQEQ            reduce using rule 95 (expression -> python_code .)
    %               reduce using rule 95 (expression -> python_code .)
    *               reduce using rule 95 (expression -> python_code .)
    /               reduce using rule 95 (expression -> python_code .)
    -               reduce using rule 95 (expression -> python_code .)
    +               reduce using rule 95 (expression -> python_code .)
    COLON_COLON     reduce using rule 95 (expression -> python_code .)
    ^               reduce using rule 95 (expression -> python_code .)
    [               reduce using rule 95 (expression -> python_code .)
    (               reduce using rule 95 (expression -> python_code .)
    ,               reduce using rule 95 (expression -> python_code .)
    }               reduce using rule 95 (expression -> python_code .)
    ;               reduce using rule 95 (expression -> python_code .)
    IN              reduce using rule 95 (expression -> python_code .)
    )               reduce using rule 95 (expression -> python_code .)
    ]               reduce using rule 95 (expression -> python_code .)
    EQ_DIV          reduce using rule 95 (expression -> python_code .)
    EQ_MOD          reduce using rule 95 (expression -> python_code .)
    EQ_MUL          reduce using rule 95 (expression -> python_code .)
    EQ_SUB          reduce using rule 95 (expression -> python_code .)
    EQ_ADD          reduce using rule 95 (expression -> python_code .)
    =               reduce using rule 95 (expression -> python_code .)
    ?               reduce using rule 95 (expression -> python_code .)
    {               reduce using rule 95 (expression -> python_code .)
    SANDBOX         reduce using rule 95 (expression -> python_code .)
    LIMPORT         reduce using rule 95 (expression -> python_code .)
    .               reduce using rule 95 (expression -> python_code .)
    IMPORT          reduce using rule 95 (expression -> python_code .)
    ID              reduce using rule 95 (expression -> python_code .)
    RETURN          reduce using rule 95 (expression -> python_code .)
    DEL             reduce using rule 95 (expression -> python_code .)
    FOR             reduce using rule 95 (expression -> python_code .)
    DEBUG           reduce using rule 95 (expression -> python_code .)
    SKIP            reduce using rule 95 (expression -> python_code .)
    BREAK           reduce using rule 95 (expression -> python_code .)
    LET             reduce using rule 95 (expression -> python_code .)
    WHILE           reduce using rule 95 (expression -> python_code .)
    NAMESPACE       reduce using rule 95 (expression -> python_code .)
    CLASS           reduce using rule 95 (expression -> python_code .)
    FUNC            reduce using rule 95 (expression -> python_code .)
    INIT            reduce using rule 95 (expression -> python_code .)
    PYTHON_CODE_EXEC reduce using rule 95 (expression -> python_code .)
    PYTHON_CODE     reduce using rule 95 (expression -> python_code .)
    IF              reduce using rule 95 (expression -> python_code .)
    #               reduce using rule 95 (expression -> python_code .)
    !               reduce using rule 95 (expression -> python_code .)
    STRING          reduce using rule 95 (expression -> python_code .)
    FALSE           reduce using rule 95 (expression -> python_code .)
    TRUE            reduce using rule 95 (expression -> python_code .)
    FLOAT           reduce using rule 95 (expression -> python_code .)
    INT             reduce using rule 95 (expression -> python_code .)
    NULL            reduce using rule 95 (expression -> python_code .)
    $end            reduce using rule 95 (expression -> python_code .)


state 80

    (115) expression -> ID . OF ID
    (136) id -> ID .
    (31) function_call -> ID . TARROW ID ( function_arguments )
    (32) function_call -> ID . TARROW ID
    OF              shift and go to state 115
    :               reduce using rule 136 (id -> ID .)
    >               reduce using rule 136 (id -> ID .)
    <               reduce using rule 136 (id -> ID .)
    &               reduce using rule 136 (id -> ID .)
    |               reduce using rule 136 (id -> ID .)
    EQ_GREATER      reduce using rule 136 (id -> ID .)
    EQ_LESS         reduce using rule 136 (id -> ID .)
    NOT_EQEQ        reduce using rule 136 (id -> ID .)
    EQEQ            reduce using rule 136 (id -> ID .)
    %               reduce using rule 136 (id -> ID .)
    *               reduce using rule 136 (id -> ID .)
    /               reduce using rule 136 (id -> ID .)
    -               reduce using rule 136 (id -> ID .)
    +               reduce using rule 136 (id -> ID .)
    COLON_COLON     reduce using rule 136 (id -> ID .)
    ^               reduce using rule 136 (id -> ID .)
    [               reduce using rule 136 (id -> ID .)
    (               reduce using rule 136 (id -> ID .)
    ,               reduce using rule 136 (id -> ID .)
    }               reduce using rule 136 (id -> ID .)
    ;               reduce using rule 136 (id -> ID .)
    IN              reduce using rule 136 (id -> ID .)
    )               reduce using rule 136 (id -> ID .)
    ]               reduce using rule 136 (id -> ID .)
    EQ_DIV          reduce using rule 136 (id -> ID .)
    EQ_MOD          reduce using rule 136 (id -> ID .)
    EQ_MUL          reduce using rule 136 (id -> ID .)
    EQ_SUB          reduce using rule 136 (id -> ID .)
    EQ_ADD          reduce using rule 136 (id -> ID .)
    =               reduce using rule 136 (id -> ID .)
    ?               reduce using rule 136 (id -> ID .)
    {               reduce using rule 136 (id -> ID .)
    SANDBOX         reduce using rule 136 (id -> ID .)
    LIMPORT         reduce using rule 136 (id -> ID .)
    .               reduce using rule 136 (id -> ID .)
    IMPORT          reduce using rule 136 (id -> ID .)
    ID              reduce using rule 136 (id -> ID .)
    RETURN          reduce using rule 136 (id -> ID .)
    DEL             reduce using rule 136 (id -> ID .)
    FOR             reduce using rule 136 (id -> ID .)
    DEBUG           reduce using rule 136 (id -> ID .)
    SKIP            reduce using rule 136 (id -> ID .)
    BREAK           reduce using rule 136 (id -> ID .)
    LET             reduce using rule 136 (id -> ID .)
    WHILE           reduce using rule 136 (id -> ID .)
    NAMESPACE       reduce using rule 136 (id -> ID .)
    CLASS           reduce using rule 136 (id -> ID .)
    FUNC            reduce using rule 136 (id -> ID .)
    INIT            reduce using rule 136 (id -> ID .)
    PYTHON_CODE_EXEC reduce using rule 136 (id -> ID .)
    PYTHON_CODE     reduce using rule 136 (id -> ID .)
    IF              reduce using rule 136 (id -> ID .)
    #               reduce using rule 136 (id -> ID .)
    !               reduce using rule 136 (id -> ID .)
    STRING          reduce using rule 136 (id -> ID .)
    FALSE           reduce using rule 136 (id -> ID .)
    TRUE            reduce using rule 136 (id -> ID .)
    FLOAT           reduce using rule 136 (id -> ID .)
    INT             reduce using rule 136 (id -> ID .)
    NULL            reduce using rule 136 (id -> ID .)
    $end            reduce using rule 136 (id -> ID .)
    TARROW          shift and go to state 114


state 81

    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    ENV             shift and go to state 102


state 82

    (20) sandbox -> LIMPORT expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 158
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 83

    (117) get_index -> expression ^ . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 159
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 84

    (118) get_index -> expression [ . expression ]
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 160
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 85

    (135) class_attribute -> expression COLON_COLON . ID
    ID              shift and go to state 161


state 86

    (29) function_call -> expression ( . empty ) FARROW { program }
    (35) function_call -> expression ( . empty )
    (36) function_call -> expression ( . function_arguments ) FARROW { program }
    (37) function_call -> expression ( . function_arguments )
    (142) empty -> .
    (44) function_arguments -> . kwargs
    (45) function_arguments -> . positional_args , kwargs
    (46) function_arguments -> . positional_args
    (53) kwargs -> . ID = expression
    (54) kwargs -> . kwargs , id = expression
    (51) positional_args -> . expression
    (52) positional_args -> . positional_args , expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    )               reduce using rule 142 (empty -> .)
    ID              shift and go to state 166
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 142
    empty                          shift and go to state 162
    function_arguments             shift and go to state 163
    kwargs                         shift and go to state 164
    positional_args                shift and go to state 165
    id                             shift and go to state 54
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 87

    (97) expression -> expression > . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 167
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 88

    (98) expression -> expression < . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 168
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 89

    (100) expression -> expression & . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 169
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 90

    (101) expression -> expression | . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 170
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 91

    (102) expression -> expression EQ_GREATER . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 171
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 92

    (103) expression -> expression EQ_LESS . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 172
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 93

    (104) expression -> expression NOT_EQEQ . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 173
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 94

    (105) expression -> expression EQEQ . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 174
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 95

    (106) expression -> expression % . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 175
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 96

    (107) expression -> expression * . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 176
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 97

    (108) expression -> expression / . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 177
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 98

    (109) expression -> expression - . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 178
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 99

    (110) expression -> expression + . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 179
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 100

    (79) import_statement -> . SELFISH . ;
    ;               shift and go to state 180


state 101

    (80) import_statement -> . GLOBAL . ;
    ;               shift and go to state 181


state 102

    (27) function_call -> . ENV . FROM ID { program }
    (28) function_call -> . ENV . { program }
    FROM            shift and go to state 182
    {               shift and go to state 183


state 103

    (81) import_statement -> IMPORT expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 184
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 104

    (58) variable_operation -> get_index EQ_DIV . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    get_index                      shift and go to state 77
    expression                     shift and go to state 185
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 105

    (60) variable_operation -> get_index EQ_MOD . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    get_index                      shift and go to state 77
    expression                     shift and go to state 186
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 106

    (62) variable_operation -> get_index EQ_MUL . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    get_index                      shift and go to state 77
    expression                     shift and go to state 187
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 107

    (64) variable_operation -> get_index EQ_SUB . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    get_index                      shift and go to state 77
    expression                     shift and go to state 188
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 108

    (66) variable_operation -> get_index EQ_ADD . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    get_index                      shift and go to state 77
    expression                     shift and go to state 189
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 109

    (59) variable_operation -> ID EQ_DIV . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 190
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 110

    (61) variable_operation -> ID EQ_MOD . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 191
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 111

    (63) variable_operation -> ID EQ_MUL . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 192
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 112

    (65) variable_operation -> ID EQ_SUB . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 193
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 113

    (67) variable_operation -> ID EQ_ADD . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 194
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 114

    (31) function_call -> ID TARROW . ID ( function_arguments )
    (32) function_call -> ID TARROW . ID
    ID              shift and go to state 195


state 115

    (115) expression -> ID OF . ID
    ID              shift and go to state 196


state 116

    (26) return_statement -> RETURN expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 197
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 117

    (78) delete_statement -> DEL ID . ;
    ;               shift and go to state 198


state 118

    (49) for_loop -> FOR expression . IN expression { program }
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    IN              shift and go to state 199
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 119

    (23) break_statement -> DEBUG ; .
    SANDBOX         reduce using rule 23 (break_statement -> DEBUG ; .)
    LIMPORT         reduce using rule 23 (break_statement -> DEBUG ; .)
    .               reduce using rule 23 (break_statement -> DEBUG ; .)
    IMPORT          reduce using rule 23 (break_statement -> DEBUG ; .)
    ID              reduce using rule 23 (break_statement -> DEBUG ; .)
    RETURN          reduce using rule 23 (break_statement -> DEBUG ; .)
    DEL             reduce using rule 23 (break_statement -> DEBUG ; .)
    FOR             reduce using rule 23 (break_statement -> DEBUG ; .)
    DEBUG           reduce using rule 23 (break_statement -> DEBUG ; .)
    SKIP            reduce using rule 23 (break_statement -> DEBUG ; .)
    BREAK           reduce using rule 23 (break_statement -> DEBUG ; .)
    LET             reduce using rule 23 (break_statement -> DEBUG ; .)
    WHILE           reduce using rule 23 (break_statement -> DEBUG ; .)
    NAMESPACE       reduce using rule 23 (break_statement -> DEBUG ; .)
    CLASS           reduce using rule 23 (break_statement -> DEBUG ; .)
    FUNC            reduce using rule 23 (break_statement -> DEBUG ; .)
    INIT            reduce using rule 23 (break_statement -> DEBUG ; .)
    PYTHON_CODE_EXEC reduce using rule 23 (break_statement -> DEBUG ; .)
    PYTHON_CODE     reduce using rule 23 (break_statement -> DEBUG ; .)
    IF              reduce using rule 23 (break_statement -> DEBUG ; .)
    <               reduce using rule 23 (break_statement -> DEBUG ; .)
    #               reduce using rule 23 (break_statement -> DEBUG ; .)
    (               reduce using rule 23 (break_statement -> DEBUG ; .)
    !               reduce using rule 23 (break_statement -> DEBUG ; .)
    +               reduce using rule 23 (break_statement -> DEBUG ; .)
    -               reduce using rule 23 (break_statement -> DEBUG ; .)
    *               reduce using rule 23 (break_statement -> DEBUG ; .)
    &               reduce using rule 23 (break_statement -> DEBUG ; .)
    {               reduce using rule 23 (break_statement -> DEBUG ; .)
    [               reduce using rule 23 (break_statement -> DEBUG ; .)
    STRING          reduce using rule 23 (break_statement -> DEBUG ; .)
    FALSE           reduce using rule 23 (break_statement -> DEBUG ; .)
    TRUE            reduce using rule 23 (break_statement -> DEBUG ; .)
    FLOAT           reduce using rule 23 (break_statement -> DEBUG ; .)
    INT             reduce using rule 23 (break_statement -> DEBUG ; .)
    NULL            reduce using rule 23 (break_statement -> DEBUG ; .)
    $end            reduce using rule 23 (break_statement -> DEBUG ; .)
    }               reduce using rule 23 (break_statement -> DEBUG ; .)


state 120

    (24) break_statement -> SKIP ; .
    SANDBOX         reduce using rule 24 (break_statement -> SKIP ; .)
    LIMPORT         reduce using rule 24 (break_statement -> SKIP ; .)
    .               reduce using rule 24 (break_statement -> SKIP ; .)
    IMPORT          reduce using rule 24 (break_statement -> SKIP ; .)
    ID              reduce using rule 24 (break_statement -> SKIP ; .)
    RETURN          reduce using rule 24 (break_statement -> SKIP ; .)
    DEL             reduce using rule 24 (break_statement -> SKIP ; .)
    FOR             reduce using rule 24 (break_statement -> SKIP ; .)
    DEBUG           reduce using rule 24 (break_statement -> SKIP ; .)
    SKIP            reduce using rule 24 (break_statement -> SKIP ; .)
    BREAK           reduce using rule 24 (break_statement -> SKIP ; .)
    LET             reduce using rule 24 (break_statement -> SKIP ; .)
    WHILE           reduce using rule 24 (break_statement -> SKIP ; .)
    NAMESPACE       reduce using rule 24 (break_statement -> SKIP ; .)
    CLASS           reduce using rule 24 (break_statement -> SKIP ; .)
    FUNC            reduce using rule 24 (break_statement -> SKIP ; .)
    INIT            reduce using rule 24 (break_statement -> SKIP ; .)
    PYTHON_CODE_EXEC reduce using rule 24 (break_statement -> SKIP ; .)
    PYTHON_CODE     reduce using rule 24 (break_statement -> SKIP ; .)
    IF              reduce using rule 24 (break_statement -> SKIP ; .)
    <               reduce using rule 24 (break_statement -> SKIP ; .)
    #               reduce using rule 24 (break_statement -> SKIP ; .)
    (               reduce using rule 24 (break_statement -> SKIP ; .)
    !               reduce using rule 24 (break_statement -> SKIP ; .)
    +               reduce using rule 24 (break_statement -> SKIP ; .)
    -               reduce using rule 24 (break_statement -> SKIP ; .)
    *               reduce using rule 24 (break_statement -> SKIP ; .)
    &               reduce using rule 24 (break_statement -> SKIP ; .)
    {               reduce using rule 24 (break_statement -> SKIP ; .)
    [               reduce using rule 24 (break_statement -> SKIP ; .)
    STRING          reduce using rule 24 (break_statement -> SKIP ; .)
    FALSE           reduce using rule 24 (break_statement -> SKIP ; .)
    TRUE            reduce using rule 24 (break_statement -> SKIP ; .)
    FLOAT           reduce using rule 24 (break_statement -> SKIP ; .)
    INT             reduce using rule 24 (break_statement -> SKIP ; .)
    NULL            reduce using rule 24 (break_statement -> SKIP ; .)
    $end            reduce using rule 24 (break_statement -> SKIP ; .)
    }               reduce using rule 24 (break_statement -> SKIP ; .)


state 121

    (25) break_statement -> BREAK ; .
    SANDBOX         reduce using rule 25 (break_statement -> BREAK ; .)
    LIMPORT         reduce using rule 25 (break_statement -> BREAK ; .)
    .               reduce using rule 25 (break_statement -> BREAK ; .)
    IMPORT          reduce using rule 25 (break_statement -> BREAK ; .)
    ID              reduce using rule 25 (break_statement -> BREAK ; .)
    RETURN          reduce using rule 25 (break_statement -> BREAK ; .)
    DEL             reduce using rule 25 (break_statement -> BREAK ; .)
    FOR             reduce using rule 25 (break_statement -> BREAK ; .)
    DEBUG           reduce using rule 25 (break_statement -> BREAK ; .)
    SKIP            reduce using rule 25 (break_statement -> BREAK ; .)
    BREAK           reduce using rule 25 (break_statement -> BREAK ; .)
    LET             reduce using rule 25 (break_statement -> BREAK ; .)
    WHILE           reduce using rule 25 (break_statement -> BREAK ; .)
    NAMESPACE       reduce using rule 25 (break_statement -> BREAK ; .)
    CLASS           reduce using rule 25 (break_statement -> BREAK ; .)
    FUNC            reduce using rule 25 (break_statement -> BREAK ; .)
    INIT            reduce using rule 25 (break_statement -> BREAK ; .)
    PYTHON_CODE_EXEC reduce using rule 25 (break_statement -> BREAK ; .)
    PYTHON_CODE     reduce using rule 25 (break_statement -> BREAK ; .)
    IF              reduce using rule 25 (break_statement -> BREAK ; .)
    <               reduce using rule 25 (break_statement -> BREAK ; .)
    #               reduce using rule 25 (break_statement -> BREAK ; .)
    (               reduce using rule 25 (break_statement -> BREAK ; .)
    !               reduce using rule 25 (break_statement -> BREAK ; .)
    +               reduce using rule 25 (break_statement -> BREAK ; .)
    -               reduce using rule 25 (break_statement -> BREAK ; .)
    *               reduce using rule 25 (break_statement -> BREAK ; .)
    &               reduce using rule 25 (break_statement -> BREAK ; .)
    {               reduce using rule 25 (break_statement -> BREAK ; .)
    [               reduce using rule 25 (break_statement -> BREAK ; .)
    STRING          reduce using rule 25 (break_statement -> BREAK ; .)
    FALSE           reduce using rule 25 (break_statement -> BREAK ; .)
    TRUE            reduce using rule 25 (break_statement -> BREAK ; .)
    FLOAT           reduce using rule 25 (break_statement -> BREAK ; .)
    INT             reduce using rule 25 (break_statement -> BREAK ; .)
    NULL            reduce using rule 25 (break_statement -> BREAK ; .)
    $end            reduce using rule 25 (break_statement -> BREAK ; .)
    }               reduce using rule 25 (break_statement -> BREAK ; .)


state 122

    (55) variable_assignment -> LET get_index . = expression ;
    (93) expression -> get_index .
    =               shift and go to state 200
    ^               reduce using rule 93 (expression -> get_index .)
    [               reduce using rule 93 (expression -> get_index .)
    >               reduce using rule 93 (expression -> get_index .)
    <               reduce using rule 93 (expression -> get_index .)
    &               reduce using rule 93 (expression -> get_index .)
    |               reduce using rule 93 (expression -> get_index .)
    EQ_GREATER      reduce using rule 93 (expression -> get_index .)
    EQ_LESS         reduce using rule 93 (expression -> get_index .)
    NOT_EQEQ        reduce using rule 93 (expression -> get_index .)
    EQEQ            reduce using rule 93 (expression -> get_index .)
    %               reduce using rule 93 (expression -> get_index .)
    *               reduce using rule 93 (expression -> get_index .)
    /               reduce using rule 93 (expression -> get_index .)
    -               reduce using rule 93 (expression -> get_index .)
    +               reduce using rule 93 (expression -> get_index .)
    COLON_COLON     reduce using rule 93 (expression -> get_index .)
    (               reduce using rule 93 (expression -> get_index .)


state 123

    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               shift and go to state 83
    [               shift and go to state 84
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    (               shift and go to state 86


state 124

    (56) variable_assignment -> LET ID . : ID = expression ;
    (57) variable_assignment -> LET ID . = expression ;
    (115) expression -> ID . OF ID
    (136) id -> ID .
    (31) function_call -> ID . TARROW ID ( function_arguments )
    (32) function_call -> ID . TARROW ID
    :               shift and go to state 201
    =               shift and go to state 202
    OF              shift and go to state 115
    ^               reduce using rule 136 (id -> ID .)
    [               reduce using rule 136 (id -> ID .)
    >               reduce using rule 136 (id -> ID .)
    <               reduce using rule 136 (id -> ID .)
    &               reduce using rule 136 (id -> ID .)
    |               reduce using rule 136 (id -> ID .)
    EQ_GREATER      reduce using rule 136 (id -> ID .)
    EQ_LESS         reduce using rule 136 (id -> ID .)
    NOT_EQEQ        reduce using rule 136 (id -> ID .)
    EQEQ            reduce using rule 136 (id -> ID .)
    %               reduce using rule 136 (id -> ID .)
    *               reduce using rule 136 (id -> ID .)
    /               reduce using rule 136 (id -> ID .)
    -               reduce using rule 136 (id -> ID .)
    +               reduce using rule 136 (id -> ID .)
    COLON_COLON     reduce using rule 136 (id -> ID .)
    (               reduce using rule 136 (id -> ID .)
    TARROW          shift and go to state 114


state 125

    (22) python_code_statement -> python_code ; .
    SANDBOX         reduce using rule 22 (python_code_statement -> python_code ; .)
    LIMPORT         reduce using rule 22 (python_code_statement -> python_code ; .)
    .               reduce using rule 22 (python_code_statement -> python_code ; .)
    IMPORT          reduce using rule 22 (python_code_statement -> python_code ; .)
    ID              reduce using rule 22 (python_code_statement -> python_code ; .)
    RETURN          reduce using rule 22 (python_code_statement -> python_code ; .)
    DEL             reduce using rule 22 (python_code_statement -> python_code ; .)
    FOR             reduce using rule 22 (python_code_statement -> python_code ; .)
    DEBUG           reduce using rule 22 (python_code_statement -> python_code ; .)
    SKIP            reduce using rule 22 (python_code_statement -> python_code ; .)
    BREAK           reduce using rule 22 (python_code_statement -> python_code ; .)
    LET             reduce using rule 22 (python_code_statement -> python_code ; .)
    WHILE           reduce using rule 22 (python_code_statement -> python_code ; .)
    NAMESPACE       reduce using rule 22 (python_code_statement -> python_code ; .)
    CLASS           reduce using rule 22 (python_code_statement -> python_code ; .)
    FUNC            reduce using rule 22 (python_code_statement -> python_code ; .)
    INIT            reduce using rule 22 (python_code_statement -> python_code ; .)
    PYTHON_CODE_EXEC reduce using rule 22 (python_code_statement -> python_code ; .)
    PYTHON_CODE     reduce using rule 22 (python_code_statement -> python_code ; .)
    IF              reduce using rule 22 (python_code_statement -> python_code ; .)
    <               reduce using rule 22 (python_code_statement -> python_code ; .)
    #               reduce using rule 22 (python_code_statement -> python_code ; .)
    (               reduce using rule 22 (python_code_statement -> python_code ; .)
    !               reduce using rule 22 (python_code_statement -> python_code ; .)
    +               reduce using rule 22 (python_code_statement -> python_code ; .)
    -               reduce using rule 22 (python_code_statement -> python_code ; .)
    *               reduce using rule 22 (python_code_statement -> python_code ; .)
    &               reduce using rule 22 (python_code_statement -> python_code ; .)
    {               reduce using rule 22 (python_code_statement -> python_code ; .)
    [               reduce using rule 22 (python_code_statement -> python_code ; .)
    STRING          reduce using rule 22 (python_code_statement -> python_code ; .)
    FALSE           reduce using rule 22 (python_code_statement -> python_code ; .)
    TRUE            reduce using rule 22 (python_code_statement -> python_code ; .)
    FLOAT           reduce using rule 22 (python_code_statement -> python_code ; .)
    INT             reduce using rule 22 (python_code_statement -> python_code ; .)
    NULL            reduce using rule 22 (python_code_statement -> python_code ; .)
    $end            reduce using rule 22 (python_code_statement -> python_code ; .)
    }               reduce using rule 22 (python_code_statement -> python_code ; .)


state 126

    (50) while_loop -> WHILE ( . expression ) { program }
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 203
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 127

    (96) expression -> ( expression . )
    (125) _numpy -> ( expression . , )
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (128) items -> expression . , expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    )               shift and go to state 204
    ,               shift and go to state 205
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 128

    (124) _numpy -> ( ) .
    ^               reduce using rule 124 (_numpy -> ( ) .)
    [               reduce using rule 124 (_numpy -> ( ) .)
    COLON_COLON     reduce using rule 124 (_numpy -> ( ) .)
    (               reduce using rule 124 (_numpy -> ( ) .)
    >               reduce using rule 124 (_numpy -> ( ) .)
    <               reduce using rule 124 (_numpy -> ( ) .)
    &               reduce using rule 124 (_numpy -> ( ) .)
    |               reduce using rule 124 (_numpy -> ( ) .)
    EQ_GREATER      reduce using rule 124 (_numpy -> ( ) .)
    EQ_LESS         reduce using rule 124 (_numpy -> ( ) .)
    NOT_EQEQ        reduce using rule 124 (_numpy -> ( ) .)
    EQEQ            reduce using rule 124 (_numpy -> ( ) .)
    %               reduce using rule 124 (_numpy -> ( ) .)
    *               reduce using rule 124 (_numpy -> ( ) .)
    /               reduce using rule 124 (_numpy -> ( ) .)
    -               reduce using rule 124 (_numpy -> ( ) .)
    +               reduce using rule 124 (_numpy -> ( ) .)
    :               reduce using rule 124 (_numpy -> ( ) .)
    ,               reduce using rule 124 (_numpy -> ( ) .)
    }               reduce using rule 124 (_numpy -> ( ) .)
    ;               reduce using rule 124 (_numpy -> ( ) .)
    IN              reduce using rule 124 (_numpy -> ( ) .)
    )               reduce using rule 124 (_numpy -> ( ) .)
    ]               reduce using rule 124 (_numpy -> ( ) .)
    EQ_DIV          reduce using rule 124 (_numpy -> ( ) .)
    EQ_MOD          reduce using rule 124 (_numpy -> ( ) .)
    EQ_MUL          reduce using rule 124 (_numpy -> ( ) .)
    EQ_SUB          reduce using rule 124 (_numpy -> ( ) .)
    EQ_ADD          reduce using rule 124 (_numpy -> ( ) .)
    =               reduce using rule 124 (_numpy -> ( ) .)
    ?               reduce using rule 124 (_numpy -> ( ) .)
    {               reduce using rule 124 (_numpy -> ( ) .)
    SANDBOX         reduce using rule 124 (_numpy -> ( ) .)
    LIMPORT         reduce using rule 124 (_numpy -> ( ) .)
    .               reduce using rule 124 (_numpy -> ( ) .)
    IMPORT          reduce using rule 124 (_numpy -> ( ) .)
    ID              reduce using rule 124 (_numpy -> ( ) .)
    RETURN          reduce using rule 124 (_numpy -> ( ) .)
    DEL             reduce using rule 124 (_numpy -> ( ) .)
    FOR             reduce using rule 124 (_numpy -> ( ) .)
    DEBUG           reduce using rule 124 (_numpy -> ( ) .)
    SKIP            reduce using rule 124 (_numpy -> ( ) .)
    BREAK           reduce using rule 124 (_numpy -> ( ) .)
    LET             reduce using rule 124 (_numpy -> ( ) .)
    WHILE           reduce using rule 124 (_numpy -> ( ) .)
    NAMESPACE       reduce using rule 124 (_numpy -> ( ) .)
    CLASS           reduce using rule 124 (_numpy -> ( ) .)
    FUNC            reduce using rule 124 (_numpy -> ( ) .)
    INIT            reduce using rule 124 (_numpy -> ( ) .)
    PYTHON_CODE_EXEC reduce using rule 124 (_numpy -> ( ) .)
    PYTHON_CODE     reduce using rule 124 (_numpy -> ( ) .)
    IF              reduce using rule 124 (_numpy -> ( ) .)
    #               reduce using rule 124 (_numpy -> ( ) .)
    !               reduce using rule 124 (_numpy -> ( ) .)
    STRING          reduce using rule 124 (_numpy -> ( ) .)
    FALSE           reduce using rule 124 (_numpy -> ( ) .)
    TRUE            reduce using rule 124 (_numpy -> ( ) .)
    FLOAT           reduce using rule 124 (_numpy -> ( ) .)
    INT             reduce using rule 124 (_numpy -> ( ) .)
    NULL            reduce using rule 124 (_numpy -> ( ) .)
    $end            reduce using rule 124 (_numpy -> ( ) .)


state 129

    (123) _numpy -> ( , . )
    )               shift and go to state 206


state 130

    (126) _numpy -> ( items . , )
    (127) _numpy -> ( items . )
    (129) items -> items . , expression
    ,               shift and go to state 207
    )               shift and go to state 208


state 131

    (69) conditional -> if_statement else_statement .
    SANDBOX         reduce using rule 69 (conditional -> if_statement else_statement .)
    LIMPORT         reduce using rule 69 (conditional -> if_statement else_statement .)
    .               reduce using rule 69 (conditional -> if_statement else_statement .)
    IMPORT          reduce using rule 69 (conditional -> if_statement else_statement .)
    ID              reduce using rule 69 (conditional -> if_statement else_statement .)
    RETURN          reduce using rule 69 (conditional -> if_statement else_statement .)
    DEL             reduce using rule 69 (conditional -> if_statement else_statement .)
    FOR             reduce using rule 69 (conditional -> if_statement else_statement .)
    DEBUG           reduce using rule 69 (conditional -> if_statement else_statement .)
    SKIP            reduce using rule 69 (conditional -> if_statement else_statement .)
    BREAK           reduce using rule 69 (conditional -> if_statement else_statement .)
    LET             reduce using rule 69 (conditional -> if_statement else_statement .)
    WHILE           reduce using rule 69 (conditional -> if_statement else_statement .)
    NAMESPACE       reduce using rule 69 (conditional -> if_statement else_statement .)
    CLASS           reduce using rule 69 (conditional -> if_statement else_statement .)
    FUNC            reduce using rule 69 (conditional -> if_statement else_statement .)
    INIT            reduce using rule 69 (conditional -> if_statement else_statement .)
    PYTHON_CODE_EXEC reduce using rule 69 (conditional -> if_statement else_statement .)
    PYTHON_CODE     reduce using rule 69 (conditional -> if_statement else_statement .)
    IF              reduce using rule 69 (conditional -> if_statement else_statement .)
    <               reduce using rule 69 (conditional -> if_statement else_statement .)
    #               reduce using rule 69 (conditional -> if_statement else_statement .)
    (               reduce using rule 69 (conditional -> if_statement else_statement .)
    !               reduce using rule 69 (conditional -> if_statement else_statement .)
    +               reduce using rule 69 (conditional -> if_statement else_statement .)
    -               reduce using rule 69 (conditional -> if_statement else_statement .)
    *               reduce using rule 69 (conditional -> if_statement else_statement .)
    &               reduce using rule 69 (conditional -> if_statement else_statement .)
    {               reduce using rule 69 (conditional -> if_statement else_statement .)
    [               reduce using rule 69 (conditional -> if_statement else_statement .)
    STRING          reduce using rule 69 (conditional -> if_statement else_statement .)
    FALSE           reduce using rule 69 (conditional -> if_statement else_statement .)
    TRUE            reduce using rule 69 (conditional -> if_statement else_statement .)
    FLOAT           reduce using rule 69 (conditional -> if_statement else_statement .)
    INT             reduce using rule 69 (conditional -> if_statement else_statement .)
    NULL            reduce using rule 69 (conditional -> if_statement else_statement .)
    $end            reduce using rule 69 (conditional -> if_statement else_statement .)
    }               reduce using rule 69 (conditional -> if_statement else_statement .)


state 132

    (70) conditional -> if_statement else_if_loop . else_statement
    (71) conditional -> if_statement else_if_loop .
    (75) else_if_loop -> else_if_loop . else_if_statement
    (77) else_statement -> . ELSE { program }
    (76) else_if_statement -> . ELSE IF ( expression ) { program }
    SANDBOX         reduce using rule 71 (conditional -> if_statement else_if_loop .)
    LIMPORT         reduce using rule 71 (conditional -> if_statement else_if_loop .)
    .               reduce using rule 71 (conditional -> if_statement else_if_loop .)
    IMPORT          reduce using rule 71 (conditional -> if_statement else_if_loop .)
    ID              reduce using rule 71 (conditional -> if_statement else_if_loop .)
    RETURN          reduce using rule 71 (conditional -> if_statement else_if_loop .)
    DEL             reduce using rule 71 (conditional -> if_statement else_if_loop .)
    FOR             reduce using rule 71 (conditional -> if_statement else_if_loop .)
    DEBUG           reduce using rule 71 (conditional -> if_statement else_if_loop .)
    SKIP            reduce using rule 71 (conditional -> if_statement else_if_loop .)
    BREAK           reduce using rule 71 (conditional -> if_statement else_if_loop .)
    LET             reduce using rule 71 (conditional -> if_statement else_if_loop .)
    WHILE           reduce using rule 71 (conditional -> if_statement else_if_loop .)
    NAMESPACE       reduce using rule 71 (conditional -> if_statement else_if_loop .)
    CLASS           reduce using rule 71 (conditional -> if_statement else_if_loop .)
    FUNC            reduce using rule 71 (conditional -> if_statement else_if_loop .)
    INIT            reduce using rule 71 (conditional -> if_statement else_if_loop .)
    PYTHON_CODE_EXEC reduce using rule 71 (conditional -> if_statement else_if_loop .)
    PYTHON_CODE     reduce using rule 71 (conditional -> if_statement else_if_loop .)
    IF              reduce using rule 71 (conditional -> if_statement else_if_loop .)
    <               reduce using rule 71 (conditional -> if_statement else_if_loop .)
    #               reduce using rule 71 (conditional -> if_statement else_if_loop .)
    (               reduce using rule 71 (conditional -> if_statement else_if_loop .)
    !               reduce using rule 71 (conditional -> if_statement else_if_loop .)
    +               reduce using rule 71 (conditional -> if_statement else_if_loop .)
    -               reduce using rule 71 (conditional -> if_statement else_if_loop .)
    *               reduce using rule 71 (conditional -> if_statement else_if_loop .)
    &               reduce using rule 71 (conditional -> if_statement else_if_loop .)
    {               reduce using rule 71 (conditional -> if_statement else_if_loop .)
    [               reduce using rule 71 (conditional -> if_statement else_if_loop .)
    STRING          reduce using rule 71 (conditional -> if_statement else_if_loop .)
    FALSE           reduce using rule 71 (conditional -> if_statement else_if_loop .)
    TRUE            reduce using rule 71 (conditional -> if_statement else_if_loop .)
    FLOAT           reduce using rule 71 (conditional -> if_statement else_if_loop .)
    INT             reduce using rule 71 (conditional -> if_statement else_if_loop .)
    NULL            reduce using rule 71 (conditional -> if_statement else_if_loop .)
    $end            reduce using rule 71 (conditional -> if_statement else_if_loop .)
    }               reduce using rule 71 (conditional -> if_statement else_if_loop .)
    ELSE            shift and go to state 133

    else_statement                 shift and go to state 209
    else_if_statement              shift and go to state 210

state 133

    (77) else_statement -> ELSE . { program }
    (76) else_if_statement -> ELSE . IF ( expression ) { program }
    {               shift and go to state 211
    IF              shift and go to state 212


state 134

    (74) else_if_loop -> else_if_statement .
    ELSE            reduce using rule 74 (else_if_loop -> else_if_statement .)
    SANDBOX         reduce using rule 74 (else_if_loop -> else_if_statement .)
    LIMPORT         reduce using rule 74 (else_if_loop -> else_if_statement .)
    .               reduce using rule 74 (else_if_loop -> else_if_statement .)
    IMPORT          reduce using rule 74 (else_if_loop -> else_if_statement .)
    ID              reduce using rule 74 (else_if_loop -> else_if_statement .)
    RETURN          reduce using rule 74 (else_if_loop -> else_if_statement .)
    DEL             reduce using rule 74 (else_if_loop -> else_if_statement .)
    FOR             reduce using rule 74 (else_if_loop -> else_if_statement .)
    DEBUG           reduce using rule 74 (else_if_loop -> else_if_statement .)
    SKIP            reduce using rule 74 (else_if_loop -> else_if_statement .)
    BREAK           reduce using rule 74 (else_if_loop -> else_if_statement .)
    LET             reduce using rule 74 (else_if_loop -> else_if_statement .)
    WHILE           reduce using rule 74 (else_if_loop -> else_if_statement .)
    NAMESPACE       reduce using rule 74 (else_if_loop -> else_if_statement .)
    CLASS           reduce using rule 74 (else_if_loop -> else_if_statement .)
    FUNC            reduce using rule 74 (else_if_loop -> else_if_statement .)
    INIT            reduce using rule 74 (else_if_loop -> else_if_statement .)
    PYTHON_CODE_EXEC reduce using rule 74 (else_if_loop -> else_if_statement .)
    PYTHON_CODE     reduce using rule 74 (else_if_loop -> else_if_statement .)
    IF              reduce using rule 74 (else_if_loop -> else_if_statement .)
    <               reduce using rule 74 (else_if_loop -> else_if_statement .)
    #               reduce using rule 74 (else_if_loop -> else_if_statement .)
    (               reduce using rule 74 (else_if_loop -> else_if_statement .)
    !               reduce using rule 74 (else_if_loop -> else_if_statement .)
    +               reduce using rule 74 (else_if_loop -> else_if_statement .)
    -               reduce using rule 74 (else_if_loop -> else_if_statement .)
    *               reduce using rule 74 (else_if_loop -> else_if_statement .)
    &               reduce using rule 74 (else_if_loop -> else_if_statement .)
    {               reduce using rule 74 (else_if_loop -> else_if_statement .)
    [               reduce using rule 74 (else_if_loop -> else_if_statement .)
    STRING          reduce using rule 74 (else_if_loop -> else_if_statement .)
    FALSE           reduce using rule 74 (else_if_loop -> else_if_statement .)
    TRUE            reduce using rule 74 (else_if_loop -> else_if_statement .)
    FLOAT           reduce using rule 74 (else_if_loop -> else_if_statement .)
    INT             reduce using rule 74 (else_if_loop -> else_if_statement .)
    NULL            reduce using rule 74 (else_if_loop -> else_if_statement .)
    $end            reduce using rule 74 (else_if_loop -> else_if_statement .)
    }               reduce using rule 74 (else_if_loop -> else_if_statement .)


state 135

    (68) class_attribute_assignment -> class_attribute = . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    class_attribute                shift and go to state 76
    expression                     shift and go to state 213
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 136

    (21) function_call_statement -> function_call ; .
    SANDBOX         reduce using rule 21 (function_call_statement -> function_call ; .)
    LIMPORT         reduce using rule 21 (function_call_statement -> function_call ; .)
    .               reduce using rule 21 (function_call_statement -> function_call ; .)
    IMPORT          reduce using rule 21 (function_call_statement -> function_call ; .)
    ID              reduce using rule 21 (function_call_statement -> function_call ; .)
    RETURN          reduce using rule 21 (function_call_statement -> function_call ; .)
    DEL             reduce using rule 21 (function_call_statement -> function_call ; .)
    FOR             reduce using rule 21 (function_call_statement -> function_call ; .)
    DEBUG           reduce using rule 21 (function_call_statement -> function_call ; .)
    SKIP            reduce using rule 21 (function_call_statement -> function_call ; .)
    BREAK           reduce using rule 21 (function_call_statement -> function_call ; .)
    LET             reduce using rule 21 (function_call_statement -> function_call ; .)
    WHILE           reduce using rule 21 (function_call_statement -> function_call ; .)
    NAMESPACE       reduce using rule 21 (function_call_statement -> function_call ; .)
    CLASS           reduce using rule 21 (function_call_statement -> function_call ; .)
    FUNC            reduce using rule 21 (function_call_statement -> function_call ; .)
    INIT            reduce using rule 21 (function_call_statement -> function_call ; .)
    PYTHON_CODE_EXEC reduce using rule 21 (function_call_statement -> function_call ; .)
    PYTHON_CODE     reduce using rule 21 (function_call_statement -> function_call ; .)
    IF              reduce using rule 21 (function_call_statement -> function_call ; .)
    <               reduce using rule 21 (function_call_statement -> function_call ; .)
    #               reduce using rule 21 (function_call_statement -> function_call ; .)
    (               reduce using rule 21 (function_call_statement -> function_call ; .)
    !               reduce using rule 21 (function_call_statement -> function_call ; .)
    +               reduce using rule 21 (function_call_statement -> function_call ; .)
    -               reduce using rule 21 (function_call_statement -> function_call ; .)
    *               reduce using rule 21 (function_call_statement -> function_call ; .)
    &               reduce using rule 21 (function_call_statement -> function_call ; .)
    {               reduce using rule 21 (function_call_statement -> function_call ; .)
    [               reduce using rule 21 (function_call_statement -> function_call ; .)
    STRING          reduce using rule 21 (function_call_statement -> function_call ; .)
    FALSE           reduce using rule 21 (function_call_statement -> function_call ; .)
    TRUE            reduce using rule 21 (function_call_statement -> function_call ; .)
    FLOAT           reduce using rule 21 (function_call_statement -> function_call ; .)
    INT             reduce using rule 21 (function_call_statement -> function_call ; .)
    NULL            reduce using rule 21 (function_call_statement -> function_call ; .)
    $end            reduce using rule 21 (function_call_statement -> function_call ; .)
    }               reduce using rule 21 (function_call_statement -> function_call ; .)


state 137

    (47) class_declaration -> NAMESPACE ID . { program }
    {               shift and go to state 214


state 138

    (48) class_declaration -> CLASS ID . { program }
    {               shift and go to state 215


state 139

    (39) function_declaration -> FUNC ID . ( empty ) { program } TARROW expression
    (40) function_declaration -> FUNC ID . COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> FUNC ID . COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (43) function_declaration -> FUNC ID . ( function_arguments ) { program } TARROW expression
    (               shift and go to state 216
    COLON_COLON     shift and go to state 217


state 140

    (42) function_declaration -> INIT ( . function_arguments ) { program } ;
    (44) function_arguments -> . kwargs
    (45) function_arguments -> . positional_args , kwargs
    (46) function_arguments -> . positional_args
    (53) kwargs -> . ID = expression
    (54) kwargs -> . kwargs , id = expression
    (51) positional_args -> . expression
    (52) positional_args -> . positional_args , expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    ID              shift and go to state 166
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    function_arguments             shift and go to state 218
    kwargs                         shift and go to state 164
    positional_args                shift and go to state 165
    expression                     shift and go to state 142
    id                             shift and go to state 54
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 141

    (121) _list -> [ positional_args . , ]
    (122) _list -> [ positional_args . ]
    (52) positional_args -> positional_args . , expression
    ,               shift and go to state 219
    ]               shift and go to state 220


state 142

    (51) positional_args -> expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ,               reduce using rule 51 (positional_args -> expression .)
    ]               reduce using rule 51 (positional_args -> expression .)
    )               reduce using rule 51 (positional_args -> expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 143

    (73) if_statement -> IF ( . expression ) { program }
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 221
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 144

    (30) function_call -> < ID . > expression
    >               shift and go to state 222


state 145

    (33) function_call -> # DEPENDS . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 223
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 146

    (34) function_call -> # DEFINE . expression ? ID
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 224
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 147

    (99) expression -> ! expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               reduce using rule 99 (expression -> ! expression .)
    [               reduce using rule 99 (expression -> ! expression .)
    (               reduce using rule 99 (expression -> ! expression .)
    >               reduce using rule 99 (expression -> ! expression .)
    <               reduce using rule 99 (expression -> ! expression .)
    &               reduce using rule 99 (expression -> ! expression .)
    |               reduce using rule 99 (expression -> ! expression .)
    EQ_GREATER      reduce using rule 99 (expression -> ! expression .)
    EQ_LESS         reduce using rule 99 (expression -> ! expression .)
    NOT_EQEQ        reduce using rule 99 (expression -> ! expression .)
    EQEQ            reduce using rule 99 (expression -> ! expression .)
    %               reduce using rule 99 (expression -> ! expression .)
    *               reduce using rule 99 (expression -> ! expression .)
    /               reduce using rule 99 (expression -> ! expression .)
    -               reduce using rule 99 (expression -> ! expression .)
    +               reduce using rule 99 (expression -> ! expression .)
    :               reduce using rule 99 (expression -> ! expression .)
    ,               reduce using rule 99 (expression -> ! expression .)
    }               reduce using rule 99 (expression -> ! expression .)
    ;               reduce using rule 99 (expression -> ! expression .)
    IN              reduce using rule 99 (expression -> ! expression .)
    )               reduce using rule 99 (expression -> ! expression .)
    ]               reduce using rule 99 (expression -> ! expression .)
    EQ_DIV          reduce using rule 99 (expression -> ! expression .)
    EQ_MOD          reduce using rule 99 (expression -> ! expression .)
    EQ_MUL          reduce using rule 99 (expression -> ! expression .)
    EQ_SUB          reduce using rule 99 (expression -> ! expression .)
    EQ_ADD          reduce using rule 99 (expression -> ! expression .)
    =               reduce using rule 99 (expression -> ! expression .)
    ?               reduce using rule 99 (expression -> ! expression .)
    {               reduce using rule 99 (expression -> ! expression .)
    SANDBOX         reduce using rule 99 (expression -> ! expression .)
    LIMPORT         reduce using rule 99 (expression -> ! expression .)
    .               reduce using rule 99 (expression -> ! expression .)
    IMPORT          reduce using rule 99 (expression -> ! expression .)
    ID              reduce using rule 99 (expression -> ! expression .)
    RETURN          reduce using rule 99 (expression -> ! expression .)
    DEL             reduce using rule 99 (expression -> ! expression .)
    FOR             reduce using rule 99 (expression -> ! expression .)
    DEBUG           reduce using rule 99 (expression -> ! expression .)
    SKIP            reduce using rule 99 (expression -> ! expression .)
    BREAK           reduce using rule 99 (expression -> ! expression .)
    LET             reduce using rule 99 (expression -> ! expression .)
    WHILE           reduce using rule 99 (expression -> ! expression .)
    NAMESPACE       reduce using rule 99 (expression -> ! expression .)
    CLASS           reduce using rule 99 (expression -> ! expression .)
    FUNC            reduce using rule 99 (expression -> ! expression .)
    INIT            reduce using rule 99 (expression -> ! expression .)
    PYTHON_CODE_EXEC reduce using rule 99 (expression -> ! expression .)
    PYTHON_CODE     reduce using rule 99 (expression -> ! expression .)
    IF              reduce using rule 99 (expression -> ! expression .)
    #               reduce using rule 99 (expression -> ! expression .)
    !               reduce using rule 99 (expression -> ! expression .)
    STRING          reduce using rule 99 (expression -> ! expression .)
    FALSE           reduce using rule 99 (expression -> ! expression .)
    TRUE            reduce using rule 99 (expression -> ! expression .)
    FLOAT           reduce using rule 99 (expression -> ! expression .)
    INT             reduce using rule 99 (expression -> ! expression .)
    NULL            reduce using rule 99 (expression -> ! expression .)
    $end            reduce using rule 99 (expression -> ! expression .)
    COLON_COLON     shift and go to state 85


state 148

    (114) expression -> & ID .
    ^               reduce using rule 114 (expression -> & ID .)
    [               reduce using rule 114 (expression -> & ID .)
    COLON_COLON     reduce using rule 114 (expression -> & ID .)
    (               reduce using rule 114 (expression -> & ID .)
    >               reduce using rule 114 (expression -> & ID .)
    <               reduce using rule 114 (expression -> & ID .)
    &               reduce using rule 114 (expression -> & ID .)
    |               reduce using rule 114 (expression -> & ID .)
    EQ_GREATER      reduce using rule 114 (expression -> & ID .)
    EQ_LESS         reduce using rule 114 (expression -> & ID .)
    NOT_EQEQ        reduce using rule 114 (expression -> & ID .)
    EQEQ            reduce using rule 114 (expression -> & ID .)
    %               reduce using rule 114 (expression -> & ID .)
    *               reduce using rule 114 (expression -> & ID .)
    /               reduce using rule 114 (expression -> & ID .)
    -               reduce using rule 114 (expression -> & ID .)
    +               reduce using rule 114 (expression -> & ID .)
    :               reduce using rule 114 (expression -> & ID .)
    ,               reduce using rule 114 (expression -> & ID .)
    }               reduce using rule 114 (expression -> & ID .)
    ;               reduce using rule 114 (expression -> & ID .)
    IN              reduce using rule 114 (expression -> & ID .)
    )               reduce using rule 114 (expression -> & ID .)
    ]               reduce using rule 114 (expression -> & ID .)
    EQ_DIV          reduce using rule 114 (expression -> & ID .)
    EQ_MOD          reduce using rule 114 (expression -> & ID .)
    EQ_MUL          reduce using rule 114 (expression -> & ID .)
    EQ_SUB          reduce using rule 114 (expression -> & ID .)
    EQ_ADD          reduce using rule 114 (expression -> & ID .)
    =               reduce using rule 114 (expression -> & ID .)
    ?               reduce using rule 114 (expression -> & ID .)
    {               reduce using rule 114 (expression -> & ID .)
    SANDBOX         reduce using rule 114 (expression -> & ID .)
    LIMPORT         reduce using rule 114 (expression -> & ID .)
    .               reduce using rule 114 (expression -> & ID .)
    IMPORT          reduce using rule 114 (expression -> & ID .)
    ID              reduce using rule 114 (expression -> & ID .)
    RETURN          reduce using rule 114 (expression -> & ID .)
    DEL             reduce using rule 114 (expression -> & ID .)
    FOR             reduce using rule 114 (expression -> & ID .)
    DEBUG           reduce using rule 114 (expression -> & ID .)
    SKIP            reduce using rule 114 (expression -> & ID .)
    BREAK           reduce using rule 114 (expression -> & ID .)
    LET             reduce using rule 114 (expression -> & ID .)
    WHILE           reduce using rule 114 (expression -> & ID .)
    NAMESPACE       reduce using rule 114 (expression -> & ID .)
    CLASS           reduce using rule 114 (expression -> & ID .)
    FUNC            reduce using rule 114 (expression -> & ID .)
    INIT            reduce using rule 114 (expression -> & ID .)
    PYTHON_CODE_EXEC reduce using rule 114 (expression -> & ID .)
    PYTHON_CODE     reduce using rule 114 (expression -> & ID .)
    IF              reduce using rule 114 (expression -> & ID .)
    #               reduce using rule 114 (expression -> & ID .)
    !               reduce using rule 114 (expression -> & ID .)
    STRING          reduce using rule 114 (expression -> & ID .)
    FALSE           reduce using rule 114 (expression -> & ID .)
    TRUE            reduce using rule 114 (expression -> & ID .)
    FLOAT           reduce using rule 114 (expression -> & ID .)
    INT             reduce using rule 114 (expression -> & ID .)
    NULL            reduce using rule 114 (expression -> & ID .)
    $end            reduce using rule 114 (expression -> & ID .)


state 149

    (113) expression -> * ID .
    ^               reduce using rule 113 (expression -> * ID .)
    [               reduce using rule 113 (expression -> * ID .)
    COLON_COLON     reduce using rule 113 (expression -> * ID .)
    (               reduce using rule 113 (expression -> * ID .)
    >               reduce using rule 113 (expression -> * ID .)
    <               reduce using rule 113 (expression -> * ID .)
    &               reduce using rule 113 (expression -> * ID .)
    |               reduce using rule 113 (expression -> * ID .)
    EQ_GREATER      reduce using rule 113 (expression -> * ID .)
    EQ_LESS         reduce using rule 113 (expression -> * ID .)
    NOT_EQEQ        reduce using rule 113 (expression -> * ID .)
    EQEQ            reduce using rule 113 (expression -> * ID .)
    %               reduce using rule 113 (expression -> * ID .)
    *               reduce using rule 113 (expression -> * ID .)
    /               reduce using rule 113 (expression -> * ID .)
    -               reduce using rule 113 (expression -> * ID .)
    +               reduce using rule 113 (expression -> * ID .)
    :               reduce using rule 113 (expression -> * ID .)
    ,               reduce using rule 113 (expression -> * ID .)
    }               reduce using rule 113 (expression -> * ID .)
    ;               reduce using rule 113 (expression -> * ID .)
    IN              reduce using rule 113 (expression -> * ID .)
    )               reduce using rule 113 (expression -> * ID .)
    ]               reduce using rule 113 (expression -> * ID .)
    EQ_DIV          reduce using rule 113 (expression -> * ID .)
    EQ_MOD          reduce using rule 113 (expression -> * ID .)
    EQ_MUL          reduce using rule 113 (expression -> * ID .)
    EQ_SUB          reduce using rule 113 (expression -> * ID .)
    EQ_ADD          reduce using rule 113 (expression -> * ID .)
    =               reduce using rule 113 (expression -> * ID .)
    ?               reduce using rule 113 (expression -> * ID .)
    {               reduce using rule 113 (expression -> * ID .)
    SANDBOX         reduce using rule 113 (expression -> * ID .)
    LIMPORT         reduce using rule 113 (expression -> * ID .)
    .               reduce using rule 113 (expression -> * ID .)
    IMPORT          reduce using rule 113 (expression -> * ID .)
    ID              reduce using rule 113 (expression -> * ID .)
    RETURN          reduce using rule 113 (expression -> * ID .)
    DEL             reduce using rule 113 (expression -> * ID .)
    FOR             reduce using rule 113 (expression -> * ID .)
    DEBUG           reduce using rule 113 (expression -> * ID .)
    SKIP            reduce using rule 113 (expression -> * ID .)
    BREAK           reduce using rule 113 (expression -> * ID .)
    LET             reduce using rule 113 (expression -> * ID .)
    WHILE           reduce using rule 113 (expression -> * ID .)
    NAMESPACE       reduce using rule 113 (expression -> * ID .)
    CLASS           reduce using rule 113 (expression -> * ID .)
    FUNC            reduce using rule 113 (expression -> * ID .)
    INIT            reduce using rule 113 (expression -> * ID .)
    PYTHON_CODE_EXEC reduce using rule 113 (expression -> * ID .)
    PYTHON_CODE     reduce using rule 113 (expression -> * ID .)
    IF              reduce using rule 113 (expression -> * ID .)
    #               reduce using rule 113 (expression -> * ID .)
    !               reduce using rule 113 (expression -> * ID .)
    STRING          reduce using rule 113 (expression -> * ID .)
    FALSE           reduce using rule 113 (expression -> * ID .)
    TRUE            reduce using rule 113 (expression -> * ID .)
    FLOAT           reduce using rule 113 (expression -> * ID .)
    INT             reduce using rule 113 (expression -> * ID .)
    NULL            reduce using rule 113 (expression -> * ID .)
    $end            reduce using rule 113 (expression -> * ID .)


state 150

    (112) expression -> - expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               reduce using rule 112 (expression -> - expression .)
    [               reduce using rule 112 (expression -> - expression .)
    (               reduce using rule 112 (expression -> - expression .)
    >               reduce using rule 112 (expression -> - expression .)
    <               reduce using rule 112 (expression -> - expression .)
    &               reduce using rule 112 (expression -> - expression .)
    |               reduce using rule 112 (expression -> - expression .)
    EQ_GREATER      reduce using rule 112 (expression -> - expression .)
    EQ_LESS         reduce using rule 112 (expression -> - expression .)
    NOT_EQEQ        reduce using rule 112 (expression -> - expression .)
    EQEQ            reduce using rule 112 (expression -> - expression .)
    %               reduce using rule 112 (expression -> - expression .)
    *               reduce using rule 112 (expression -> - expression .)
    /               reduce using rule 112 (expression -> - expression .)
    -               reduce using rule 112 (expression -> - expression .)
    +               reduce using rule 112 (expression -> - expression .)
    :               reduce using rule 112 (expression -> - expression .)
    ,               reduce using rule 112 (expression -> - expression .)
    }               reduce using rule 112 (expression -> - expression .)
    ;               reduce using rule 112 (expression -> - expression .)
    IN              reduce using rule 112 (expression -> - expression .)
    )               reduce using rule 112 (expression -> - expression .)
    ]               reduce using rule 112 (expression -> - expression .)
    EQ_DIV          reduce using rule 112 (expression -> - expression .)
    EQ_MOD          reduce using rule 112 (expression -> - expression .)
    EQ_MUL          reduce using rule 112 (expression -> - expression .)
    EQ_SUB          reduce using rule 112 (expression -> - expression .)
    EQ_ADD          reduce using rule 112 (expression -> - expression .)
    =               reduce using rule 112 (expression -> - expression .)
    ?               reduce using rule 112 (expression -> - expression .)
    {               reduce using rule 112 (expression -> - expression .)
    SANDBOX         reduce using rule 112 (expression -> - expression .)
    LIMPORT         reduce using rule 112 (expression -> - expression .)
    .               reduce using rule 112 (expression -> - expression .)
    IMPORT          reduce using rule 112 (expression -> - expression .)
    ID              reduce using rule 112 (expression -> - expression .)
    RETURN          reduce using rule 112 (expression -> - expression .)
    DEL             reduce using rule 112 (expression -> - expression .)
    FOR             reduce using rule 112 (expression -> - expression .)
    DEBUG           reduce using rule 112 (expression -> - expression .)
    SKIP            reduce using rule 112 (expression -> - expression .)
    BREAK           reduce using rule 112 (expression -> - expression .)
    LET             reduce using rule 112 (expression -> - expression .)
    WHILE           reduce using rule 112 (expression -> - expression .)
    NAMESPACE       reduce using rule 112 (expression -> - expression .)
    CLASS           reduce using rule 112 (expression -> - expression .)
    FUNC            reduce using rule 112 (expression -> - expression .)
    INIT            reduce using rule 112 (expression -> - expression .)
    PYTHON_CODE_EXEC reduce using rule 112 (expression -> - expression .)
    PYTHON_CODE     reduce using rule 112 (expression -> - expression .)
    IF              reduce using rule 112 (expression -> - expression .)
    #               reduce using rule 112 (expression -> - expression .)
    !               reduce using rule 112 (expression -> - expression .)
    STRING          reduce using rule 112 (expression -> - expression .)
    FALSE           reduce using rule 112 (expression -> - expression .)
    TRUE            reduce using rule 112 (expression -> - expression .)
    FLOAT           reduce using rule 112 (expression -> - expression .)
    INT             reduce using rule 112 (expression -> - expression .)
    NULL            reduce using rule 112 (expression -> - expression .)
    $end            reduce using rule 112 (expression -> - expression .)
    COLON_COLON     shift and go to state 85


state 151

    (111) expression -> + expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               reduce using rule 111 (expression -> + expression .)
    [               reduce using rule 111 (expression -> + expression .)
    (               reduce using rule 111 (expression -> + expression .)
    >               reduce using rule 111 (expression -> + expression .)
    <               reduce using rule 111 (expression -> + expression .)
    &               reduce using rule 111 (expression -> + expression .)
    |               reduce using rule 111 (expression -> + expression .)
    EQ_GREATER      reduce using rule 111 (expression -> + expression .)
    EQ_LESS         reduce using rule 111 (expression -> + expression .)
    NOT_EQEQ        reduce using rule 111 (expression -> + expression .)
    EQEQ            reduce using rule 111 (expression -> + expression .)
    %               reduce using rule 111 (expression -> + expression .)
    *               reduce using rule 111 (expression -> + expression .)
    /               reduce using rule 111 (expression -> + expression .)
    -               reduce using rule 111 (expression -> + expression .)
    +               reduce using rule 111 (expression -> + expression .)
    :               reduce using rule 111 (expression -> + expression .)
    ,               reduce using rule 111 (expression -> + expression .)
    }               reduce using rule 111 (expression -> + expression .)
    ;               reduce using rule 111 (expression -> + expression .)
    IN              reduce using rule 111 (expression -> + expression .)
    )               reduce using rule 111 (expression -> + expression .)
    ]               reduce using rule 111 (expression -> + expression .)
    EQ_DIV          reduce using rule 111 (expression -> + expression .)
    EQ_MOD          reduce using rule 111 (expression -> + expression .)
    EQ_MUL          reduce using rule 111 (expression -> + expression .)
    EQ_SUB          reduce using rule 111 (expression -> + expression .)
    EQ_ADD          reduce using rule 111 (expression -> + expression .)
    =               reduce using rule 111 (expression -> + expression .)
    ?               reduce using rule 111 (expression -> + expression .)
    {               reduce using rule 111 (expression -> + expression .)
    SANDBOX         reduce using rule 111 (expression -> + expression .)
    LIMPORT         reduce using rule 111 (expression -> + expression .)
    .               reduce using rule 111 (expression -> + expression .)
    IMPORT          reduce using rule 111 (expression -> + expression .)
    ID              reduce using rule 111 (expression -> + expression .)
    RETURN          reduce using rule 111 (expression -> + expression .)
    DEL             reduce using rule 111 (expression -> + expression .)
    FOR             reduce using rule 111 (expression -> + expression .)
    DEBUG           reduce using rule 111 (expression -> + expression .)
    SKIP            reduce using rule 111 (expression -> + expression .)
    BREAK           reduce using rule 111 (expression -> + expression .)
    LET             reduce using rule 111 (expression -> + expression .)
    WHILE           reduce using rule 111 (expression -> + expression .)
    NAMESPACE       reduce using rule 111 (expression -> + expression .)
    CLASS           reduce using rule 111 (expression -> + expression .)
    FUNC            reduce using rule 111 (expression -> + expression .)
    INIT            reduce using rule 111 (expression -> + expression .)
    PYTHON_CODE_EXEC reduce using rule 111 (expression -> + expression .)
    PYTHON_CODE     reduce using rule 111 (expression -> + expression .)
    IF              reduce using rule 111 (expression -> + expression .)
    #               reduce using rule 111 (expression -> + expression .)
    !               reduce using rule 111 (expression -> + expression .)
    STRING          reduce using rule 111 (expression -> + expression .)
    FALSE           reduce using rule 111 (expression -> + expression .)
    TRUE            reduce using rule 111 (expression -> + expression .)
    FLOAT           reduce using rule 111 (expression -> + expression .)
    INT             reduce using rule 111 (expression -> + expression .)
    NULL            reduce using rule 111 (expression -> + expression .)
    $end            reduce using rule 111 (expression -> + expression .)
    COLON_COLON     shift and go to state 85


state 152

    (19) sandbox -> SANDBOX { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 225
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 153

    (137) assoc_array -> { assoc_array_items } .
    ^               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    [               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    COLON_COLON     reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    (               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    >               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    <               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    &               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    |               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    EQ_GREATER      reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    EQ_LESS         reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    NOT_EQEQ        reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    EQEQ            reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    %               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    *               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    /               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    -               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    +               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    :               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    ,               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    }               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    ;               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    IN              reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    )               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    ]               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    EQ_DIV          reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    EQ_MOD          reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    EQ_MUL          reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    EQ_SUB          reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    EQ_ADD          reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    =               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    ?               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    {               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    SANDBOX         reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    LIMPORT         reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    .               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    IMPORT          reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    ID              reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    RETURN          reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    DEL             reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    FOR             reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    DEBUG           reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    SKIP            reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    BREAK           reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    LET             reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    WHILE           reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    NAMESPACE       reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    CLASS           reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    FUNC            reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    INIT            reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    PYTHON_CODE_EXEC reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    PYTHON_CODE     reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    IF              reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    #               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    !               reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    STRING          reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    FALSE           reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    TRUE            reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    FLOAT           reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    INT             reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    NULL            reduce using rule 137 (assoc_array -> { assoc_array_items } .)
    $end            reduce using rule 137 (assoc_array -> { assoc_array_items } .)


state 154

    (139) assoc_array_items -> assoc_array_items , . expression : expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 226
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 155

    (119) _tuple -> { positional_args , . }
    (52) positional_args -> positional_args , . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    }               shift and go to state 227
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 228
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 156

    (120) _tuple -> { positional_args } .
    ^               reduce using rule 120 (_tuple -> { positional_args } .)
    [               reduce using rule 120 (_tuple -> { positional_args } .)
    COLON_COLON     reduce using rule 120 (_tuple -> { positional_args } .)
    (               reduce using rule 120 (_tuple -> { positional_args } .)
    >               reduce using rule 120 (_tuple -> { positional_args } .)
    <               reduce using rule 120 (_tuple -> { positional_args } .)
    &               reduce using rule 120 (_tuple -> { positional_args } .)
    |               reduce using rule 120 (_tuple -> { positional_args } .)
    EQ_GREATER      reduce using rule 120 (_tuple -> { positional_args } .)
    EQ_LESS         reduce using rule 120 (_tuple -> { positional_args } .)
    NOT_EQEQ        reduce using rule 120 (_tuple -> { positional_args } .)
    EQEQ            reduce using rule 120 (_tuple -> { positional_args } .)
    %               reduce using rule 120 (_tuple -> { positional_args } .)
    *               reduce using rule 120 (_tuple -> { positional_args } .)
    /               reduce using rule 120 (_tuple -> { positional_args } .)
    -               reduce using rule 120 (_tuple -> { positional_args } .)
    +               reduce using rule 120 (_tuple -> { positional_args } .)
    :               reduce using rule 120 (_tuple -> { positional_args } .)
    ,               reduce using rule 120 (_tuple -> { positional_args } .)
    }               reduce using rule 120 (_tuple -> { positional_args } .)
    ;               reduce using rule 120 (_tuple -> { positional_args } .)
    IN              reduce using rule 120 (_tuple -> { positional_args } .)
    )               reduce using rule 120 (_tuple -> { positional_args } .)
    ]               reduce using rule 120 (_tuple -> { positional_args } .)
    EQ_DIV          reduce using rule 120 (_tuple -> { positional_args } .)
    EQ_MOD          reduce using rule 120 (_tuple -> { positional_args } .)
    EQ_MUL          reduce using rule 120 (_tuple -> { positional_args } .)
    EQ_SUB          reduce using rule 120 (_tuple -> { positional_args } .)
    EQ_ADD          reduce using rule 120 (_tuple -> { positional_args } .)
    =               reduce using rule 120 (_tuple -> { positional_args } .)
    ?               reduce using rule 120 (_tuple -> { positional_args } .)
    {               reduce using rule 120 (_tuple -> { positional_args } .)
    SANDBOX         reduce using rule 120 (_tuple -> { positional_args } .)
    LIMPORT         reduce using rule 120 (_tuple -> { positional_args } .)
    .               reduce using rule 120 (_tuple -> { positional_args } .)
    IMPORT          reduce using rule 120 (_tuple -> { positional_args } .)
    ID              reduce using rule 120 (_tuple -> { positional_args } .)
    RETURN          reduce using rule 120 (_tuple -> { positional_args } .)
    DEL             reduce using rule 120 (_tuple -> { positional_args } .)
    FOR             reduce using rule 120 (_tuple -> { positional_args } .)
    DEBUG           reduce using rule 120 (_tuple -> { positional_args } .)
    SKIP            reduce using rule 120 (_tuple -> { positional_args } .)
    BREAK           reduce using rule 120 (_tuple -> { positional_args } .)
    LET             reduce using rule 120 (_tuple -> { positional_args } .)
    WHILE           reduce using rule 120 (_tuple -> { positional_args } .)
    NAMESPACE       reduce using rule 120 (_tuple -> { positional_args } .)
    CLASS           reduce using rule 120 (_tuple -> { positional_args } .)
    FUNC            reduce using rule 120 (_tuple -> { positional_args } .)
    INIT            reduce using rule 120 (_tuple -> { positional_args } .)
    PYTHON_CODE_EXEC reduce using rule 120 (_tuple -> { positional_args } .)
    PYTHON_CODE     reduce using rule 120 (_tuple -> { positional_args } .)
    IF              reduce using rule 120 (_tuple -> { positional_args } .)
    #               reduce using rule 120 (_tuple -> { positional_args } .)
    !               reduce using rule 120 (_tuple -> { positional_args } .)
    STRING          reduce using rule 120 (_tuple -> { positional_args } .)
    FALSE           reduce using rule 120 (_tuple -> { positional_args } .)
    TRUE            reduce using rule 120 (_tuple -> { positional_args } .)
    FLOAT           reduce using rule 120 (_tuple -> { positional_args } .)
    INT             reduce using rule 120 (_tuple -> { positional_args } .)
    NULL            reduce using rule 120 (_tuple -> { positional_args } .)
    $end            reduce using rule 120 (_tuple -> { positional_args } .)


state 157

    (138) assoc_array_items -> expression : . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 229
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 158

    (20) sandbox -> LIMPORT expression ; .
    SANDBOX         reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    LIMPORT         reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    .               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    IMPORT          reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    ID              reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    RETURN          reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    DEL             reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    FOR             reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    DEBUG           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    SKIP            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    BREAK           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    LET             reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    WHILE           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    NAMESPACE       reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    CLASS           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    FUNC            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    INIT            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    PYTHON_CODE_EXEC reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    PYTHON_CODE     reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    IF              reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    <               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    #               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    (               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    !               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    +               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    -               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    *               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    &               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    {               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    [               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    STRING          reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    FALSE           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    TRUE            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    FLOAT           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    INT             reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    NULL            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    $end            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    }               reduce using rule 20 (sandbox -> LIMPORT expression ; .)


state 159

    (117) get_index -> expression ^ expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    EQ_DIV          reduce using rule 117 (get_index -> expression ^ expression .)
    EQ_MOD          reduce using rule 117 (get_index -> expression ^ expression .)
    EQ_MUL          reduce using rule 117 (get_index -> expression ^ expression .)
    EQ_SUB          reduce using rule 117 (get_index -> expression ^ expression .)
    EQ_ADD          reduce using rule 117 (get_index -> expression ^ expression .)
    :               reduce using rule 117 (get_index -> expression ^ expression .)
    ,               reduce using rule 117 (get_index -> expression ^ expression .)
    }               reduce using rule 117 (get_index -> expression ^ expression .)
    ;               reduce using rule 117 (get_index -> expression ^ expression .)
    IN              reduce using rule 117 (get_index -> expression ^ expression .)
    =               reduce using rule 117 (get_index -> expression ^ expression .)
    )               reduce using rule 117 (get_index -> expression ^ expression .)
    ]               reduce using rule 117 (get_index -> expression ^ expression .)
    ?               reduce using rule 117 (get_index -> expression ^ expression .)
    {               reduce using rule 117 (get_index -> expression ^ expression .)
    SANDBOX         reduce using rule 117 (get_index -> expression ^ expression .)
    LIMPORT         reduce using rule 117 (get_index -> expression ^ expression .)
    .               reduce using rule 117 (get_index -> expression ^ expression .)
    IMPORT          reduce using rule 117 (get_index -> expression ^ expression .)
    ID              reduce using rule 117 (get_index -> expression ^ expression .)
    RETURN          reduce using rule 117 (get_index -> expression ^ expression .)
    DEL             reduce using rule 117 (get_index -> expression ^ expression .)
    FOR             reduce using rule 117 (get_index -> expression ^ expression .)
    DEBUG           reduce using rule 117 (get_index -> expression ^ expression .)
    SKIP            reduce using rule 117 (get_index -> expression ^ expression .)
    BREAK           reduce using rule 117 (get_index -> expression ^ expression .)
    LET             reduce using rule 117 (get_index -> expression ^ expression .)
    WHILE           reduce using rule 117 (get_index -> expression ^ expression .)
    NAMESPACE       reduce using rule 117 (get_index -> expression ^ expression .)
    CLASS           reduce using rule 117 (get_index -> expression ^ expression .)
    FUNC            reduce using rule 117 (get_index -> expression ^ expression .)
    INIT            reduce using rule 117 (get_index -> expression ^ expression .)
    PYTHON_CODE_EXEC reduce using rule 117 (get_index -> expression ^ expression .)
    PYTHON_CODE     reduce using rule 117 (get_index -> expression ^ expression .)
    IF              reduce using rule 117 (get_index -> expression ^ expression .)
    #               reduce using rule 117 (get_index -> expression ^ expression .)
    !               reduce using rule 117 (get_index -> expression ^ expression .)
    STRING          reduce using rule 117 (get_index -> expression ^ expression .)
    FALSE           reduce using rule 117 (get_index -> expression ^ expression .)
    TRUE            reduce using rule 117 (get_index -> expression ^ expression .)
    FLOAT           reduce using rule 117 (get_index -> expression ^ expression .)
    INT             reduce using rule 117 (get_index -> expression ^ expression .)
    NULL            reduce using rule 117 (get_index -> expression ^ expression .)
    $end            reduce using rule 117 (get_index -> expression ^ expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 160

    (118) get_index -> expression [ expression . ]
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ]               shift and go to state 230
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 161

    (135) class_attribute -> expression COLON_COLON ID .
    =               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    ^               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    [               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    COLON_COLON     reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    (               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    >               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    <               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    &               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    |               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    EQ_GREATER      reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    EQ_LESS         reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    NOT_EQEQ        reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    EQEQ            reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    %               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    *               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    /               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    -               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    +               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    :               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    ,               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    }               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    ;               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    IN              reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    )               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    ]               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    EQ_DIV          reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    EQ_MOD          reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    EQ_MUL          reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    EQ_SUB          reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    EQ_ADD          reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    ?               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    {               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    SANDBOX         reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    LIMPORT         reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    .               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    IMPORT          reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    ID              reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    RETURN          reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    DEL             reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    FOR             reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    DEBUG           reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    SKIP            reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    BREAK           reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    LET             reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    WHILE           reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    NAMESPACE       reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    CLASS           reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    FUNC            reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    INIT            reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    PYTHON_CODE_EXEC reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    PYTHON_CODE     reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    IF              reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    #               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    !               reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    STRING          reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    FALSE           reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    TRUE            reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    FLOAT           reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    INT             reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    NULL            reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)
    $end            reduce using rule 135 (class_attribute -> expression COLON_COLON ID .)


state 162

    (29) function_call -> expression ( empty . ) FARROW { program }
    (35) function_call -> expression ( empty . )
    )               shift and go to state 231


state 163

    (36) function_call -> expression ( function_arguments . ) FARROW { program }
    (37) function_call -> expression ( function_arguments . )
    )               shift and go to state 232


state 164

    (44) function_arguments -> kwargs .
    (54) kwargs -> kwargs . , id = expression
    )               reduce using rule 44 (function_arguments -> kwargs .)
    ,               shift and go to state 233


state 165

    (45) function_arguments -> positional_args . , kwargs
    (46) function_arguments -> positional_args .
    (52) positional_args -> positional_args . , expression
    ,               shift and go to state 234
    )               reduce using rule 46 (function_arguments -> positional_args .)


state 166

    (53) kwargs -> ID . = expression
    (115) expression -> ID . OF ID
    (136) id -> ID .
    (31) function_call -> ID . TARROW ID ( function_arguments )
    (32) function_call -> ID . TARROW ID
    =               shift and go to state 235
    OF              shift and go to state 115
    >               reduce using rule 136 (id -> ID .)
    <               reduce using rule 136 (id -> ID .)
    &               reduce using rule 136 (id -> ID .)
    |               reduce using rule 136 (id -> ID .)
    EQ_GREATER      reduce using rule 136 (id -> ID .)
    EQ_LESS         reduce using rule 136 (id -> ID .)
    NOT_EQEQ        reduce using rule 136 (id -> ID .)
    EQEQ            reduce using rule 136 (id -> ID .)
    %               reduce using rule 136 (id -> ID .)
    *               reduce using rule 136 (id -> ID .)
    /               reduce using rule 136 (id -> ID .)
    -               reduce using rule 136 (id -> ID .)
    +               reduce using rule 136 (id -> ID .)
    COLON_COLON     reduce using rule 136 (id -> ID .)
    ^               reduce using rule 136 (id -> ID .)
    [               reduce using rule 136 (id -> ID .)
    (               reduce using rule 136 (id -> ID .)
    ,               reduce using rule 136 (id -> ID .)
    )               reduce using rule 136 (id -> ID .)
    TARROW          shift and go to state 114


state 167

    (97) expression -> expression > expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               reduce using rule 97 (expression -> expression > expression .)
    [               reduce using rule 97 (expression -> expression > expression .)
    (               reduce using rule 97 (expression -> expression > expression .)
    >               reduce using rule 97 (expression -> expression > expression .)
    <               reduce using rule 97 (expression -> expression > expression .)
    &               reduce using rule 97 (expression -> expression > expression .)
    |               reduce using rule 97 (expression -> expression > expression .)
    EQ_GREATER      reduce using rule 97 (expression -> expression > expression .)
    EQ_LESS         reduce using rule 97 (expression -> expression > expression .)
    NOT_EQEQ        reduce using rule 97 (expression -> expression > expression .)
    EQEQ            reduce using rule 97 (expression -> expression > expression .)
    :               reduce using rule 97 (expression -> expression > expression .)
    ,               reduce using rule 97 (expression -> expression > expression .)
    }               reduce using rule 97 (expression -> expression > expression .)
    ;               reduce using rule 97 (expression -> expression > expression .)
    IN              reduce using rule 97 (expression -> expression > expression .)
    )               reduce using rule 97 (expression -> expression > expression .)
    ]               reduce using rule 97 (expression -> expression > expression .)
    EQ_DIV          reduce using rule 97 (expression -> expression > expression .)
    EQ_MOD          reduce using rule 97 (expression -> expression > expression .)
    EQ_MUL          reduce using rule 97 (expression -> expression > expression .)
    EQ_SUB          reduce using rule 97 (expression -> expression > expression .)
    EQ_ADD          reduce using rule 97 (expression -> expression > expression .)
    =               reduce using rule 97 (expression -> expression > expression .)
    ?               reduce using rule 97 (expression -> expression > expression .)
    {               reduce using rule 97 (expression -> expression > expression .)
    SANDBOX         reduce using rule 97 (expression -> expression > expression .)
    LIMPORT         reduce using rule 97 (expression -> expression > expression .)
    .               reduce using rule 97 (expression -> expression > expression .)
    IMPORT          reduce using rule 97 (expression -> expression > expression .)
    ID              reduce using rule 97 (expression -> expression > expression .)
    RETURN          reduce using rule 97 (expression -> expression > expression .)
    DEL             reduce using rule 97 (expression -> expression > expression .)
    FOR             reduce using rule 97 (expression -> expression > expression .)
    DEBUG           reduce using rule 97 (expression -> expression > expression .)
    SKIP            reduce using rule 97 (expression -> expression > expression .)
    BREAK           reduce using rule 97 (expression -> expression > expression .)
    LET             reduce using rule 97 (expression -> expression > expression .)
    WHILE           reduce using rule 97 (expression -> expression > expression .)
    NAMESPACE       reduce using rule 97 (expression -> expression > expression .)
    CLASS           reduce using rule 97 (expression -> expression > expression .)
    FUNC            reduce using rule 97 (expression -> expression > expression .)
    INIT            reduce using rule 97 (expression -> expression > expression .)
    PYTHON_CODE_EXEC reduce using rule 97 (expression -> expression > expression .)
    PYTHON_CODE     reduce using rule 97 (expression -> expression > expression .)
    IF              reduce using rule 97 (expression -> expression > expression .)
    #               reduce using rule 97 (expression -> expression > expression .)
    !               reduce using rule 97 (expression -> expression > expression .)
    STRING          reduce using rule 97 (expression -> expression > expression .)
    FALSE           reduce using rule 97 (expression -> expression > expression .)
    TRUE            reduce using rule 97 (expression -> expression > expression .)
    FLOAT           reduce using rule 97 (expression -> expression > expression .)
    INT             reduce using rule 97 (expression -> expression > expression .)
    NULL            reduce using rule 97 (expression -> expression > expression .)
    $end            reduce using rule 97 (expression -> expression > expression .)
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85


state 168

    (98) expression -> expression < expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               reduce using rule 98 (expression -> expression < expression .)
    [               reduce using rule 98 (expression -> expression < expression .)
    (               reduce using rule 98 (expression -> expression < expression .)
    >               reduce using rule 98 (expression -> expression < expression .)
    <               reduce using rule 98 (expression -> expression < expression .)
    &               reduce using rule 98 (expression -> expression < expression .)
    |               reduce using rule 98 (expression -> expression < expression .)
    EQ_GREATER      reduce using rule 98 (expression -> expression < expression .)
    EQ_LESS         reduce using rule 98 (expression -> expression < expression .)
    NOT_EQEQ        reduce using rule 98 (expression -> expression < expression .)
    EQEQ            reduce using rule 98 (expression -> expression < expression .)
    :               reduce using rule 98 (expression -> expression < expression .)
    ,               reduce using rule 98 (expression -> expression < expression .)
    }               reduce using rule 98 (expression -> expression < expression .)
    ;               reduce using rule 98 (expression -> expression < expression .)
    IN              reduce using rule 98 (expression -> expression < expression .)
    )               reduce using rule 98 (expression -> expression < expression .)
    ]               reduce using rule 98 (expression -> expression < expression .)
    EQ_DIV          reduce using rule 98 (expression -> expression < expression .)
    EQ_MOD          reduce using rule 98 (expression -> expression < expression .)
    EQ_MUL          reduce using rule 98 (expression -> expression < expression .)
    EQ_SUB          reduce using rule 98 (expression -> expression < expression .)
    EQ_ADD          reduce using rule 98 (expression -> expression < expression .)
    =               reduce using rule 98 (expression -> expression < expression .)
    ?               reduce using rule 98 (expression -> expression < expression .)
    {               reduce using rule 98 (expression -> expression < expression .)
    SANDBOX         reduce using rule 98 (expression -> expression < expression .)
    LIMPORT         reduce using rule 98 (expression -> expression < expression .)
    .               reduce using rule 98 (expression -> expression < expression .)
    IMPORT          reduce using rule 98 (expression -> expression < expression .)
    ID              reduce using rule 98 (expression -> expression < expression .)
    RETURN          reduce using rule 98 (expression -> expression < expression .)
    DEL             reduce using rule 98 (expression -> expression < expression .)
    FOR             reduce using rule 98 (expression -> expression < expression .)
    DEBUG           reduce using rule 98 (expression -> expression < expression .)
    SKIP            reduce using rule 98 (expression -> expression < expression .)
    BREAK           reduce using rule 98 (expression -> expression < expression .)
    LET             reduce using rule 98 (expression -> expression < expression .)
    WHILE           reduce using rule 98 (expression -> expression < expression .)
    NAMESPACE       reduce using rule 98 (expression -> expression < expression .)
    CLASS           reduce using rule 98 (expression -> expression < expression .)
    FUNC            reduce using rule 98 (expression -> expression < expression .)
    INIT            reduce using rule 98 (expression -> expression < expression .)
    PYTHON_CODE_EXEC reduce using rule 98 (expression -> expression < expression .)
    PYTHON_CODE     reduce using rule 98 (expression -> expression < expression .)
    IF              reduce using rule 98 (expression -> expression < expression .)
    #               reduce using rule 98 (expression -> expression < expression .)
    !               reduce using rule 98 (expression -> expression < expression .)
    STRING          reduce using rule 98 (expression -> expression < expression .)
    FALSE           reduce using rule 98 (expression -> expression < expression .)
    TRUE            reduce using rule 98 (expression -> expression < expression .)
    FLOAT           reduce using rule 98 (expression -> expression < expression .)
    INT             reduce using rule 98 (expression -> expression < expression .)
    NULL            reduce using rule 98 (expression -> expression < expression .)
    $end            reduce using rule 98 (expression -> expression < expression .)
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85


state 169

    (100) expression -> expression & expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               reduce using rule 100 (expression -> expression & expression .)
    [               reduce using rule 100 (expression -> expression & expression .)
    (               reduce using rule 100 (expression -> expression & expression .)
    &               reduce using rule 100 (expression -> expression & expression .)
    |               reduce using rule 100 (expression -> expression & expression .)
    :               reduce using rule 100 (expression -> expression & expression .)
    ,               reduce using rule 100 (expression -> expression & expression .)
    }               reduce using rule 100 (expression -> expression & expression .)
    ;               reduce using rule 100 (expression -> expression & expression .)
    IN              reduce using rule 100 (expression -> expression & expression .)
    )               reduce using rule 100 (expression -> expression & expression .)
    ]               reduce using rule 100 (expression -> expression & expression .)
    EQ_DIV          reduce using rule 100 (expression -> expression & expression .)
    EQ_MOD          reduce using rule 100 (expression -> expression & expression .)
    EQ_MUL          reduce using rule 100 (expression -> expression & expression .)
    EQ_SUB          reduce using rule 100 (expression -> expression & expression .)
    EQ_ADD          reduce using rule 100 (expression -> expression & expression .)
    =               reduce using rule 100 (expression -> expression & expression .)
    ?               reduce using rule 100 (expression -> expression & expression .)
    {               reduce using rule 100 (expression -> expression & expression .)
    SANDBOX         reduce using rule 100 (expression -> expression & expression .)
    LIMPORT         reduce using rule 100 (expression -> expression & expression .)
    .               reduce using rule 100 (expression -> expression & expression .)
    IMPORT          reduce using rule 100 (expression -> expression & expression .)
    ID              reduce using rule 100 (expression -> expression & expression .)
    RETURN          reduce using rule 100 (expression -> expression & expression .)
    DEL             reduce using rule 100 (expression -> expression & expression .)
    FOR             reduce using rule 100 (expression -> expression & expression .)
    DEBUG           reduce using rule 100 (expression -> expression & expression .)
    SKIP            reduce using rule 100 (expression -> expression & expression .)
    BREAK           reduce using rule 100 (expression -> expression & expression .)
    LET             reduce using rule 100 (expression -> expression & expression .)
    WHILE           reduce using rule 100 (expression -> expression & expression .)
    NAMESPACE       reduce using rule 100 (expression -> expression & expression .)
    CLASS           reduce using rule 100 (expression -> expression & expression .)
    FUNC            reduce using rule 100 (expression -> expression & expression .)
    INIT            reduce using rule 100 (expression -> expression & expression .)
    PYTHON_CODE_EXEC reduce using rule 100 (expression -> expression & expression .)
    PYTHON_CODE     reduce using rule 100 (expression -> expression & expression .)
    IF              reduce using rule 100 (expression -> expression & expression .)
    #               reduce using rule 100 (expression -> expression & expression .)
    !               reduce using rule 100 (expression -> expression & expression .)
    STRING          reduce using rule 100 (expression -> expression & expression .)
    FALSE           reduce using rule 100 (expression -> expression & expression .)
    TRUE            reduce using rule 100 (expression -> expression & expression .)
    FLOAT           reduce using rule 100 (expression -> expression & expression .)
    INT             reduce using rule 100 (expression -> expression & expression .)
    NULL            reduce using rule 100 (expression -> expression & expression .)
    $end            reduce using rule 100 (expression -> expression & expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85


state 170

    (101) expression -> expression | expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               reduce using rule 101 (expression -> expression | expression .)
    [               reduce using rule 101 (expression -> expression | expression .)
    (               reduce using rule 101 (expression -> expression | expression .)
    |               reduce using rule 101 (expression -> expression | expression .)
    :               reduce using rule 101 (expression -> expression | expression .)
    ,               reduce using rule 101 (expression -> expression | expression .)
    }               reduce using rule 101 (expression -> expression | expression .)
    ;               reduce using rule 101 (expression -> expression | expression .)
    IN              reduce using rule 101 (expression -> expression | expression .)
    )               reduce using rule 101 (expression -> expression | expression .)
    ]               reduce using rule 101 (expression -> expression | expression .)
    EQ_DIV          reduce using rule 101 (expression -> expression | expression .)
    EQ_MOD          reduce using rule 101 (expression -> expression | expression .)
    EQ_MUL          reduce using rule 101 (expression -> expression | expression .)
    EQ_SUB          reduce using rule 101 (expression -> expression | expression .)
    EQ_ADD          reduce using rule 101 (expression -> expression | expression .)
    =               reduce using rule 101 (expression -> expression | expression .)
    ?               reduce using rule 101 (expression -> expression | expression .)
    {               reduce using rule 101 (expression -> expression | expression .)
    SANDBOX         reduce using rule 101 (expression -> expression | expression .)
    LIMPORT         reduce using rule 101 (expression -> expression | expression .)
    .               reduce using rule 101 (expression -> expression | expression .)
    IMPORT          reduce using rule 101 (expression -> expression | expression .)
    ID              reduce using rule 101 (expression -> expression | expression .)
    RETURN          reduce using rule 101 (expression -> expression | expression .)
    DEL             reduce using rule 101 (expression -> expression | expression .)
    FOR             reduce using rule 101 (expression -> expression | expression .)
    DEBUG           reduce using rule 101 (expression -> expression | expression .)
    SKIP            reduce using rule 101 (expression -> expression | expression .)
    BREAK           reduce using rule 101 (expression -> expression | expression .)
    LET             reduce using rule 101 (expression -> expression | expression .)
    WHILE           reduce using rule 101 (expression -> expression | expression .)
    NAMESPACE       reduce using rule 101 (expression -> expression | expression .)
    CLASS           reduce using rule 101 (expression -> expression | expression .)
    FUNC            reduce using rule 101 (expression -> expression | expression .)
    INIT            reduce using rule 101 (expression -> expression | expression .)
    PYTHON_CODE_EXEC reduce using rule 101 (expression -> expression | expression .)
    PYTHON_CODE     reduce using rule 101 (expression -> expression | expression .)
    IF              reduce using rule 101 (expression -> expression | expression .)
    #               reduce using rule 101 (expression -> expression | expression .)
    !               reduce using rule 101 (expression -> expression | expression .)
    STRING          reduce using rule 101 (expression -> expression | expression .)
    FALSE           reduce using rule 101 (expression -> expression | expression .)
    TRUE            reduce using rule 101 (expression -> expression | expression .)
    FLOAT           reduce using rule 101 (expression -> expression | expression .)
    INT             reduce using rule 101 (expression -> expression | expression .)
    NULL            reduce using rule 101 (expression -> expression | expression .)
    $end            reduce using rule 101 (expression -> expression | expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85


state 171

    (102) expression -> expression EQ_GREATER expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    [               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    (               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    >               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    <               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    &               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    |               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    EQ_GREATER      reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    EQ_LESS         reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    NOT_EQEQ        reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    EQEQ            reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    :               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    ,               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    }               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    ;               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    IN              reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    )               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    ]               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    EQ_DIV          reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    EQ_MOD          reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    EQ_MUL          reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    EQ_SUB          reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    EQ_ADD          reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    =               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    ?               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    {               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    SANDBOX         reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    LIMPORT         reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    .               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    IMPORT          reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    ID              reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    RETURN          reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    DEL             reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    FOR             reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    DEBUG           reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    SKIP            reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    BREAK           reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    LET             reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    WHILE           reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    NAMESPACE       reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    CLASS           reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    FUNC            reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    INIT            reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    PYTHON_CODE_EXEC reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    PYTHON_CODE     reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    IF              reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    #               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    !               reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    STRING          reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    FALSE           reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    TRUE            reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    FLOAT           reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    INT             reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    NULL            reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    $end            reduce using rule 102 (expression -> expression EQ_GREATER expression .)
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85


state 172

    (103) expression -> expression EQ_LESS expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    [               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    (               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    >               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    <               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    &               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    |               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    EQ_GREATER      reduce using rule 103 (expression -> expression EQ_LESS expression .)
    EQ_LESS         reduce using rule 103 (expression -> expression EQ_LESS expression .)
    NOT_EQEQ        reduce using rule 103 (expression -> expression EQ_LESS expression .)
    EQEQ            reduce using rule 103 (expression -> expression EQ_LESS expression .)
    :               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    ,               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    }               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    ;               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    IN              reduce using rule 103 (expression -> expression EQ_LESS expression .)
    )               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    ]               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    EQ_DIV          reduce using rule 103 (expression -> expression EQ_LESS expression .)
    EQ_MOD          reduce using rule 103 (expression -> expression EQ_LESS expression .)
    EQ_MUL          reduce using rule 103 (expression -> expression EQ_LESS expression .)
    EQ_SUB          reduce using rule 103 (expression -> expression EQ_LESS expression .)
    EQ_ADD          reduce using rule 103 (expression -> expression EQ_LESS expression .)
    =               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    ?               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    {               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    SANDBOX         reduce using rule 103 (expression -> expression EQ_LESS expression .)
    LIMPORT         reduce using rule 103 (expression -> expression EQ_LESS expression .)
    .               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    IMPORT          reduce using rule 103 (expression -> expression EQ_LESS expression .)
    ID              reduce using rule 103 (expression -> expression EQ_LESS expression .)
    RETURN          reduce using rule 103 (expression -> expression EQ_LESS expression .)
    DEL             reduce using rule 103 (expression -> expression EQ_LESS expression .)
    FOR             reduce using rule 103 (expression -> expression EQ_LESS expression .)
    DEBUG           reduce using rule 103 (expression -> expression EQ_LESS expression .)
    SKIP            reduce using rule 103 (expression -> expression EQ_LESS expression .)
    BREAK           reduce using rule 103 (expression -> expression EQ_LESS expression .)
    LET             reduce using rule 103 (expression -> expression EQ_LESS expression .)
    WHILE           reduce using rule 103 (expression -> expression EQ_LESS expression .)
    NAMESPACE       reduce using rule 103 (expression -> expression EQ_LESS expression .)
    CLASS           reduce using rule 103 (expression -> expression EQ_LESS expression .)
    FUNC            reduce using rule 103 (expression -> expression EQ_LESS expression .)
    INIT            reduce using rule 103 (expression -> expression EQ_LESS expression .)
    PYTHON_CODE_EXEC reduce using rule 103 (expression -> expression EQ_LESS expression .)
    PYTHON_CODE     reduce using rule 103 (expression -> expression EQ_LESS expression .)
    IF              reduce using rule 103 (expression -> expression EQ_LESS expression .)
    #               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    !               reduce using rule 103 (expression -> expression EQ_LESS expression .)
    STRING          reduce using rule 103 (expression -> expression EQ_LESS expression .)
    FALSE           reduce using rule 103 (expression -> expression EQ_LESS expression .)
    TRUE            reduce using rule 103 (expression -> expression EQ_LESS expression .)
    FLOAT           reduce using rule 103 (expression -> expression EQ_LESS expression .)
    INT             reduce using rule 103 (expression -> expression EQ_LESS expression .)
    NULL            reduce using rule 103 (expression -> expression EQ_LESS expression .)
    $end            reduce using rule 103 (expression -> expression EQ_LESS expression .)
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85


state 173

    (104) expression -> expression NOT_EQEQ expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    [               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    (               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    &               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    |               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    NOT_EQEQ        reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    EQEQ            reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    :               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    ,               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    }               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    ;               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    IN              reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    )               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    ]               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    EQ_DIV          reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    EQ_MOD          reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    EQ_MUL          reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    EQ_SUB          reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    EQ_ADD          reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    =               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    ?               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    {               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    SANDBOX         reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    LIMPORT         reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    .               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    IMPORT          reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    ID              reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    RETURN          reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    DEL             reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    FOR             reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    DEBUG           reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    SKIP            reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    BREAK           reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    LET             reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    WHILE           reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    NAMESPACE       reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    CLASS           reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    FUNC            reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    INIT            reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    PYTHON_CODE_EXEC reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    PYTHON_CODE     reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    IF              reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    #               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    !               reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    STRING          reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    FALSE           reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    TRUE            reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    FLOAT           reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    INT             reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    NULL            reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    $end            reduce using rule 104 (expression -> expression NOT_EQEQ expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85


state 174

    (105) expression -> expression EQEQ expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               reduce using rule 105 (expression -> expression EQEQ expression .)
    [               reduce using rule 105 (expression -> expression EQEQ expression .)
    (               reduce using rule 105 (expression -> expression EQEQ expression .)
    &               reduce using rule 105 (expression -> expression EQEQ expression .)
    |               reduce using rule 105 (expression -> expression EQEQ expression .)
    NOT_EQEQ        reduce using rule 105 (expression -> expression EQEQ expression .)
    EQEQ            reduce using rule 105 (expression -> expression EQEQ expression .)
    :               reduce using rule 105 (expression -> expression EQEQ expression .)
    ,               reduce using rule 105 (expression -> expression EQEQ expression .)
    }               reduce using rule 105 (expression -> expression EQEQ expression .)
    ;               reduce using rule 105 (expression -> expression EQEQ expression .)
    IN              reduce using rule 105 (expression -> expression EQEQ expression .)
    )               reduce using rule 105 (expression -> expression EQEQ expression .)
    ]               reduce using rule 105 (expression -> expression EQEQ expression .)
    EQ_DIV          reduce using rule 105 (expression -> expression EQEQ expression .)
    EQ_MOD          reduce using rule 105 (expression -> expression EQEQ expression .)
    EQ_MUL          reduce using rule 105 (expression -> expression EQEQ expression .)
    EQ_SUB          reduce using rule 105 (expression -> expression EQEQ expression .)
    EQ_ADD          reduce using rule 105 (expression -> expression EQEQ expression .)
    =               reduce using rule 105 (expression -> expression EQEQ expression .)
    ?               reduce using rule 105 (expression -> expression EQEQ expression .)
    {               reduce using rule 105 (expression -> expression EQEQ expression .)
    SANDBOX         reduce using rule 105 (expression -> expression EQEQ expression .)
    LIMPORT         reduce using rule 105 (expression -> expression EQEQ expression .)
    .               reduce using rule 105 (expression -> expression EQEQ expression .)
    IMPORT          reduce using rule 105 (expression -> expression EQEQ expression .)
    ID              reduce using rule 105 (expression -> expression EQEQ expression .)
    RETURN          reduce using rule 105 (expression -> expression EQEQ expression .)
    DEL             reduce using rule 105 (expression -> expression EQEQ expression .)
    FOR             reduce using rule 105 (expression -> expression EQEQ expression .)
    DEBUG           reduce using rule 105 (expression -> expression EQEQ expression .)
    SKIP            reduce using rule 105 (expression -> expression EQEQ expression .)
    BREAK           reduce using rule 105 (expression -> expression EQEQ expression .)
    LET             reduce using rule 105 (expression -> expression EQEQ expression .)
    WHILE           reduce using rule 105 (expression -> expression EQEQ expression .)
    NAMESPACE       reduce using rule 105 (expression -> expression EQEQ expression .)
    CLASS           reduce using rule 105 (expression -> expression EQEQ expression .)
    FUNC            reduce using rule 105 (expression -> expression EQEQ expression .)
    INIT            reduce using rule 105 (expression -> expression EQEQ expression .)
    PYTHON_CODE_EXEC reduce using rule 105 (expression -> expression EQEQ expression .)
    PYTHON_CODE     reduce using rule 105 (expression -> expression EQEQ expression .)
    IF              reduce using rule 105 (expression -> expression EQEQ expression .)
    #               reduce using rule 105 (expression -> expression EQEQ expression .)
    !               reduce using rule 105 (expression -> expression EQEQ expression .)
    STRING          reduce using rule 105 (expression -> expression EQEQ expression .)
    FALSE           reduce using rule 105 (expression -> expression EQEQ expression .)
    TRUE            reduce using rule 105 (expression -> expression EQEQ expression .)
    FLOAT           reduce using rule 105 (expression -> expression EQEQ expression .)
    INT             reduce using rule 105 (expression -> expression EQEQ expression .)
    NULL            reduce using rule 105 (expression -> expression EQEQ expression .)
    $end            reduce using rule 105 (expression -> expression EQEQ expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85


state 175

    (106) expression -> expression % expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               reduce using rule 106 (expression -> expression % expression .)
    [               reduce using rule 106 (expression -> expression % expression .)
    (               reduce using rule 106 (expression -> expression % expression .)
    >               reduce using rule 106 (expression -> expression % expression .)
    <               reduce using rule 106 (expression -> expression % expression .)
    &               reduce using rule 106 (expression -> expression % expression .)
    |               reduce using rule 106 (expression -> expression % expression .)
    EQ_GREATER      reduce using rule 106 (expression -> expression % expression .)
    EQ_LESS         reduce using rule 106 (expression -> expression % expression .)
    NOT_EQEQ        reduce using rule 106 (expression -> expression % expression .)
    EQEQ            reduce using rule 106 (expression -> expression % expression .)
    %               reduce using rule 106 (expression -> expression % expression .)
    *               reduce using rule 106 (expression -> expression % expression .)
    /               reduce using rule 106 (expression -> expression % expression .)
    -               reduce using rule 106 (expression -> expression % expression .)
    +               reduce using rule 106 (expression -> expression % expression .)
    :               reduce using rule 106 (expression -> expression % expression .)
    ,               reduce using rule 106 (expression -> expression % expression .)
    }               reduce using rule 106 (expression -> expression % expression .)
    ;               reduce using rule 106 (expression -> expression % expression .)
    IN              reduce using rule 106 (expression -> expression % expression .)
    )               reduce using rule 106 (expression -> expression % expression .)
    ]               reduce using rule 106 (expression -> expression % expression .)
    EQ_DIV          reduce using rule 106 (expression -> expression % expression .)
    EQ_MOD          reduce using rule 106 (expression -> expression % expression .)
    EQ_MUL          reduce using rule 106 (expression -> expression % expression .)
    EQ_SUB          reduce using rule 106 (expression -> expression % expression .)
    EQ_ADD          reduce using rule 106 (expression -> expression % expression .)
    =               reduce using rule 106 (expression -> expression % expression .)
    ?               reduce using rule 106 (expression -> expression % expression .)
    {               reduce using rule 106 (expression -> expression % expression .)
    SANDBOX         reduce using rule 106 (expression -> expression % expression .)
    LIMPORT         reduce using rule 106 (expression -> expression % expression .)
    .               reduce using rule 106 (expression -> expression % expression .)
    IMPORT          reduce using rule 106 (expression -> expression % expression .)
    ID              reduce using rule 106 (expression -> expression % expression .)
    RETURN          reduce using rule 106 (expression -> expression % expression .)
    DEL             reduce using rule 106 (expression -> expression % expression .)
    FOR             reduce using rule 106 (expression -> expression % expression .)
    DEBUG           reduce using rule 106 (expression -> expression % expression .)
    SKIP            reduce using rule 106 (expression -> expression % expression .)
    BREAK           reduce using rule 106 (expression -> expression % expression .)
    LET             reduce using rule 106 (expression -> expression % expression .)
    WHILE           reduce using rule 106 (expression -> expression % expression .)
    NAMESPACE       reduce using rule 106 (expression -> expression % expression .)
    CLASS           reduce using rule 106 (expression -> expression % expression .)
    FUNC            reduce using rule 106 (expression -> expression % expression .)
    INIT            reduce using rule 106 (expression -> expression % expression .)
    PYTHON_CODE_EXEC reduce using rule 106 (expression -> expression % expression .)
    PYTHON_CODE     reduce using rule 106 (expression -> expression % expression .)
    IF              reduce using rule 106 (expression -> expression % expression .)
    #               reduce using rule 106 (expression -> expression % expression .)
    !               reduce using rule 106 (expression -> expression % expression .)
    STRING          reduce using rule 106 (expression -> expression % expression .)
    FALSE           reduce using rule 106 (expression -> expression % expression .)
    TRUE            reduce using rule 106 (expression -> expression % expression .)
    FLOAT           reduce using rule 106 (expression -> expression % expression .)
    INT             reduce using rule 106 (expression -> expression % expression .)
    NULL            reduce using rule 106 (expression -> expression % expression .)
    $end            reduce using rule 106 (expression -> expression % expression .)
    COLON_COLON     shift and go to state 85


state 176

    (107) expression -> expression * expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               reduce using rule 107 (expression -> expression * expression .)
    [               reduce using rule 107 (expression -> expression * expression .)
    (               reduce using rule 107 (expression -> expression * expression .)
    >               reduce using rule 107 (expression -> expression * expression .)
    <               reduce using rule 107 (expression -> expression * expression .)
    &               reduce using rule 107 (expression -> expression * expression .)
    |               reduce using rule 107 (expression -> expression * expression .)
    EQ_GREATER      reduce using rule 107 (expression -> expression * expression .)
    EQ_LESS         reduce using rule 107 (expression -> expression * expression .)
    NOT_EQEQ        reduce using rule 107 (expression -> expression * expression .)
    EQEQ            reduce using rule 107 (expression -> expression * expression .)
    %               reduce using rule 107 (expression -> expression * expression .)
    *               reduce using rule 107 (expression -> expression * expression .)
    /               reduce using rule 107 (expression -> expression * expression .)
    -               reduce using rule 107 (expression -> expression * expression .)
    +               reduce using rule 107 (expression -> expression * expression .)
    :               reduce using rule 107 (expression -> expression * expression .)
    ,               reduce using rule 107 (expression -> expression * expression .)
    }               reduce using rule 107 (expression -> expression * expression .)
    ;               reduce using rule 107 (expression -> expression * expression .)
    IN              reduce using rule 107 (expression -> expression * expression .)
    )               reduce using rule 107 (expression -> expression * expression .)
    ]               reduce using rule 107 (expression -> expression * expression .)
    EQ_DIV          reduce using rule 107 (expression -> expression * expression .)
    EQ_MOD          reduce using rule 107 (expression -> expression * expression .)
    EQ_MUL          reduce using rule 107 (expression -> expression * expression .)
    EQ_SUB          reduce using rule 107 (expression -> expression * expression .)
    EQ_ADD          reduce using rule 107 (expression -> expression * expression .)
    =               reduce using rule 107 (expression -> expression * expression .)
    ?               reduce using rule 107 (expression -> expression * expression .)
    {               reduce using rule 107 (expression -> expression * expression .)
    SANDBOX         reduce using rule 107 (expression -> expression * expression .)
    LIMPORT         reduce using rule 107 (expression -> expression * expression .)
    .               reduce using rule 107 (expression -> expression * expression .)
    IMPORT          reduce using rule 107 (expression -> expression * expression .)
    ID              reduce using rule 107 (expression -> expression * expression .)
    RETURN          reduce using rule 107 (expression -> expression * expression .)
    DEL             reduce using rule 107 (expression -> expression * expression .)
    FOR             reduce using rule 107 (expression -> expression * expression .)
    DEBUG           reduce using rule 107 (expression -> expression * expression .)
    SKIP            reduce using rule 107 (expression -> expression * expression .)
    BREAK           reduce using rule 107 (expression -> expression * expression .)
    LET             reduce using rule 107 (expression -> expression * expression .)
    WHILE           reduce using rule 107 (expression -> expression * expression .)
    NAMESPACE       reduce using rule 107 (expression -> expression * expression .)
    CLASS           reduce using rule 107 (expression -> expression * expression .)
    FUNC            reduce using rule 107 (expression -> expression * expression .)
    INIT            reduce using rule 107 (expression -> expression * expression .)
    PYTHON_CODE_EXEC reduce using rule 107 (expression -> expression * expression .)
    PYTHON_CODE     reduce using rule 107 (expression -> expression * expression .)
    IF              reduce using rule 107 (expression -> expression * expression .)
    #               reduce using rule 107 (expression -> expression * expression .)
    !               reduce using rule 107 (expression -> expression * expression .)
    STRING          reduce using rule 107 (expression -> expression * expression .)
    FALSE           reduce using rule 107 (expression -> expression * expression .)
    TRUE            reduce using rule 107 (expression -> expression * expression .)
    FLOAT           reduce using rule 107 (expression -> expression * expression .)
    INT             reduce using rule 107 (expression -> expression * expression .)
    NULL            reduce using rule 107 (expression -> expression * expression .)
    $end            reduce using rule 107 (expression -> expression * expression .)
    COLON_COLON     shift and go to state 85


state 177

    (108) expression -> expression / expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               reduce using rule 108 (expression -> expression / expression .)
    [               reduce using rule 108 (expression -> expression / expression .)
    (               reduce using rule 108 (expression -> expression / expression .)
    >               reduce using rule 108 (expression -> expression / expression .)
    <               reduce using rule 108 (expression -> expression / expression .)
    &               reduce using rule 108 (expression -> expression / expression .)
    |               reduce using rule 108 (expression -> expression / expression .)
    EQ_GREATER      reduce using rule 108 (expression -> expression / expression .)
    EQ_LESS         reduce using rule 108 (expression -> expression / expression .)
    NOT_EQEQ        reduce using rule 108 (expression -> expression / expression .)
    EQEQ            reduce using rule 108 (expression -> expression / expression .)
    %               reduce using rule 108 (expression -> expression / expression .)
    *               reduce using rule 108 (expression -> expression / expression .)
    /               reduce using rule 108 (expression -> expression / expression .)
    -               reduce using rule 108 (expression -> expression / expression .)
    +               reduce using rule 108 (expression -> expression / expression .)
    :               reduce using rule 108 (expression -> expression / expression .)
    ,               reduce using rule 108 (expression -> expression / expression .)
    }               reduce using rule 108 (expression -> expression / expression .)
    ;               reduce using rule 108 (expression -> expression / expression .)
    IN              reduce using rule 108 (expression -> expression / expression .)
    )               reduce using rule 108 (expression -> expression / expression .)
    ]               reduce using rule 108 (expression -> expression / expression .)
    EQ_DIV          reduce using rule 108 (expression -> expression / expression .)
    EQ_MOD          reduce using rule 108 (expression -> expression / expression .)
    EQ_MUL          reduce using rule 108 (expression -> expression / expression .)
    EQ_SUB          reduce using rule 108 (expression -> expression / expression .)
    EQ_ADD          reduce using rule 108 (expression -> expression / expression .)
    =               reduce using rule 108 (expression -> expression / expression .)
    ?               reduce using rule 108 (expression -> expression / expression .)
    {               reduce using rule 108 (expression -> expression / expression .)
    SANDBOX         reduce using rule 108 (expression -> expression / expression .)
    LIMPORT         reduce using rule 108 (expression -> expression / expression .)
    .               reduce using rule 108 (expression -> expression / expression .)
    IMPORT          reduce using rule 108 (expression -> expression / expression .)
    ID              reduce using rule 108 (expression -> expression / expression .)
    RETURN          reduce using rule 108 (expression -> expression / expression .)
    DEL             reduce using rule 108 (expression -> expression / expression .)
    FOR             reduce using rule 108 (expression -> expression / expression .)
    DEBUG           reduce using rule 108 (expression -> expression / expression .)
    SKIP            reduce using rule 108 (expression -> expression / expression .)
    BREAK           reduce using rule 108 (expression -> expression / expression .)
    LET             reduce using rule 108 (expression -> expression / expression .)
    WHILE           reduce using rule 108 (expression -> expression / expression .)
    NAMESPACE       reduce using rule 108 (expression -> expression / expression .)
    CLASS           reduce using rule 108 (expression -> expression / expression .)
    FUNC            reduce using rule 108 (expression -> expression / expression .)
    INIT            reduce using rule 108 (expression -> expression / expression .)
    PYTHON_CODE_EXEC reduce using rule 108 (expression -> expression / expression .)
    PYTHON_CODE     reduce using rule 108 (expression -> expression / expression .)
    IF              reduce using rule 108 (expression -> expression / expression .)
    #               reduce using rule 108 (expression -> expression / expression .)
    !               reduce using rule 108 (expression -> expression / expression .)
    STRING          reduce using rule 108 (expression -> expression / expression .)
    FALSE           reduce using rule 108 (expression -> expression / expression .)
    TRUE            reduce using rule 108 (expression -> expression / expression .)
    FLOAT           reduce using rule 108 (expression -> expression / expression .)
    INT             reduce using rule 108 (expression -> expression / expression .)
    NULL            reduce using rule 108 (expression -> expression / expression .)
    $end            reduce using rule 108 (expression -> expression / expression .)
    COLON_COLON     shift and go to state 85


state 178

    (109) expression -> expression - expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               reduce using rule 109 (expression -> expression - expression .)
    [               reduce using rule 109 (expression -> expression - expression .)
    (               reduce using rule 109 (expression -> expression - expression .)
    >               reduce using rule 109 (expression -> expression - expression .)
    <               reduce using rule 109 (expression -> expression - expression .)
    &               reduce using rule 109 (expression -> expression - expression .)
    |               reduce using rule 109 (expression -> expression - expression .)
    EQ_GREATER      reduce using rule 109 (expression -> expression - expression .)
    EQ_LESS         reduce using rule 109 (expression -> expression - expression .)
    NOT_EQEQ        reduce using rule 109 (expression -> expression - expression .)
    EQEQ            reduce using rule 109 (expression -> expression - expression .)
    -               reduce using rule 109 (expression -> expression - expression .)
    +               reduce using rule 109 (expression -> expression - expression .)
    :               reduce using rule 109 (expression -> expression - expression .)
    ,               reduce using rule 109 (expression -> expression - expression .)
    }               reduce using rule 109 (expression -> expression - expression .)
    ;               reduce using rule 109 (expression -> expression - expression .)
    IN              reduce using rule 109 (expression -> expression - expression .)
    )               reduce using rule 109 (expression -> expression - expression .)
    ]               reduce using rule 109 (expression -> expression - expression .)
    EQ_DIV          reduce using rule 109 (expression -> expression - expression .)
    EQ_MOD          reduce using rule 109 (expression -> expression - expression .)
    EQ_MUL          reduce using rule 109 (expression -> expression - expression .)
    EQ_SUB          reduce using rule 109 (expression -> expression - expression .)
    EQ_ADD          reduce using rule 109 (expression -> expression - expression .)
    =               reduce using rule 109 (expression -> expression - expression .)
    ?               reduce using rule 109 (expression -> expression - expression .)
    {               reduce using rule 109 (expression -> expression - expression .)
    SANDBOX         reduce using rule 109 (expression -> expression - expression .)
    LIMPORT         reduce using rule 109 (expression -> expression - expression .)
    .               reduce using rule 109 (expression -> expression - expression .)
    IMPORT          reduce using rule 109 (expression -> expression - expression .)
    ID              reduce using rule 109 (expression -> expression - expression .)
    RETURN          reduce using rule 109 (expression -> expression - expression .)
    DEL             reduce using rule 109 (expression -> expression - expression .)
    FOR             reduce using rule 109 (expression -> expression - expression .)
    DEBUG           reduce using rule 109 (expression -> expression - expression .)
    SKIP            reduce using rule 109 (expression -> expression - expression .)
    BREAK           reduce using rule 109 (expression -> expression - expression .)
    LET             reduce using rule 109 (expression -> expression - expression .)
    WHILE           reduce using rule 109 (expression -> expression - expression .)
    NAMESPACE       reduce using rule 109 (expression -> expression - expression .)
    CLASS           reduce using rule 109 (expression -> expression - expression .)
    FUNC            reduce using rule 109 (expression -> expression - expression .)
    INIT            reduce using rule 109 (expression -> expression - expression .)
    PYTHON_CODE_EXEC reduce using rule 109 (expression -> expression - expression .)
    PYTHON_CODE     reduce using rule 109 (expression -> expression - expression .)
    IF              reduce using rule 109 (expression -> expression - expression .)
    #               reduce using rule 109 (expression -> expression - expression .)
    !               reduce using rule 109 (expression -> expression - expression .)
    STRING          reduce using rule 109 (expression -> expression - expression .)
    FALSE           reduce using rule 109 (expression -> expression - expression .)
    TRUE            reduce using rule 109 (expression -> expression - expression .)
    FLOAT           reduce using rule 109 (expression -> expression - expression .)
    INT             reduce using rule 109 (expression -> expression - expression .)
    NULL            reduce using rule 109 (expression -> expression - expression .)
    $end            reduce using rule 109 (expression -> expression - expression .)
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    COLON_COLON     shift and go to state 85


state 179

    (110) expression -> expression + expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ^               reduce using rule 110 (expression -> expression + expression .)
    [               reduce using rule 110 (expression -> expression + expression .)
    (               reduce using rule 110 (expression -> expression + expression .)
    >               reduce using rule 110 (expression -> expression + expression .)
    <               reduce using rule 110 (expression -> expression + expression .)
    &               reduce using rule 110 (expression -> expression + expression .)
    |               reduce using rule 110 (expression -> expression + expression .)
    EQ_GREATER      reduce using rule 110 (expression -> expression + expression .)
    EQ_LESS         reduce using rule 110 (expression -> expression + expression .)
    NOT_EQEQ        reduce using rule 110 (expression -> expression + expression .)
    EQEQ            reduce using rule 110 (expression -> expression + expression .)
    -               reduce using rule 110 (expression -> expression + expression .)
    +               reduce using rule 110 (expression -> expression + expression .)
    :               reduce using rule 110 (expression -> expression + expression .)
    ,               reduce using rule 110 (expression -> expression + expression .)
    }               reduce using rule 110 (expression -> expression + expression .)
    ;               reduce using rule 110 (expression -> expression + expression .)
    IN              reduce using rule 110 (expression -> expression + expression .)
    )               reduce using rule 110 (expression -> expression + expression .)
    ]               reduce using rule 110 (expression -> expression + expression .)
    EQ_DIV          reduce using rule 110 (expression -> expression + expression .)
    EQ_MOD          reduce using rule 110 (expression -> expression + expression .)
    EQ_MUL          reduce using rule 110 (expression -> expression + expression .)
    EQ_SUB          reduce using rule 110 (expression -> expression + expression .)
    EQ_ADD          reduce using rule 110 (expression -> expression + expression .)
    =               reduce using rule 110 (expression -> expression + expression .)
    ?               reduce using rule 110 (expression -> expression + expression .)
    {               reduce using rule 110 (expression -> expression + expression .)
    SANDBOX         reduce using rule 110 (expression -> expression + expression .)
    LIMPORT         reduce using rule 110 (expression -> expression + expression .)
    .               reduce using rule 110 (expression -> expression + expression .)
    IMPORT          reduce using rule 110 (expression -> expression + expression .)
    ID              reduce using rule 110 (expression -> expression + expression .)
    RETURN          reduce using rule 110 (expression -> expression + expression .)
    DEL             reduce using rule 110 (expression -> expression + expression .)
    FOR             reduce using rule 110 (expression -> expression + expression .)
    DEBUG           reduce using rule 110 (expression -> expression + expression .)
    SKIP            reduce using rule 110 (expression -> expression + expression .)
    BREAK           reduce using rule 110 (expression -> expression + expression .)
    LET             reduce using rule 110 (expression -> expression + expression .)
    WHILE           reduce using rule 110 (expression -> expression + expression .)
    NAMESPACE       reduce using rule 110 (expression -> expression + expression .)
    CLASS           reduce using rule 110 (expression -> expression + expression .)
    FUNC            reduce using rule 110 (expression -> expression + expression .)
    INIT            reduce using rule 110 (expression -> expression + expression .)
    PYTHON_CODE_EXEC reduce using rule 110 (expression -> expression + expression .)
    PYTHON_CODE     reduce using rule 110 (expression -> expression + expression .)
    IF              reduce using rule 110 (expression -> expression + expression .)
    #               reduce using rule 110 (expression -> expression + expression .)
    !               reduce using rule 110 (expression -> expression + expression .)
    STRING          reduce using rule 110 (expression -> expression + expression .)
    FALSE           reduce using rule 110 (expression -> expression + expression .)
    TRUE            reduce using rule 110 (expression -> expression + expression .)
    FLOAT           reduce using rule 110 (expression -> expression + expression .)
    INT             reduce using rule 110 (expression -> expression + expression .)
    NULL            reduce using rule 110 (expression -> expression + expression .)
    $end            reduce using rule 110 (expression -> expression + expression .)
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    COLON_COLON     shift and go to state 85


state 180

    (79) import_statement -> . SELFISH ; .
    SANDBOX         reduce using rule 79 (import_statement -> . SELFISH ; .)
    LIMPORT         reduce using rule 79 (import_statement -> . SELFISH ; .)
    .               reduce using rule 79 (import_statement -> . SELFISH ; .)
    IMPORT          reduce using rule 79 (import_statement -> . SELFISH ; .)
    ID              reduce using rule 79 (import_statement -> . SELFISH ; .)
    RETURN          reduce using rule 79 (import_statement -> . SELFISH ; .)
    DEL             reduce using rule 79 (import_statement -> . SELFISH ; .)
    FOR             reduce using rule 79 (import_statement -> . SELFISH ; .)
    DEBUG           reduce using rule 79 (import_statement -> . SELFISH ; .)
    SKIP            reduce using rule 79 (import_statement -> . SELFISH ; .)
    BREAK           reduce using rule 79 (import_statement -> . SELFISH ; .)
    LET             reduce using rule 79 (import_statement -> . SELFISH ; .)
    WHILE           reduce using rule 79 (import_statement -> . SELFISH ; .)
    NAMESPACE       reduce using rule 79 (import_statement -> . SELFISH ; .)
    CLASS           reduce using rule 79 (import_statement -> . SELFISH ; .)
    FUNC            reduce using rule 79 (import_statement -> . SELFISH ; .)
    INIT            reduce using rule 79 (import_statement -> . SELFISH ; .)
    PYTHON_CODE_EXEC reduce using rule 79 (import_statement -> . SELFISH ; .)
    PYTHON_CODE     reduce using rule 79 (import_statement -> . SELFISH ; .)
    IF              reduce using rule 79 (import_statement -> . SELFISH ; .)
    <               reduce using rule 79 (import_statement -> . SELFISH ; .)
    #               reduce using rule 79 (import_statement -> . SELFISH ; .)
    (               reduce using rule 79 (import_statement -> . SELFISH ; .)
    !               reduce using rule 79 (import_statement -> . SELFISH ; .)
    +               reduce using rule 79 (import_statement -> . SELFISH ; .)
    -               reduce using rule 79 (import_statement -> . SELFISH ; .)
    *               reduce using rule 79 (import_statement -> . SELFISH ; .)
    &               reduce using rule 79 (import_statement -> . SELFISH ; .)
    {               reduce using rule 79 (import_statement -> . SELFISH ; .)
    [               reduce using rule 79 (import_statement -> . SELFISH ; .)
    STRING          reduce using rule 79 (import_statement -> . SELFISH ; .)
    FALSE           reduce using rule 79 (import_statement -> . SELFISH ; .)
    TRUE            reduce using rule 79 (import_statement -> . SELFISH ; .)
    FLOAT           reduce using rule 79 (import_statement -> . SELFISH ; .)
    INT             reduce using rule 79 (import_statement -> . SELFISH ; .)
    NULL            reduce using rule 79 (import_statement -> . SELFISH ; .)
    $end            reduce using rule 79 (import_statement -> . SELFISH ; .)
    }               reduce using rule 79 (import_statement -> . SELFISH ; .)


state 181

    (80) import_statement -> . GLOBAL ; .
    SANDBOX         reduce using rule 80 (import_statement -> . GLOBAL ; .)
    LIMPORT         reduce using rule 80 (import_statement -> . GLOBAL ; .)
    .               reduce using rule 80 (import_statement -> . GLOBAL ; .)
    IMPORT          reduce using rule 80 (import_statement -> . GLOBAL ; .)
    ID              reduce using rule 80 (import_statement -> . GLOBAL ; .)
    RETURN          reduce using rule 80 (import_statement -> . GLOBAL ; .)
    DEL             reduce using rule 80 (import_statement -> . GLOBAL ; .)
    FOR             reduce using rule 80 (import_statement -> . GLOBAL ; .)
    DEBUG           reduce using rule 80 (import_statement -> . GLOBAL ; .)
    SKIP            reduce using rule 80 (import_statement -> . GLOBAL ; .)
    BREAK           reduce using rule 80 (import_statement -> . GLOBAL ; .)
    LET             reduce using rule 80 (import_statement -> . GLOBAL ; .)
    WHILE           reduce using rule 80 (import_statement -> . GLOBAL ; .)
    NAMESPACE       reduce using rule 80 (import_statement -> . GLOBAL ; .)
    CLASS           reduce using rule 80 (import_statement -> . GLOBAL ; .)
    FUNC            reduce using rule 80 (import_statement -> . GLOBAL ; .)
    INIT            reduce using rule 80 (import_statement -> . GLOBAL ; .)
    PYTHON_CODE_EXEC reduce using rule 80 (import_statement -> . GLOBAL ; .)
    PYTHON_CODE     reduce using rule 80 (import_statement -> . GLOBAL ; .)
    IF              reduce using rule 80 (import_statement -> . GLOBAL ; .)
    <               reduce using rule 80 (import_statement -> . GLOBAL ; .)
    #               reduce using rule 80 (import_statement -> . GLOBAL ; .)
    (               reduce using rule 80 (import_statement -> . GLOBAL ; .)
    !               reduce using rule 80 (import_statement -> . GLOBAL ; .)
    +               reduce using rule 80 (import_statement -> . GLOBAL ; .)
    -               reduce using rule 80 (import_statement -> . GLOBAL ; .)
    *               reduce using rule 80 (import_statement -> . GLOBAL ; .)
    &               reduce using rule 80 (import_statement -> . GLOBAL ; .)
    {               reduce using rule 80 (import_statement -> . GLOBAL ; .)
    [               reduce using rule 80 (import_statement -> . GLOBAL ; .)
    STRING          reduce using rule 80 (import_statement -> . GLOBAL ; .)
    FALSE           reduce using rule 80 (import_statement -> . GLOBAL ; .)
    TRUE            reduce using rule 80 (import_statement -> . GLOBAL ; .)
    FLOAT           reduce using rule 80 (import_statement -> . GLOBAL ; .)
    INT             reduce using rule 80 (import_statement -> . GLOBAL ; .)
    NULL            reduce using rule 80 (import_statement -> . GLOBAL ; .)
    $end            reduce using rule 80 (import_statement -> . GLOBAL ; .)
    }               reduce using rule 80 (import_statement -> . GLOBAL ; .)


state 182

    (27) function_call -> . ENV FROM . ID { program }
    ID              shift and go to state 236


state 183

    (28) function_call -> . ENV { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    program                        shift and go to state 237
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 184

    (81) import_statement -> IMPORT expression ; .
    SANDBOX         reduce using rule 81 (import_statement -> IMPORT expression ; .)
    LIMPORT         reduce using rule 81 (import_statement -> IMPORT expression ; .)
    .               reduce using rule 81 (import_statement -> IMPORT expression ; .)
    IMPORT          reduce using rule 81 (import_statement -> IMPORT expression ; .)
    ID              reduce using rule 81 (import_statement -> IMPORT expression ; .)
    RETURN          reduce using rule 81 (import_statement -> IMPORT expression ; .)
    DEL             reduce using rule 81 (import_statement -> IMPORT expression ; .)
    FOR             reduce using rule 81 (import_statement -> IMPORT expression ; .)
    DEBUG           reduce using rule 81 (import_statement -> IMPORT expression ; .)
    SKIP            reduce using rule 81 (import_statement -> IMPORT expression ; .)
    BREAK           reduce using rule 81 (import_statement -> IMPORT expression ; .)
    LET             reduce using rule 81 (import_statement -> IMPORT expression ; .)
    WHILE           reduce using rule 81 (import_statement -> IMPORT expression ; .)
    NAMESPACE       reduce using rule 81 (import_statement -> IMPORT expression ; .)
    CLASS           reduce using rule 81 (import_statement -> IMPORT expression ; .)
    FUNC            reduce using rule 81 (import_statement -> IMPORT expression ; .)
    INIT            reduce using rule 81 (import_statement -> IMPORT expression ; .)
    PYTHON_CODE_EXEC reduce using rule 81 (import_statement -> IMPORT expression ; .)
    PYTHON_CODE     reduce using rule 81 (import_statement -> IMPORT expression ; .)
    IF              reduce using rule 81 (import_statement -> IMPORT expression ; .)
    <               reduce using rule 81 (import_statement -> IMPORT expression ; .)
    #               reduce using rule 81 (import_statement -> IMPORT expression ; .)
    (               reduce using rule 81 (import_statement -> IMPORT expression ; .)
    !               reduce using rule 81 (import_statement -> IMPORT expression ; .)
    +               reduce using rule 81 (import_statement -> IMPORT expression ; .)
    -               reduce using rule 81 (import_statement -> IMPORT expression ; .)
    *               reduce using rule 81 (import_statement -> IMPORT expression ; .)
    &               reduce using rule 81 (import_statement -> IMPORT expression ; .)
    {               reduce using rule 81 (import_statement -> IMPORT expression ; .)
    [               reduce using rule 81 (import_statement -> IMPORT expression ; .)
    STRING          reduce using rule 81 (import_statement -> IMPORT expression ; .)
    FALSE           reduce using rule 81 (import_statement -> IMPORT expression ; .)
    TRUE            reduce using rule 81 (import_statement -> IMPORT expression ; .)
    FLOAT           reduce using rule 81 (import_statement -> IMPORT expression ; .)
    INT             reduce using rule 81 (import_statement -> IMPORT expression ; .)
    NULL            reduce using rule 81 (import_statement -> IMPORT expression ; .)
    $end            reduce using rule 81 (import_statement -> IMPORT expression ; .)
    }               reduce using rule 81 (import_statement -> IMPORT expression ; .)


state 185

    (58) variable_operation -> get_index EQ_DIV expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 238
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 186

    (60) variable_operation -> get_index EQ_MOD expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 239
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 187

    (62) variable_operation -> get_index EQ_MUL expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 240
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 188

    (64) variable_operation -> get_index EQ_SUB expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 241
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 189

    (66) variable_operation -> get_index EQ_ADD expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 242
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 190

    (59) variable_operation -> ID EQ_DIV expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 243
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 191

    (61) variable_operation -> ID EQ_MOD expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 244
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 192

    (63) variable_operation -> ID EQ_MUL expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 245
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 193

    (65) variable_operation -> ID EQ_SUB expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 246
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 194

    (67) variable_operation -> ID EQ_ADD expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 247
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 195

    (31) function_call -> ID TARROW ID . ( function_arguments )
    (32) function_call -> ID TARROW ID .
  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 248
    ;               reduce using rule 32 (function_call -> ID TARROW ID .)
    ^               reduce using rule 32 (function_call -> ID TARROW ID .)
    [               reduce using rule 32 (function_call -> ID TARROW ID .)
    COLON_COLON     reduce using rule 32 (function_call -> ID TARROW ID .)
    >               reduce using rule 32 (function_call -> ID TARROW ID .)
    <               reduce using rule 32 (function_call -> ID TARROW ID .)
    &               reduce using rule 32 (function_call -> ID TARROW ID .)
    |               reduce using rule 32 (function_call -> ID TARROW ID .)
    EQ_GREATER      reduce using rule 32 (function_call -> ID TARROW ID .)
    EQ_LESS         reduce using rule 32 (function_call -> ID TARROW ID .)
    NOT_EQEQ        reduce using rule 32 (function_call -> ID TARROW ID .)
    EQEQ            reduce using rule 32 (function_call -> ID TARROW ID .)
    %               reduce using rule 32 (function_call -> ID TARROW ID .)
    *               reduce using rule 32 (function_call -> ID TARROW ID .)
    /               reduce using rule 32 (function_call -> ID TARROW ID .)
    -               reduce using rule 32 (function_call -> ID TARROW ID .)
    +               reduce using rule 32 (function_call -> ID TARROW ID .)
    :               reduce using rule 32 (function_call -> ID TARROW ID .)
    ,               reduce using rule 32 (function_call -> ID TARROW ID .)
    }               reduce using rule 32 (function_call -> ID TARROW ID .)
    IN              reduce using rule 32 (function_call -> ID TARROW ID .)
    )               reduce using rule 32 (function_call -> ID TARROW ID .)
    ]               reduce using rule 32 (function_call -> ID TARROW ID .)
    EQ_DIV          reduce using rule 32 (function_call -> ID TARROW ID .)
    EQ_MOD          reduce using rule 32 (function_call -> ID TARROW ID .)
    EQ_MUL          reduce using rule 32 (function_call -> ID TARROW ID .)
    EQ_SUB          reduce using rule 32 (function_call -> ID TARROW ID .)
    EQ_ADD          reduce using rule 32 (function_call -> ID TARROW ID .)
    =               reduce using rule 32 (function_call -> ID TARROW ID .)
    ?               reduce using rule 32 (function_call -> ID TARROW ID .)
    {               reduce using rule 32 (function_call -> ID TARROW ID .)
    SANDBOX         reduce using rule 32 (function_call -> ID TARROW ID .)
    LIMPORT         reduce using rule 32 (function_call -> ID TARROW ID .)
    .               reduce using rule 32 (function_call -> ID TARROW ID .)
    IMPORT          reduce using rule 32 (function_call -> ID TARROW ID .)
    ID              reduce using rule 32 (function_call -> ID TARROW ID .)
    RETURN          reduce using rule 32 (function_call -> ID TARROW ID .)
    DEL             reduce using rule 32 (function_call -> ID TARROW ID .)
    FOR             reduce using rule 32 (function_call -> ID TARROW ID .)
    DEBUG           reduce using rule 32 (function_call -> ID TARROW ID .)
    SKIP            reduce using rule 32 (function_call -> ID TARROW ID .)
    BREAK           reduce using rule 32 (function_call -> ID TARROW ID .)
    LET             reduce using rule 32 (function_call -> ID TARROW ID .)
    WHILE           reduce using rule 32 (function_call -> ID TARROW ID .)
    NAMESPACE       reduce using rule 32 (function_call -> ID TARROW ID .)
    CLASS           reduce using rule 32 (function_call -> ID TARROW ID .)
    FUNC            reduce using rule 32 (function_call -> ID TARROW ID .)
    INIT            reduce using rule 32 (function_call -> ID TARROW ID .)
    PYTHON_CODE_EXEC reduce using rule 32 (function_call -> ID TARROW ID .)
    PYTHON_CODE     reduce using rule 32 (function_call -> ID TARROW ID .)
    IF              reduce using rule 32 (function_call -> ID TARROW ID .)
    #               reduce using rule 32 (function_call -> ID TARROW ID .)
    !               reduce using rule 32 (function_call -> ID TARROW ID .)
    STRING          reduce using rule 32 (function_call -> ID TARROW ID .)
    FALSE           reduce using rule 32 (function_call -> ID TARROW ID .)
    TRUE            reduce using rule 32 (function_call -> ID TARROW ID .)
    FLOAT           reduce using rule 32 (function_call -> ID TARROW ID .)
    INT             reduce using rule 32 (function_call -> ID TARROW ID .)
    NULL            reduce using rule 32 (function_call -> ID TARROW ID .)
    $end            reduce using rule 32 (function_call -> ID TARROW ID .)


state 196

    (115) expression -> ID OF ID .
    ^               reduce using rule 115 (expression -> ID OF ID .)
    [               reduce using rule 115 (expression -> ID OF ID .)
    COLON_COLON     reduce using rule 115 (expression -> ID OF ID .)
    (               reduce using rule 115 (expression -> ID OF ID .)
    >               reduce using rule 115 (expression -> ID OF ID .)
    <               reduce using rule 115 (expression -> ID OF ID .)
    &               reduce using rule 115 (expression -> ID OF ID .)
    |               reduce using rule 115 (expression -> ID OF ID .)
    EQ_GREATER      reduce using rule 115 (expression -> ID OF ID .)
    EQ_LESS         reduce using rule 115 (expression -> ID OF ID .)
    NOT_EQEQ        reduce using rule 115 (expression -> ID OF ID .)
    EQEQ            reduce using rule 115 (expression -> ID OF ID .)
    %               reduce using rule 115 (expression -> ID OF ID .)
    *               reduce using rule 115 (expression -> ID OF ID .)
    /               reduce using rule 115 (expression -> ID OF ID .)
    -               reduce using rule 115 (expression -> ID OF ID .)
    +               reduce using rule 115 (expression -> ID OF ID .)
    :               reduce using rule 115 (expression -> ID OF ID .)
    ,               reduce using rule 115 (expression -> ID OF ID .)
    }               reduce using rule 115 (expression -> ID OF ID .)
    ;               reduce using rule 115 (expression -> ID OF ID .)
    IN              reduce using rule 115 (expression -> ID OF ID .)
    )               reduce using rule 115 (expression -> ID OF ID .)
    ]               reduce using rule 115 (expression -> ID OF ID .)
    EQ_DIV          reduce using rule 115 (expression -> ID OF ID .)
    EQ_MOD          reduce using rule 115 (expression -> ID OF ID .)
    EQ_MUL          reduce using rule 115 (expression -> ID OF ID .)
    EQ_SUB          reduce using rule 115 (expression -> ID OF ID .)
    EQ_ADD          reduce using rule 115 (expression -> ID OF ID .)
    =               reduce using rule 115 (expression -> ID OF ID .)
    ?               reduce using rule 115 (expression -> ID OF ID .)
    {               reduce using rule 115 (expression -> ID OF ID .)
    SANDBOX         reduce using rule 115 (expression -> ID OF ID .)
    LIMPORT         reduce using rule 115 (expression -> ID OF ID .)
    .               reduce using rule 115 (expression -> ID OF ID .)
    IMPORT          reduce using rule 115 (expression -> ID OF ID .)
    ID              reduce using rule 115 (expression -> ID OF ID .)
    RETURN          reduce using rule 115 (expression -> ID OF ID .)
    DEL             reduce using rule 115 (expression -> ID OF ID .)
    FOR             reduce using rule 115 (expression -> ID OF ID .)
    DEBUG           reduce using rule 115 (expression -> ID OF ID .)
    SKIP            reduce using rule 115 (expression -> ID OF ID .)
    BREAK           reduce using rule 115 (expression -> ID OF ID .)
    LET             reduce using rule 115 (expression -> ID OF ID .)
    WHILE           reduce using rule 115 (expression -> ID OF ID .)
    NAMESPACE       reduce using rule 115 (expression -> ID OF ID .)
    CLASS           reduce using rule 115 (expression -> ID OF ID .)
    FUNC            reduce using rule 115 (expression -> ID OF ID .)
    INIT            reduce using rule 115 (expression -> ID OF ID .)
    PYTHON_CODE_EXEC reduce using rule 115 (expression -> ID OF ID .)
    PYTHON_CODE     reduce using rule 115 (expression -> ID OF ID .)
    IF              reduce using rule 115 (expression -> ID OF ID .)
    #               reduce using rule 115 (expression -> ID OF ID .)
    !               reduce using rule 115 (expression -> ID OF ID .)
    STRING          reduce using rule 115 (expression -> ID OF ID .)
    FALSE           reduce using rule 115 (expression -> ID OF ID .)
    TRUE            reduce using rule 115 (expression -> ID OF ID .)
    FLOAT           reduce using rule 115 (expression -> ID OF ID .)
    INT             reduce using rule 115 (expression -> ID OF ID .)
    NULL            reduce using rule 115 (expression -> ID OF ID .)
    $end            reduce using rule 115 (expression -> ID OF ID .)


state 197

    (26) return_statement -> RETURN expression ; .
    SANDBOX         reduce using rule 26 (return_statement -> RETURN expression ; .)
    LIMPORT         reduce using rule 26 (return_statement -> RETURN expression ; .)
    .               reduce using rule 26 (return_statement -> RETURN expression ; .)
    IMPORT          reduce using rule 26 (return_statement -> RETURN expression ; .)
    ID              reduce using rule 26 (return_statement -> RETURN expression ; .)
    RETURN          reduce using rule 26 (return_statement -> RETURN expression ; .)
    DEL             reduce using rule 26 (return_statement -> RETURN expression ; .)
    FOR             reduce using rule 26 (return_statement -> RETURN expression ; .)
    DEBUG           reduce using rule 26 (return_statement -> RETURN expression ; .)
    SKIP            reduce using rule 26 (return_statement -> RETURN expression ; .)
    BREAK           reduce using rule 26 (return_statement -> RETURN expression ; .)
    LET             reduce using rule 26 (return_statement -> RETURN expression ; .)
    WHILE           reduce using rule 26 (return_statement -> RETURN expression ; .)
    NAMESPACE       reduce using rule 26 (return_statement -> RETURN expression ; .)
    CLASS           reduce using rule 26 (return_statement -> RETURN expression ; .)
    FUNC            reduce using rule 26 (return_statement -> RETURN expression ; .)
    INIT            reduce using rule 26 (return_statement -> RETURN expression ; .)
    PYTHON_CODE_EXEC reduce using rule 26 (return_statement -> RETURN expression ; .)
    PYTHON_CODE     reduce using rule 26 (return_statement -> RETURN expression ; .)
    IF              reduce using rule 26 (return_statement -> RETURN expression ; .)
    <               reduce using rule 26 (return_statement -> RETURN expression ; .)
    #               reduce using rule 26 (return_statement -> RETURN expression ; .)
    (               reduce using rule 26 (return_statement -> RETURN expression ; .)
    !               reduce using rule 26 (return_statement -> RETURN expression ; .)
    +               reduce using rule 26 (return_statement -> RETURN expression ; .)
    -               reduce using rule 26 (return_statement -> RETURN expression ; .)
    *               reduce using rule 26 (return_statement -> RETURN expression ; .)
    &               reduce using rule 26 (return_statement -> RETURN expression ; .)
    {               reduce using rule 26 (return_statement -> RETURN expression ; .)
    [               reduce using rule 26 (return_statement -> RETURN expression ; .)
    STRING          reduce using rule 26 (return_statement -> RETURN expression ; .)
    FALSE           reduce using rule 26 (return_statement -> RETURN expression ; .)
    TRUE            reduce using rule 26 (return_statement -> RETURN expression ; .)
    FLOAT           reduce using rule 26 (return_statement -> RETURN expression ; .)
    INT             reduce using rule 26 (return_statement -> RETURN expression ; .)
    NULL            reduce using rule 26 (return_statement -> RETURN expression ; .)
    $end            reduce using rule 26 (return_statement -> RETURN expression ; .)
    }               reduce using rule 26 (return_statement -> RETURN expression ; .)


state 198

    (78) delete_statement -> DEL ID ; .
    SANDBOX         reduce using rule 78 (delete_statement -> DEL ID ; .)
    LIMPORT         reduce using rule 78 (delete_statement -> DEL ID ; .)
    .               reduce using rule 78 (delete_statement -> DEL ID ; .)
    IMPORT          reduce using rule 78 (delete_statement -> DEL ID ; .)
    ID              reduce using rule 78 (delete_statement -> DEL ID ; .)
    RETURN          reduce using rule 78 (delete_statement -> DEL ID ; .)
    DEL             reduce using rule 78 (delete_statement -> DEL ID ; .)
    FOR             reduce using rule 78 (delete_statement -> DEL ID ; .)
    DEBUG           reduce using rule 78 (delete_statement -> DEL ID ; .)
    SKIP            reduce using rule 78 (delete_statement -> DEL ID ; .)
    BREAK           reduce using rule 78 (delete_statement -> DEL ID ; .)
    LET             reduce using rule 78 (delete_statement -> DEL ID ; .)
    WHILE           reduce using rule 78 (delete_statement -> DEL ID ; .)
    NAMESPACE       reduce using rule 78 (delete_statement -> DEL ID ; .)
    CLASS           reduce using rule 78 (delete_statement -> DEL ID ; .)
    FUNC            reduce using rule 78 (delete_statement -> DEL ID ; .)
    INIT            reduce using rule 78 (delete_statement -> DEL ID ; .)
    PYTHON_CODE_EXEC reduce using rule 78 (delete_statement -> DEL ID ; .)
    PYTHON_CODE     reduce using rule 78 (delete_statement -> DEL ID ; .)
    IF              reduce using rule 78 (delete_statement -> DEL ID ; .)
    <               reduce using rule 78 (delete_statement -> DEL ID ; .)
    #               reduce using rule 78 (delete_statement -> DEL ID ; .)
    (               reduce using rule 78 (delete_statement -> DEL ID ; .)
    !               reduce using rule 78 (delete_statement -> DEL ID ; .)
    +               reduce using rule 78 (delete_statement -> DEL ID ; .)
    -               reduce using rule 78 (delete_statement -> DEL ID ; .)
    *               reduce using rule 78 (delete_statement -> DEL ID ; .)
    &               reduce using rule 78 (delete_statement -> DEL ID ; .)
    {               reduce using rule 78 (delete_statement -> DEL ID ; .)
    [               reduce using rule 78 (delete_statement -> DEL ID ; .)
    STRING          reduce using rule 78 (delete_statement -> DEL ID ; .)
    FALSE           reduce using rule 78 (delete_statement -> DEL ID ; .)
    TRUE            reduce using rule 78 (delete_statement -> DEL ID ; .)
    FLOAT           reduce using rule 78 (delete_statement -> DEL ID ; .)
    INT             reduce using rule 78 (delete_statement -> DEL ID ; .)
    NULL            reduce using rule 78 (delete_statement -> DEL ID ; .)
    $end            reduce using rule 78 (delete_statement -> DEL ID ; .)
    }               reduce using rule 78 (delete_statement -> DEL ID ; .)


state 199

    (49) for_loop -> FOR expression IN . expression { program }
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 249
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 200

    (55) variable_assignment -> LET get_index = . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    get_index                      shift and go to state 77
    expression                     shift and go to state 250
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 201

    (56) variable_assignment -> LET ID : . ID = expression ;
    ID              shift and go to state 251


state 202

    (57) variable_assignment -> LET ID = . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 252
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 203

    (50) while_loop -> WHILE ( expression . ) { program }
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    )               shift and go to state 253
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 204

    (96) expression -> ( expression ) .
    ^               reduce using rule 96 (expression -> ( expression ) .)
    [               reduce using rule 96 (expression -> ( expression ) .)
    COLON_COLON     reduce using rule 96 (expression -> ( expression ) .)
    (               reduce using rule 96 (expression -> ( expression ) .)
    >               reduce using rule 96 (expression -> ( expression ) .)
    <               reduce using rule 96 (expression -> ( expression ) .)
    &               reduce using rule 96 (expression -> ( expression ) .)
    |               reduce using rule 96 (expression -> ( expression ) .)
    EQ_GREATER      reduce using rule 96 (expression -> ( expression ) .)
    EQ_LESS         reduce using rule 96 (expression -> ( expression ) .)
    NOT_EQEQ        reduce using rule 96 (expression -> ( expression ) .)
    EQEQ            reduce using rule 96 (expression -> ( expression ) .)
    %               reduce using rule 96 (expression -> ( expression ) .)
    *               reduce using rule 96 (expression -> ( expression ) .)
    /               reduce using rule 96 (expression -> ( expression ) .)
    -               reduce using rule 96 (expression -> ( expression ) .)
    +               reduce using rule 96 (expression -> ( expression ) .)
    :               reduce using rule 96 (expression -> ( expression ) .)
    ,               reduce using rule 96 (expression -> ( expression ) .)
    }               reduce using rule 96 (expression -> ( expression ) .)
    ;               reduce using rule 96 (expression -> ( expression ) .)
    IN              reduce using rule 96 (expression -> ( expression ) .)
    )               reduce using rule 96 (expression -> ( expression ) .)
    ]               reduce using rule 96 (expression -> ( expression ) .)
    EQ_DIV          reduce using rule 96 (expression -> ( expression ) .)
    EQ_MOD          reduce using rule 96 (expression -> ( expression ) .)
    EQ_MUL          reduce using rule 96 (expression -> ( expression ) .)
    EQ_SUB          reduce using rule 96 (expression -> ( expression ) .)
    EQ_ADD          reduce using rule 96 (expression -> ( expression ) .)
    =               reduce using rule 96 (expression -> ( expression ) .)
    ?               reduce using rule 96 (expression -> ( expression ) .)
    {               reduce using rule 96 (expression -> ( expression ) .)
    SANDBOX         reduce using rule 96 (expression -> ( expression ) .)
    LIMPORT         reduce using rule 96 (expression -> ( expression ) .)
    .               reduce using rule 96 (expression -> ( expression ) .)
    IMPORT          reduce using rule 96 (expression -> ( expression ) .)
    ID              reduce using rule 96 (expression -> ( expression ) .)
    RETURN          reduce using rule 96 (expression -> ( expression ) .)
    DEL             reduce using rule 96 (expression -> ( expression ) .)
    FOR             reduce using rule 96 (expression -> ( expression ) .)
    DEBUG           reduce using rule 96 (expression -> ( expression ) .)
    SKIP            reduce using rule 96 (expression -> ( expression ) .)
    BREAK           reduce using rule 96 (expression -> ( expression ) .)
    LET             reduce using rule 96 (expression -> ( expression ) .)
    WHILE           reduce using rule 96 (expression -> ( expression ) .)
    NAMESPACE       reduce using rule 96 (expression -> ( expression ) .)
    CLASS           reduce using rule 96 (expression -> ( expression ) .)
    FUNC            reduce using rule 96 (expression -> ( expression ) .)
    INIT            reduce using rule 96 (expression -> ( expression ) .)
    PYTHON_CODE_EXEC reduce using rule 96 (expression -> ( expression ) .)
    PYTHON_CODE     reduce using rule 96 (expression -> ( expression ) .)
    IF              reduce using rule 96 (expression -> ( expression ) .)
    #               reduce using rule 96 (expression -> ( expression ) .)
    !               reduce using rule 96 (expression -> ( expression ) .)
    STRING          reduce using rule 96 (expression -> ( expression ) .)
    FALSE           reduce using rule 96 (expression -> ( expression ) .)
    TRUE            reduce using rule 96 (expression -> ( expression ) .)
    FLOAT           reduce using rule 96 (expression -> ( expression ) .)
    INT             reduce using rule 96 (expression -> ( expression ) .)
    NULL            reduce using rule 96 (expression -> ( expression ) .)
    $end            reduce using rule 96 (expression -> ( expression ) .)


state 205

    (125) _numpy -> ( expression , . )
    (128) items -> expression , . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    )               shift and go to state 255
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 254
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 206

    (123) _numpy -> ( , ) .
    ^               reduce using rule 123 (_numpy -> ( , ) .)
    [               reduce using rule 123 (_numpy -> ( , ) .)
    COLON_COLON     reduce using rule 123 (_numpy -> ( , ) .)
    (               reduce using rule 123 (_numpy -> ( , ) .)
    >               reduce using rule 123 (_numpy -> ( , ) .)
    <               reduce using rule 123 (_numpy -> ( , ) .)
    &               reduce using rule 123 (_numpy -> ( , ) .)
    |               reduce using rule 123 (_numpy -> ( , ) .)
    EQ_GREATER      reduce using rule 123 (_numpy -> ( , ) .)
    EQ_LESS         reduce using rule 123 (_numpy -> ( , ) .)
    NOT_EQEQ        reduce using rule 123 (_numpy -> ( , ) .)
    EQEQ            reduce using rule 123 (_numpy -> ( , ) .)
    %               reduce using rule 123 (_numpy -> ( , ) .)
    *               reduce using rule 123 (_numpy -> ( , ) .)
    /               reduce using rule 123 (_numpy -> ( , ) .)
    -               reduce using rule 123 (_numpy -> ( , ) .)
    +               reduce using rule 123 (_numpy -> ( , ) .)
    :               reduce using rule 123 (_numpy -> ( , ) .)
    ,               reduce using rule 123 (_numpy -> ( , ) .)
    }               reduce using rule 123 (_numpy -> ( , ) .)
    ;               reduce using rule 123 (_numpy -> ( , ) .)
    IN              reduce using rule 123 (_numpy -> ( , ) .)
    )               reduce using rule 123 (_numpy -> ( , ) .)
    ]               reduce using rule 123 (_numpy -> ( , ) .)
    EQ_DIV          reduce using rule 123 (_numpy -> ( , ) .)
    EQ_MOD          reduce using rule 123 (_numpy -> ( , ) .)
    EQ_MUL          reduce using rule 123 (_numpy -> ( , ) .)
    EQ_SUB          reduce using rule 123 (_numpy -> ( , ) .)
    EQ_ADD          reduce using rule 123 (_numpy -> ( , ) .)
    =               reduce using rule 123 (_numpy -> ( , ) .)
    ?               reduce using rule 123 (_numpy -> ( , ) .)
    {               reduce using rule 123 (_numpy -> ( , ) .)
    SANDBOX         reduce using rule 123 (_numpy -> ( , ) .)
    LIMPORT         reduce using rule 123 (_numpy -> ( , ) .)
    .               reduce using rule 123 (_numpy -> ( , ) .)
    IMPORT          reduce using rule 123 (_numpy -> ( , ) .)
    ID              reduce using rule 123 (_numpy -> ( , ) .)
    RETURN          reduce using rule 123 (_numpy -> ( , ) .)
    DEL             reduce using rule 123 (_numpy -> ( , ) .)
    FOR             reduce using rule 123 (_numpy -> ( , ) .)
    DEBUG           reduce using rule 123 (_numpy -> ( , ) .)
    SKIP            reduce using rule 123 (_numpy -> ( , ) .)
    BREAK           reduce using rule 123 (_numpy -> ( , ) .)
    LET             reduce using rule 123 (_numpy -> ( , ) .)
    WHILE           reduce using rule 123 (_numpy -> ( , ) .)
    NAMESPACE       reduce using rule 123 (_numpy -> ( , ) .)
    CLASS           reduce using rule 123 (_numpy -> ( , ) .)
    FUNC            reduce using rule 123 (_numpy -> ( , ) .)
    INIT            reduce using rule 123 (_numpy -> ( , ) .)
    PYTHON_CODE_EXEC reduce using rule 123 (_numpy -> ( , ) .)
    PYTHON_CODE     reduce using rule 123 (_numpy -> ( , ) .)
    IF              reduce using rule 123 (_numpy -> ( , ) .)
    #               reduce using rule 123 (_numpy -> ( , ) .)
    !               reduce using rule 123 (_numpy -> ( , ) .)
    STRING          reduce using rule 123 (_numpy -> ( , ) .)
    FALSE           reduce using rule 123 (_numpy -> ( , ) .)
    TRUE            reduce using rule 123 (_numpy -> ( , ) .)
    FLOAT           reduce using rule 123 (_numpy -> ( , ) .)
    INT             reduce using rule 123 (_numpy -> ( , ) .)
    NULL            reduce using rule 123 (_numpy -> ( , ) .)
    $end            reduce using rule 123 (_numpy -> ( , ) .)


state 207

    (126) _numpy -> ( items , . )
    (129) items -> items , . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    )               shift and go to state 256
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 257
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 208

    (127) _numpy -> ( items ) .
    ^               reduce using rule 127 (_numpy -> ( items ) .)
    [               reduce using rule 127 (_numpy -> ( items ) .)
    COLON_COLON     reduce using rule 127 (_numpy -> ( items ) .)
    (               reduce using rule 127 (_numpy -> ( items ) .)
    >               reduce using rule 127 (_numpy -> ( items ) .)
    <               reduce using rule 127 (_numpy -> ( items ) .)
    &               reduce using rule 127 (_numpy -> ( items ) .)
    |               reduce using rule 127 (_numpy -> ( items ) .)
    EQ_GREATER      reduce using rule 127 (_numpy -> ( items ) .)
    EQ_LESS         reduce using rule 127 (_numpy -> ( items ) .)
    NOT_EQEQ        reduce using rule 127 (_numpy -> ( items ) .)
    EQEQ            reduce using rule 127 (_numpy -> ( items ) .)
    %               reduce using rule 127 (_numpy -> ( items ) .)
    *               reduce using rule 127 (_numpy -> ( items ) .)
    /               reduce using rule 127 (_numpy -> ( items ) .)
    -               reduce using rule 127 (_numpy -> ( items ) .)
    +               reduce using rule 127 (_numpy -> ( items ) .)
    :               reduce using rule 127 (_numpy -> ( items ) .)
    ,               reduce using rule 127 (_numpy -> ( items ) .)
    }               reduce using rule 127 (_numpy -> ( items ) .)
    ;               reduce using rule 127 (_numpy -> ( items ) .)
    IN              reduce using rule 127 (_numpy -> ( items ) .)
    )               reduce using rule 127 (_numpy -> ( items ) .)
    ]               reduce using rule 127 (_numpy -> ( items ) .)
    EQ_DIV          reduce using rule 127 (_numpy -> ( items ) .)
    EQ_MOD          reduce using rule 127 (_numpy -> ( items ) .)
    EQ_MUL          reduce using rule 127 (_numpy -> ( items ) .)
    EQ_SUB          reduce using rule 127 (_numpy -> ( items ) .)
    EQ_ADD          reduce using rule 127 (_numpy -> ( items ) .)
    =               reduce using rule 127 (_numpy -> ( items ) .)
    ?               reduce using rule 127 (_numpy -> ( items ) .)
    {               reduce using rule 127 (_numpy -> ( items ) .)
    SANDBOX         reduce using rule 127 (_numpy -> ( items ) .)
    LIMPORT         reduce using rule 127 (_numpy -> ( items ) .)
    .               reduce using rule 127 (_numpy -> ( items ) .)
    IMPORT          reduce using rule 127 (_numpy -> ( items ) .)
    ID              reduce using rule 127 (_numpy -> ( items ) .)
    RETURN          reduce using rule 127 (_numpy -> ( items ) .)
    DEL             reduce using rule 127 (_numpy -> ( items ) .)
    FOR             reduce using rule 127 (_numpy -> ( items ) .)
    DEBUG           reduce using rule 127 (_numpy -> ( items ) .)
    SKIP            reduce using rule 127 (_numpy -> ( items ) .)
    BREAK           reduce using rule 127 (_numpy -> ( items ) .)
    LET             reduce using rule 127 (_numpy -> ( items ) .)
    WHILE           reduce using rule 127 (_numpy -> ( items ) .)
    NAMESPACE       reduce using rule 127 (_numpy -> ( items ) .)
    CLASS           reduce using rule 127 (_numpy -> ( items ) .)
    FUNC            reduce using rule 127 (_numpy -> ( items ) .)
    INIT            reduce using rule 127 (_numpy -> ( items ) .)
    PYTHON_CODE_EXEC reduce using rule 127 (_numpy -> ( items ) .)
    PYTHON_CODE     reduce using rule 127 (_numpy -> ( items ) .)
    IF              reduce using rule 127 (_numpy -> ( items ) .)
    #               reduce using rule 127 (_numpy -> ( items ) .)
    !               reduce using rule 127 (_numpy -> ( items ) .)
    STRING          reduce using rule 127 (_numpy -> ( items ) .)
    FALSE           reduce using rule 127 (_numpy -> ( items ) .)
    TRUE            reduce using rule 127 (_numpy -> ( items ) .)
    FLOAT           reduce using rule 127 (_numpy -> ( items ) .)
    INT             reduce using rule 127 (_numpy -> ( items ) .)
    NULL            reduce using rule 127 (_numpy -> ( items ) .)
    $end            reduce using rule 127 (_numpy -> ( items ) .)


state 209

    (70) conditional -> if_statement else_if_loop else_statement .
    SANDBOX         reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    LIMPORT         reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    .               reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    IMPORT          reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    ID              reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    RETURN          reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    DEL             reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    FOR             reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    DEBUG           reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    SKIP            reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    BREAK           reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    LET             reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    WHILE           reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    NAMESPACE       reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    CLASS           reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    FUNC            reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    INIT            reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    PYTHON_CODE_EXEC reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    PYTHON_CODE     reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    IF              reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    <               reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    #               reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    (               reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    !               reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    +               reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    -               reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    *               reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    &               reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    {               reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    [               reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    STRING          reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    FALSE           reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    TRUE            reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    FLOAT           reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    INT             reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    NULL            reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    $end            reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)
    }               reduce using rule 70 (conditional -> if_statement else_if_loop else_statement .)


state 210

    (75) else_if_loop -> else_if_loop else_if_statement .
    ELSE            reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    SANDBOX         reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    LIMPORT         reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    .               reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    IMPORT          reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    ID              reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    RETURN          reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    DEL             reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    FOR             reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    DEBUG           reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    SKIP            reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    BREAK           reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    LET             reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    WHILE           reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    NAMESPACE       reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    CLASS           reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    FUNC            reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    INIT            reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    PYTHON_CODE_EXEC reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    PYTHON_CODE     reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    IF              reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    <               reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    #               reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    (               reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    !               reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    +               reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    -               reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    *               reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    &               reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    {               reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    [               reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    STRING          reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    FALSE           reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    TRUE            reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    FLOAT           reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    INT             reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    NULL            reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    $end            reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)
    }               reduce using rule 75 (else_if_loop -> else_if_loop else_if_statement .)


state 211

    (77) else_statement -> ELSE { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    program                        shift and go to state 258
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 212

    (76) else_if_statement -> ELSE IF . ( expression ) { program }
    (               shift and go to state 259


state 213

    (68) class_attribute_assignment -> class_attribute = expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 260
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 214

    (47) class_declaration -> NAMESPACE ID { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    program                        shift and go to state 261
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 215

    (48) class_declaration -> CLASS ID { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    program                        shift and go to state 262
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 216

    (39) function_declaration -> FUNC ID ( . empty ) { program } TARROW expression
    (43) function_declaration -> FUNC ID ( . function_arguments ) { program } TARROW expression
    (142) empty -> .
    (44) function_arguments -> . kwargs
    (45) function_arguments -> . positional_args , kwargs
    (46) function_arguments -> . positional_args
    (53) kwargs -> . ID = expression
    (54) kwargs -> . kwargs , id = expression
    (51) positional_args -> . expression
    (52) positional_args -> . positional_args , expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    )               reduce using rule 142 (empty -> .)
    ID              shift and go to state 166
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    empty                          shift and go to state 263
    expression                     shift and go to state 142
    function_arguments             shift and go to state 264
    kwargs                         shift and go to state 164
    positional_args                shift and go to state 165
    id                             shift and go to state 54
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 217

    (40) function_declaration -> FUNC ID COLON_COLON . ID ( empty ) { program } TARROW expression
    (41) function_declaration -> FUNC ID COLON_COLON . ID ( function_arguments ) { program } TARROW expression
    ID              shift and go to state 265


state 218

    (42) function_declaration -> INIT ( function_arguments . ) { program } ;
    )               shift and go to state 266


state 219

    (121) _list -> [ positional_args , . ]
    (52) positional_args -> positional_args , . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    ]               shift and go to state 267
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 228
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 220

    (122) _list -> [ positional_args ] .
    ^               reduce using rule 122 (_list -> [ positional_args ] .)
    [               reduce using rule 122 (_list -> [ positional_args ] .)
    COLON_COLON     reduce using rule 122 (_list -> [ positional_args ] .)
    (               reduce using rule 122 (_list -> [ positional_args ] .)
    >               reduce using rule 122 (_list -> [ positional_args ] .)
    <               reduce using rule 122 (_list -> [ positional_args ] .)
    &               reduce using rule 122 (_list -> [ positional_args ] .)
    |               reduce using rule 122 (_list -> [ positional_args ] .)
    EQ_GREATER      reduce using rule 122 (_list -> [ positional_args ] .)
    EQ_LESS         reduce using rule 122 (_list -> [ positional_args ] .)
    NOT_EQEQ        reduce using rule 122 (_list -> [ positional_args ] .)
    EQEQ            reduce using rule 122 (_list -> [ positional_args ] .)
    %               reduce using rule 122 (_list -> [ positional_args ] .)
    *               reduce using rule 122 (_list -> [ positional_args ] .)
    /               reduce using rule 122 (_list -> [ positional_args ] .)
    -               reduce using rule 122 (_list -> [ positional_args ] .)
    +               reduce using rule 122 (_list -> [ positional_args ] .)
    :               reduce using rule 122 (_list -> [ positional_args ] .)
    ,               reduce using rule 122 (_list -> [ positional_args ] .)
    }               reduce using rule 122 (_list -> [ positional_args ] .)
    ;               reduce using rule 122 (_list -> [ positional_args ] .)
    IN              reduce using rule 122 (_list -> [ positional_args ] .)
    )               reduce using rule 122 (_list -> [ positional_args ] .)
    ]               reduce using rule 122 (_list -> [ positional_args ] .)
    EQ_DIV          reduce using rule 122 (_list -> [ positional_args ] .)
    EQ_MOD          reduce using rule 122 (_list -> [ positional_args ] .)
    EQ_MUL          reduce using rule 122 (_list -> [ positional_args ] .)
    EQ_SUB          reduce using rule 122 (_list -> [ positional_args ] .)
    EQ_ADD          reduce using rule 122 (_list -> [ positional_args ] .)
    =               reduce using rule 122 (_list -> [ positional_args ] .)
    ?               reduce using rule 122 (_list -> [ positional_args ] .)
    {               reduce using rule 122 (_list -> [ positional_args ] .)
    SANDBOX         reduce using rule 122 (_list -> [ positional_args ] .)
    LIMPORT         reduce using rule 122 (_list -> [ positional_args ] .)
    .               reduce using rule 122 (_list -> [ positional_args ] .)
    IMPORT          reduce using rule 122 (_list -> [ positional_args ] .)
    ID              reduce using rule 122 (_list -> [ positional_args ] .)
    RETURN          reduce using rule 122 (_list -> [ positional_args ] .)
    DEL             reduce using rule 122 (_list -> [ positional_args ] .)
    FOR             reduce using rule 122 (_list -> [ positional_args ] .)
    DEBUG           reduce using rule 122 (_list -> [ positional_args ] .)
    SKIP            reduce using rule 122 (_list -> [ positional_args ] .)
    BREAK           reduce using rule 122 (_list -> [ positional_args ] .)
    LET             reduce using rule 122 (_list -> [ positional_args ] .)
    WHILE           reduce using rule 122 (_list -> [ positional_args ] .)
    NAMESPACE       reduce using rule 122 (_list -> [ positional_args ] .)
    CLASS           reduce using rule 122 (_list -> [ positional_args ] .)
    FUNC            reduce using rule 122 (_list -> [ positional_args ] .)
    INIT            reduce using rule 122 (_list -> [ positional_args ] .)
    PYTHON_CODE_EXEC reduce using rule 122 (_list -> [ positional_args ] .)
    PYTHON_CODE     reduce using rule 122 (_list -> [ positional_args ] .)
    IF              reduce using rule 122 (_list -> [ positional_args ] .)
    #               reduce using rule 122 (_list -> [ positional_args ] .)
    !               reduce using rule 122 (_list -> [ positional_args ] .)
    STRING          reduce using rule 122 (_list -> [ positional_args ] .)
    FALSE           reduce using rule 122 (_list -> [ positional_args ] .)
    TRUE            reduce using rule 122 (_list -> [ positional_args ] .)
    FLOAT           reduce using rule 122 (_list -> [ positional_args ] .)
    INT             reduce using rule 122 (_list -> [ positional_args ] .)
    NULL            reduce using rule 122 (_list -> [ positional_args ] .)
    $end            reduce using rule 122 (_list -> [ positional_args ] .)


state 221

    (73) if_statement -> IF ( expression . ) { program }
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    )               shift and go to state 268
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 222

    (30) function_call -> < ID > . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 269
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 223

    (33) function_call -> # DEPENDS expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    ;               reduce using rule 33 (function_call -> # DEPENDS expression .)
    :               reduce using rule 33 (function_call -> # DEPENDS expression .)
    ,               reduce using rule 33 (function_call -> # DEPENDS expression .)
    }               reduce using rule 33 (function_call -> # DEPENDS expression .)
    IN              reduce using rule 33 (function_call -> # DEPENDS expression .)
    )               reduce using rule 33 (function_call -> # DEPENDS expression .)
    ]               reduce using rule 33 (function_call -> # DEPENDS expression .)
    EQ_DIV          reduce using rule 33 (function_call -> # DEPENDS expression .)
    EQ_MOD          reduce using rule 33 (function_call -> # DEPENDS expression .)
    EQ_MUL          reduce using rule 33 (function_call -> # DEPENDS expression .)
    EQ_SUB          reduce using rule 33 (function_call -> # DEPENDS expression .)
    EQ_ADD          reduce using rule 33 (function_call -> # DEPENDS expression .)
    =               reduce using rule 33 (function_call -> # DEPENDS expression .)
    ?               reduce using rule 33 (function_call -> # DEPENDS expression .)
    {               reduce using rule 33 (function_call -> # DEPENDS expression .)
    SANDBOX         reduce using rule 33 (function_call -> # DEPENDS expression .)
    LIMPORT         reduce using rule 33 (function_call -> # DEPENDS expression .)
    .               reduce using rule 33 (function_call -> # DEPENDS expression .)
    IMPORT          reduce using rule 33 (function_call -> # DEPENDS expression .)
    ID              reduce using rule 33 (function_call -> # DEPENDS expression .)
    RETURN          reduce using rule 33 (function_call -> # DEPENDS expression .)
    DEL             reduce using rule 33 (function_call -> # DEPENDS expression .)
    FOR             reduce using rule 33 (function_call -> # DEPENDS expression .)
    DEBUG           reduce using rule 33 (function_call -> # DEPENDS expression .)
    SKIP            reduce using rule 33 (function_call -> # DEPENDS expression .)
    BREAK           reduce using rule 33 (function_call -> # DEPENDS expression .)
    LET             reduce using rule 33 (function_call -> # DEPENDS expression .)
    WHILE           reduce using rule 33 (function_call -> # DEPENDS expression .)
    NAMESPACE       reduce using rule 33 (function_call -> # DEPENDS expression .)
    CLASS           reduce using rule 33 (function_call -> # DEPENDS expression .)
    FUNC            reduce using rule 33 (function_call -> # DEPENDS expression .)
    INIT            reduce using rule 33 (function_call -> # DEPENDS expression .)
    PYTHON_CODE_EXEC reduce using rule 33 (function_call -> # DEPENDS expression .)
    PYTHON_CODE     reduce using rule 33 (function_call -> # DEPENDS expression .)
    IF              reduce using rule 33 (function_call -> # DEPENDS expression .)
    #               reduce using rule 33 (function_call -> # DEPENDS expression .)
    !               reduce using rule 33 (function_call -> # DEPENDS expression .)
    STRING          reduce using rule 33 (function_call -> # DEPENDS expression .)
    FALSE           reduce using rule 33 (function_call -> # DEPENDS expression .)
    TRUE            reduce using rule 33 (function_call -> # DEPENDS expression .)
    FLOAT           reduce using rule 33 (function_call -> # DEPENDS expression .)
    INT             reduce using rule 33 (function_call -> # DEPENDS expression .)
    NULL            reduce using rule 33 (function_call -> # DEPENDS expression .)
    $end            reduce using rule 33 (function_call -> # DEPENDS expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 224

    (34) function_call -> # DEFINE expression . ? ID
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ?               shift and go to state 270
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 225

    (19) sandbox -> SANDBOX { program } .
    SANDBOX         reduce using rule 19 (sandbox -> SANDBOX { program } .)
    LIMPORT         reduce using rule 19 (sandbox -> SANDBOX { program } .)
    .               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    IMPORT          reduce using rule 19 (sandbox -> SANDBOX { program } .)
    ID              reduce using rule 19 (sandbox -> SANDBOX { program } .)
    RETURN          reduce using rule 19 (sandbox -> SANDBOX { program } .)
    DEL             reduce using rule 19 (sandbox -> SANDBOX { program } .)
    FOR             reduce using rule 19 (sandbox -> SANDBOX { program } .)
    DEBUG           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    SKIP            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    BREAK           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    LET             reduce using rule 19 (sandbox -> SANDBOX { program } .)
    WHILE           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    NAMESPACE       reduce using rule 19 (sandbox -> SANDBOX { program } .)
    CLASS           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    FUNC            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    INIT            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    PYTHON_CODE_EXEC reduce using rule 19 (sandbox -> SANDBOX { program } .)
    PYTHON_CODE     reduce using rule 19 (sandbox -> SANDBOX { program } .)
    IF              reduce using rule 19 (sandbox -> SANDBOX { program } .)
    <               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    #               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    (               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    !               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    +               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    -               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    *               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    &               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    {               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    [               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    STRING          reduce using rule 19 (sandbox -> SANDBOX { program } .)
    FALSE           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    TRUE            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    FLOAT           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    INT             reduce using rule 19 (sandbox -> SANDBOX { program } .)
    NULL            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    $end            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    }               reduce using rule 19 (sandbox -> SANDBOX { program } .)


state 226

    (139) assoc_array_items -> assoc_array_items , expression . : expression
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    :               shift and go to state 271
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 227

    (119) _tuple -> { positional_args , } .
    ^               reduce using rule 119 (_tuple -> { positional_args , } .)
    [               reduce using rule 119 (_tuple -> { positional_args , } .)
    COLON_COLON     reduce using rule 119 (_tuple -> { positional_args , } .)
    (               reduce using rule 119 (_tuple -> { positional_args , } .)
    >               reduce using rule 119 (_tuple -> { positional_args , } .)
    <               reduce using rule 119 (_tuple -> { positional_args , } .)
    &               reduce using rule 119 (_tuple -> { positional_args , } .)
    |               reduce using rule 119 (_tuple -> { positional_args , } .)
    EQ_GREATER      reduce using rule 119 (_tuple -> { positional_args , } .)
    EQ_LESS         reduce using rule 119 (_tuple -> { positional_args , } .)
    NOT_EQEQ        reduce using rule 119 (_tuple -> { positional_args , } .)
    EQEQ            reduce using rule 119 (_tuple -> { positional_args , } .)
    %               reduce using rule 119 (_tuple -> { positional_args , } .)
    *               reduce using rule 119 (_tuple -> { positional_args , } .)
    /               reduce using rule 119 (_tuple -> { positional_args , } .)
    -               reduce using rule 119 (_tuple -> { positional_args , } .)
    +               reduce using rule 119 (_tuple -> { positional_args , } .)
    :               reduce using rule 119 (_tuple -> { positional_args , } .)
    ,               reduce using rule 119 (_tuple -> { positional_args , } .)
    }               reduce using rule 119 (_tuple -> { positional_args , } .)
    ;               reduce using rule 119 (_tuple -> { positional_args , } .)
    IN              reduce using rule 119 (_tuple -> { positional_args , } .)
    )               reduce using rule 119 (_tuple -> { positional_args , } .)
    ]               reduce using rule 119 (_tuple -> { positional_args , } .)
    EQ_DIV          reduce using rule 119 (_tuple -> { positional_args , } .)
    EQ_MOD          reduce using rule 119 (_tuple -> { positional_args , } .)
    EQ_MUL          reduce using rule 119 (_tuple -> { positional_args , } .)
    EQ_SUB          reduce using rule 119 (_tuple -> { positional_args , } .)
    EQ_ADD          reduce using rule 119 (_tuple -> { positional_args , } .)
    =               reduce using rule 119 (_tuple -> { positional_args , } .)
    ?               reduce using rule 119 (_tuple -> { positional_args , } .)
    {               reduce using rule 119 (_tuple -> { positional_args , } .)
    SANDBOX         reduce using rule 119 (_tuple -> { positional_args , } .)
    LIMPORT         reduce using rule 119 (_tuple -> { positional_args , } .)
    .               reduce using rule 119 (_tuple -> { positional_args , } .)
    IMPORT          reduce using rule 119 (_tuple -> { positional_args , } .)
    ID              reduce using rule 119 (_tuple -> { positional_args , } .)
    RETURN          reduce using rule 119 (_tuple -> { positional_args , } .)
    DEL             reduce using rule 119 (_tuple -> { positional_args , } .)
    FOR             reduce using rule 119 (_tuple -> { positional_args , } .)
    DEBUG           reduce using rule 119 (_tuple -> { positional_args , } .)
    SKIP            reduce using rule 119 (_tuple -> { positional_args , } .)
    BREAK           reduce using rule 119 (_tuple -> { positional_args , } .)
    LET             reduce using rule 119 (_tuple -> { positional_args , } .)
    WHILE           reduce using rule 119 (_tuple -> { positional_args , } .)
    NAMESPACE       reduce using rule 119 (_tuple -> { positional_args , } .)
    CLASS           reduce using rule 119 (_tuple -> { positional_args , } .)
    FUNC            reduce using rule 119 (_tuple -> { positional_args , } .)
    INIT            reduce using rule 119 (_tuple -> { positional_args , } .)
    PYTHON_CODE_EXEC reduce using rule 119 (_tuple -> { positional_args , } .)
    PYTHON_CODE     reduce using rule 119 (_tuple -> { positional_args , } .)
    IF              reduce using rule 119 (_tuple -> { positional_args , } .)
    #               reduce using rule 119 (_tuple -> { positional_args , } .)
    !               reduce using rule 119 (_tuple -> { positional_args , } .)
    STRING          reduce using rule 119 (_tuple -> { positional_args , } .)
    FALSE           reduce using rule 119 (_tuple -> { positional_args , } .)
    TRUE            reduce using rule 119 (_tuple -> { positional_args , } .)
    FLOAT           reduce using rule 119 (_tuple -> { positional_args , } .)
    INT             reduce using rule 119 (_tuple -> { positional_args , } .)
    NULL            reduce using rule 119 (_tuple -> { positional_args , } .)
    $end            reduce using rule 119 (_tuple -> { positional_args , } .)


state 228

    (52) positional_args -> positional_args , expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ,               reduce using rule 52 (positional_args -> positional_args , expression .)
    }               reduce using rule 52 (positional_args -> positional_args , expression .)
    ]               reduce using rule 52 (positional_args -> positional_args , expression .)
    )               reduce using rule 52 (positional_args -> positional_args , expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 229

    (138) assoc_array_items -> expression : expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    }               reduce using rule 138 (assoc_array_items -> expression : expression .)
    ,               reduce using rule 138 (assoc_array_items -> expression : expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 230

    (118) get_index -> expression [ expression ] .
    EQ_DIV          reduce using rule 118 (get_index -> expression [ expression ] .)
    EQ_MOD          reduce using rule 118 (get_index -> expression [ expression ] .)
    EQ_MUL          reduce using rule 118 (get_index -> expression [ expression ] .)
    EQ_SUB          reduce using rule 118 (get_index -> expression [ expression ] .)
    EQ_ADD          reduce using rule 118 (get_index -> expression [ expression ] .)
    ^               reduce using rule 118 (get_index -> expression [ expression ] .)
    [               reduce using rule 118 (get_index -> expression [ expression ] .)
    COLON_COLON     reduce using rule 118 (get_index -> expression [ expression ] .)
    (               reduce using rule 118 (get_index -> expression [ expression ] .)
    >               reduce using rule 118 (get_index -> expression [ expression ] .)
    <               reduce using rule 118 (get_index -> expression [ expression ] .)
    &               reduce using rule 118 (get_index -> expression [ expression ] .)
    |               reduce using rule 118 (get_index -> expression [ expression ] .)
    EQ_GREATER      reduce using rule 118 (get_index -> expression [ expression ] .)
    EQ_LESS         reduce using rule 118 (get_index -> expression [ expression ] .)
    NOT_EQEQ        reduce using rule 118 (get_index -> expression [ expression ] .)
    EQEQ            reduce using rule 118 (get_index -> expression [ expression ] .)
    %               reduce using rule 118 (get_index -> expression [ expression ] .)
    *               reduce using rule 118 (get_index -> expression [ expression ] .)
    /               reduce using rule 118 (get_index -> expression [ expression ] .)
    -               reduce using rule 118 (get_index -> expression [ expression ] .)
    +               reduce using rule 118 (get_index -> expression [ expression ] .)
    :               reduce using rule 118 (get_index -> expression [ expression ] .)
    ,               reduce using rule 118 (get_index -> expression [ expression ] .)
    }               reduce using rule 118 (get_index -> expression [ expression ] .)
    ;               reduce using rule 118 (get_index -> expression [ expression ] .)
    IN              reduce using rule 118 (get_index -> expression [ expression ] .)
    =               reduce using rule 118 (get_index -> expression [ expression ] .)
    )               reduce using rule 118 (get_index -> expression [ expression ] .)
    ]               reduce using rule 118 (get_index -> expression [ expression ] .)
    ?               reduce using rule 118 (get_index -> expression [ expression ] .)
    {               reduce using rule 118 (get_index -> expression [ expression ] .)
    SANDBOX         reduce using rule 118 (get_index -> expression [ expression ] .)
    LIMPORT         reduce using rule 118 (get_index -> expression [ expression ] .)
    .               reduce using rule 118 (get_index -> expression [ expression ] .)
    IMPORT          reduce using rule 118 (get_index -> expression [ expression ] .)
    ID              reduce using rule 118 (get_index -> expression [ expression ] .)
    RETURN          reduce using rule 118 (get_index -> expression [ expression ] .)
    DEL             reduce using rule 118 (get_index -> expression [ expression ] .)
    FOR             reduce using rule 118 (get_index -> expression [ expression ] .)
    DEBUG           reduce using rule 118 (get_index -> expression [ expression ] .)
    SKIP            reduce using rule 118 (get_index -> expression [ expression ] .)
    BREAK           reduce using rule 118 (get_index -> expression [ expression ] .)
    LET             reduce using rule 118 (get_index -> expression [ expression ] .)
    WHILE           reduce using rule 118 (get_index -> expression [ expression ] .)
    NAMESPACE       reduce using rule 118 (get_index -> expression [ expression ] .)
    CLASS           reduce using rule 118 (get_index -> expression [ expression ] .)
    FUNC            reduce using rule 118 (get_index -> expression [ expression ] .)
    INIT            reduce using rule 118 (get_index -> expression [ expression ] .)
    PYTHON_CODE_EXEC reduce using rule 118 (get_index -> expression [ expression ] .)
    PYTHON_CODE     reduce using rule 118 (get_index -> expression [ expression ] .)
    IF              reduce using rule 118 (get_index -> expression [ expression ] .)
    #               reduce using rule 118 (get_index -> expression [ expression ] .)
    !               reduce using rule 118 (get_index -> expression [ expression ] .)
    STRING          reduce using rule 118 (get_index -> expression [ expression ] .)
    FALSE           reduce using rule 118 (get_index -> expression [ expression ] .)
    TRUE            reduce using rule 118 (get_index -> expression [ expression ] .)
    FLOAT           reduce using rule 118 (get_index -> expression [ expression ] .)
    INT             reduce using rule 118 (get_index -> expression [ expression ] .)
    NULL            reduce using rule 118 (get_index -> expression [ expression ] .)
    $end            reduce using rule 118 (get_index -> expression [ expression ] .)


state 231

    (29) function_call -> expression ( empty ) . FARROW { program }
    (35) function_call -> expression ( empty ) .
    FARROW          shift and go to state 272
    ;               reduce using rule 35 (function_call -> expression ( empty ) .)
    ^               reduce using rule 35 (function_call -> expression ( empty ) .)
    [               reduce using rule 35 (function_call -> expression ( empty ) .)
    COLON_COLON     reduce using rule 35 (function_call -> expression ( empty ) .)
    (               reduce using rule 35 (function_call -> expression ( empty ) .)
    >               reduce using rule 35 (function_call -> expression ( empty ) .)
    <               reduce using rule 35 (function_call -> expression ( empty ) .)
    &               reduce using rule 35 (function_call -> expression ( empty ) .)
    |               reduce using rule 35 (function_call -> expression ( empty ) .)
    EQ_GREATER      reduce using rule 35 (function_call -> expression ( empty ) .)
    EQ_LESS         reduce using rule 35 (function_call -> expression ( empty ) .)
    NOT_EQEQ        reduce using rule 35 (function_call -> expression ( empty ) .)
    EQEQ            reduce using rule 35 (function_call -> expression ( empty ) .)
    %               reduce using rule 35 (function_call -> expression ( empty ) .)
    *               reduce using rule 35 (function_call -> expression ( empty ) .)
    /               reduce using rule 35 (function_call -> expression ( empty ) .)
    -               reduce using rule 35 (function_call -> expression ( empty ) .)
    +               reduce using rule 35 (function_call -> expression ( empty ) .)
    :               reduce using rule 35 (function_call -> expression ( empty ) .)
    ,               reduce using rule 35 (function_call -> expression ( empty ) .)
    }               reduce using rule 35 (function_call -> expression ( empty ) .)
    IN              reduce using rule 35 (function_call -> expression ( empty ) .)
    )               reduce using rule 35 (function_call -> expression ( empty ) .)
    ]               reduce using rule 35 (function_call -> expression ( empty ) .)
    EQ_DIV          reduce using rule 35 (function_call -> expression ( empty ) .)
    EQ_MOD          reduce using rule 35 (function_call -> expression ( empty ) .)
    EQ_MUL          reduce using rule 35 (function_call -> expression ( empty ) .)
    EQ_SUB          reduce using rule 35 (function_call -> expression ( empty ) .)
    EQ_ADD          reduce using rule 35 (function_call -> expression ( empty ) .)
    =               reduce using rule 35 (function_call -> expression ( empty ) .)
    ?               reduce using rule 35 (function_call -> expression ( empty ) .)
    {               reduce using rule 35 (function_call -> expression ( empty ) .)
    SANDBOX         reduce using rule 35 (function_call -> expression ( empty ) .)
    LIMPORT         reduce using rule 35 (function_call -> expression ( empty ) .)
    .               reduce using rule 35 (function_call -> expression ( empty ) .)
    IMPORT          reduce using rule 35 (function_call -> expression ( empty ) .)
    ID              reduce using rule 35 (function_call -> expression ( empty ) .)
    RETURN          reduce using rule 35 (function_call -> expression ( empty ) .)
    DEL             reduce using rule 35 (function_call -> expression ( empty ) .)
    FOR             reduce using rule 35 (function_call -> expression ( empty ) .)
    DEBUG           reduce using rule 35 (function_call -> expression ( empty ) .)
    SKIP            reduce using rule 35 (function_call -> expression ( empty ) .)
    BREAK           reduce using rule 35 (function_call -> expression ( empty ) .)
    LET             reduce using rule 35 (function_call -> expression ( empty ) .)
    WHILE           reduce using rule 35 (function_call -> expression ( empty ) .)
    NAMESPACE       reduce using rule 35 (function_call -> expression ( empty ) .)
    CLASS           reduce using rule 35 (function_call -> expression ( empty ) .)
    FUNC            reduce using rule 35 (function_call -> expression ( empty ) .)
    INIT            reduce using rule 35 (function_call -> expression ( empty ) .)
    PYTHON_CODE_EXEC reduce using rule 35 (function_call -> expression ( empty ) .)
    PYTHON_CODE     reduce using rule 35 (function_call -> expression ( empty ) .)
    IF              reduce using rule 35 (function_call -> expression ( empty ) .)
    #               reduce using rule 35 (function_call -> expression ( empty ) .)
    !               reduce using rule 35 (function_call -> expression ( empty ) .)
    STRING          reduce using rule 35 (function_call -> expression ( empty ) .)
    FALSE           reduce using rule 35 (function_call -> expression ( empty ) .)
    TRUE            reduce using rule 35 (function_call -> expression ( empty ) .)
    FLOAT           reduce using rule 35 (function_call -> expression ( empty ) .)
    INT             reduce using rule 35 (function_call -> expression ( empty ) .)
    NULL            reduce using rule 35 (function_call -> expression ( empty ) .)
    $end            reduce using rule 35 (function_call -> expression ( empty ) .)


state 232

    (36) function_call -> expression ( function_arguments ) . FARROW { program }
    (37) function_call -> expression ( function_arguments ) .
    FARROW          shift and go to state 273
    ;               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    ^               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    [               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    COLON_COLON     reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    (               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    >               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    <               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    &               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    |               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    EQ_GREATER      reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    EQ_LESS         reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    NOT_EQEQ        reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    EQEQ            reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    %               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    *               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    /               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    -               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    +               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    :               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    ,               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    }               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    IN              reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    )               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    ]               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    EQ_DIV          reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    EQ_MOD          reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    EQ_MUL          reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    EQ_SUB          reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    EQ_ADD          reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    =               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    ?               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    {               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    SANDBOX         reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    LIMPORT         reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    .               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    IMPORT          reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    ID              reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    RETURN          reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    DEL             reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    FOR             reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    DEBUG           reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    SKIP            reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    BREAK           reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    LET             reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    WHILE           reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    NAMESPACE       reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    CLASS           reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    FUNC            reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    INIT            reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    PYTHON_CODE_EXEC reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    PYTHON_CODE     reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    IF              reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    #               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    !               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    STRING          reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    FALSE           reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    TRUE            reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    FLOAT           reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    INT             reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    NULL            reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    $end            reduce using rule 37 (function_call -> expression ( function_arguments ) .)


state 233

    (54) kwargs -> kwargs , . id = expression
    (136) id -> . ID
    ID              shift and go to state 275

    id                             shift and go to state 274

state 234

    (45) function_arguments -> positional_args , . kwargs
    (52) positional_args -> positional_args , . expression
    (53) kwargs -> . ID = expression
    (54) kwargs -> . kwargs , id = expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    ID              shift and go to state 166
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    kwargs                         shift and go to state 276
    expression                     shift and go to state 228
    id                             shift and go to state 54
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 235

    (53) kwargs -> ID = . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 277
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 236

    (27) function_call -> . ENV FROM ID . { program }
    {               shift and go to state 278


state 237

    (28) function_call -> . ENV { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 279
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 238

    (58) variable_operation -> get_index EQ_DIV expression ; .
    SANDBOX         reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    LIMPORT         reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    .               reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    IMPORT          reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    ID              reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    RETURN          reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    DEL             reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    FOR             reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    DEBUG           reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    SKIP            reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    BREAK           reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    LET             reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    WHILE           reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    NAMESPACE       reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    CLASS           reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    FUNC            reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    INIT            reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    PYTHON_CODE_EXEC reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    PYTHON_CODE     reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    IF              reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    <               reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    #               reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    (               reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    !               reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    +               reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    -               reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    *               reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    &               reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    {               reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    [               reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    STRING          reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    FALSE           reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    TRUE            reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    FLOAT           reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    INT             reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    NULL            reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    $end            reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)
    }               reduce using rule 58 (variable_operation -> get_index EQ_DIV expression ; .)


state 239

    (60) variable_operation -> get_index EQ_MOD expression ; .
    SANDBOX         reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    LIMPORT         reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    .               reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    IMPORT          reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    ID              reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    RETURN          reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    DEL             reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    FOR             reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    DEBUG           reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    SKIP            reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    BREAK           reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    LET             reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    WHILE           reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    NAMESPACE       reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    CLASS           reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    FUNC            reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    INIT            reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    PYTHON_CODE     reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    IF              reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    <               reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    #               reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    (               reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    !               reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    +               reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    -               reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    *               reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    &               reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    {               reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    [               reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    STRING          reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    FALSE           reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    TRUE            reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    FLOAT           reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    INT             reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    NULL            reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    $end            reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)
    }               reduce using rule 60 (variable_operation -> get_index EQ_MOD expression ; .)


state 240

    (62) variable_operation -> get_index EQ_MUL expression ; .
    SANDBOX         reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    LIMPORT         reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    .               reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    IMPORT          reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    ID              reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    RETURN          reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    DEL             reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    FOR             reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    DEBUG           reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    SKIP            reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    BREAK           reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    LET             reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    WHILE           reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    NAMESPACE       reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    CLASS           reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    FUNC            reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    INIT            reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    PYTHON_CODE_EXEC reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    PYTHON_CODE     reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    IF              reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    <               reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    #               reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    (               reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    !               reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    +               reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    -               reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    *               reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    &               reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    {               reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    [               reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    STRING          reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    FALSE           reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    TRUE            reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    FLOAT           reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    INT             reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    NULL            reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    $end            reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)
    }               reduce using rule 62 (variable_operation -> get_index EQ_MUL expression ; .)


state 241

    (64) variable_operation -> get_index EQ_SUB expression ; .
    SANDBOX         reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    LIMPORT         reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    .               reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    IMPORT          reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    ID              reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    RETURN          reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    DEL             reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    FOR             reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    DEBUG           reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    SKIP            reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    BREAK           reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    LET             reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    WHILE           reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    NAMESPACE       reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    CLASS           reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    FUNC            reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    INIT            reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    PYTHON_CODE_EXEC reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    PYTHON_CODE     reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    IF              reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    <               reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    #               reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    (               reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    !               reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    +               reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    -               reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    *               reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    &               reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    {               reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    [               reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    STRING          reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    FALSE           reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    TRUE            reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    FLOAT           reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    INT             reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    NULL            reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    $end            reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)
    }               reduce using rule 64 (variable_operation -> get_index EQ_SUB expression ; .)


state 242

    (66) variable_operation -> get_index EQ_ADD expression ; .
    SANDBOX         reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    LIMPORT         reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    .               reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    IMPORT          reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    ID              reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    RETURN          reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    DEL             reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    FOR             reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    DEBUG           reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    SKIP            reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    BREAK           reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    LET             reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    WHILE           reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    NAMESPACE       reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    CLASS           reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    FUNC            reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    INIT            reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    PYTHON_CODE     reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    IF              reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    <               reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    #               reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    (               reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    !               reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    +               reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    -               reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    *               reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    &               reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    {               reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    [               reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    STRING          reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    FALSE           reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    TRUE            reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    FLOAT           reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    INT             reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    NULL            reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    $end            reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)
    }               reduce using rule 66 (variable_operation -> get_index EQ_ADD expression ; .)


state 243

    (59) variable_operation -> ID EQ_DIV expression ; .
    SANDBOX         reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    LIMPORT         reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    .               reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    IMPORT          reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    ID              reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    RETURN          reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    DEL             reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    FOR             reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    DEBUG           reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    SKIP            reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    BREAK           reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    LET             reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    WHILE           reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    NAMESPACE       reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    CLASS           reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    FUNC            reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    INIT            reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    PYTHON_CODE_EXEC reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    PYTHON_CODE     reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    IF              reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    <               reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    #               reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    (               reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    !               reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    +               reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    -               reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    *               reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    &               reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    {               reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    [               reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    STRING          reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    FALSE           reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    TRUE            reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    FLOAT           reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    INT             reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    NULL            reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    $end            reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)
    }               reduce using rule 59 (variable_operation -> ID EQ_DIV expression ; .)


state 244

    (61) variable_operation -> ID EQ_MOD expression ; .
    SANDBOX         reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    LIMPORT         reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    .               reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    IMPORT          reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    ID              reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    RETURN          reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    DEL             reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    FOR             reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    DEBUG           reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    SKIP            reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    BREAK           reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    LET             reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    WHILE           reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    NAMESPACE       reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    CLASS           reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    FUNC            reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    INIT            reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    PYTHON_CODE     reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    IF              reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    <               reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    #               reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    (               reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    !               reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    +               reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    -               reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    *               reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    &               reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    {               reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    [               reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    STRING          reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    FALSE           reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    TRUE            reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    FLOAT           reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    INT             reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    NULL            reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    $end            reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)
    }               reduce using rule 61 (variable_operation -> ID EQ_MOD expression ; .)


state 245

    (63) variable_operation -> ID EQ_MUL expression ; .
    SANDBOX         reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    LIMPORT         reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    .               reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    IMPORT          reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    ID              reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    RETURN          reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    DEL             reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    FOR             reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    DEBUG           reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    SKIP            reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    BREAK           reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    LET             reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    WHILE           reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    NAMESPACE       reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    CLASS           reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    FUNC            reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    INIT            reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    PYTHON_CODE_EXEC reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    PYTHON_CODE     reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    IF              reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    <               reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    #               reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    (               reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    !               reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    +               reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    -               reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    *               reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    &               reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    {               reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    [               reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    STRING          reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    FALSE           reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    TRUE            reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    FLOAT           reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    INT             reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    NULL            reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    $end            reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)
    }               reduce using rule 63 (variable_operation -> ID EQ_MUL expression ; .)


state 246

    (65) variable_operation -> ID EQ_SUB expression ; .
    SANDBOX         reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    LIMPORT         reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    .               reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    IMPORT          reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    ID              reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    RETURN          reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    DEL             reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    FOR             reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    DEBUG           reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    SKIP            reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    BREAK           reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    LET             reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    WHILE           reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    NAMESPACE       reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    CLASS           reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    FUNC            reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    INIT            reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    PYTHON_CODE_EXEC reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    PYTHON_CODE     reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    IF              reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    <               reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    #               reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    (               reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    !               reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    +               reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    -               reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    *               reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    &               reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    {               reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    [               reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    STRING          reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    FALSE           reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    TRUE            reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    FLOAT           reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    INT             reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    NULL            reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    $end            reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)
    }               reduce using rule 65 (variable_operation -> ID EQ_SUB expression ; .)


state 247

    (67) variable_operation -> ID EQ_ADD expression ; .
    SANDBOX         reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    LIMPORT         reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    .               reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    IMPORT          reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    ID              reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    RETURN          reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    DEL             reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    FOR             reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    DEBUG           reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    SKIP            reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    BREAK           reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    LET             reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    WHILE           reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    NAMESPACE       reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    CLASS           reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    FUNC            reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    INIT            reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    PYTHON_CODE     reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    IF              reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    <               reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    #               reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    (               reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    !               reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    +               reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    -               reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    *               reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    &               reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    {               reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    [               reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    STRING          reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    FALSE           reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    TRUE            reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    FLOAT           reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    INT             reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    NULL            reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    $end            reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)
    }               reduce using rule 67 (variable_operation -> ID EQ_ADD expression ; .)


state 248

    (31) function_call -> ID TARROW ID ( . function_arguments )
    (44) function_arguments -> . kwargs
    (45) function_arguments -> . positional_args , kwargs
    (46) function_arguments -> . positional_args
    (53) kwargs -> . ID = expression
    (54) kwargs -> . kwargs , id = expression
    (51) positional_args -> . expression
    (52) positional_args -> . positional_args , expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    ID              shift and go to state 166
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    function_arguments             shift and go to state 280
    kwargs                         shift and go to state 164
    positional_args                shift and go to state 165
    expression                     shift and go to state 142
    id                             shift and go to state 54
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 249

    (49) for_loop -> FOR expression IN expression . { program }
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    {               shift and go to state 281
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 250

    (55) variable_assignment -> LET get_index = expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 282
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 251

    (56) variable_assignment -> LET ID : ID . = expression ;
    =               shift and go to state 283


state 252

    (57) variable_assignment -> LET ID = expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 284
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 253

    (50) while_loop -> WHILE ( expression ) . { program }
    {               shift and go to state 285


state 254

    (128) items -> expression , expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ,               reduce using rule 128 (items -> expression , expression .)
    )               reduce using rule 128 (items -> expression , expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 255

    (125) _numpy -> ( expression , ) .
    ^               reduce using rule 125 (_numpy -> ( expression , ) .)
    [               reduce using rule 125 (_numpy -> ( expression , ) .)
    COLON_COLON     reduce using rule 125 (_numpy -> ( expression , ) .)
    (               reduce using rule 125 (_numpy -> ( expression , ) .)
    >               reduce using rule 125 (_numpy -> ( expression , ) .)
    <               reduce using rule 125 (_numpy -> ( expression , ) .)
    &               reduce using rule 125 (_numpy -> ( expression , ) .)
    |               reduce using rule 125 (_numpy -> ( expression , ) .)
    EQ_GREATER      reduce using rule 125 (_numpy -> ( expression , ) .)
    EQ_LESS         reduce using rule 125 (_numpy -> ( expression , ) .)
    NOT_EQEQ        reduce using rule 125 (_numpy -> ( expression , ) .)
    EQEQ            reduce using rule 125 (_numpy -> ( expression , ) .)
    %               reduce using rule 125 (_numpy -> ( expression , ) .)
    *               reduce using rule 125 (_numpy -> ( expression , ) .)
    /               reduce using rule 125 (_numpy -> ( expression , ) .)
    -               reduce using rule 125 (_numpy -> ( expression , ) .)
    +               reduce using rule 125 (_numpy -> ( expression , ) .)
    :               reduce using rule 125 (_numpy -> ( expression , ) .)
    ,               reduce using rule 125 (_numpy -> ( expression , ) .)
    }               reduce using rule 125 (_numpy -> ( expression , ) .)
    ;               reduce using rule 125 (_numpy -> ( expression , ) .)
    IN              reduce using rule 125 (_numpy -> ( expression , ) .)
    )               reduce using rule 125 (_numpy -> ( expression , ) .)
    ]               reduce using rule 125 (_numpy -> ( expression , ) .)
    EQ_DIV          reduce using rule 125 (_numpy -> ( expression , ) .)
    EQ_MOD          reduce using rule 125 (_numpy -> ( expression , ) .)
    EQ_MUL          reduce using rule 125 (_numpy -> ( expression , ) .)
    EQ_SUB          reduce using rule 125 (_numpy -> ( expression , ) .)
    EQ_ADD          reduce using rule 125 (_numpy -> ( expression , ) .)
    =               reduce using rule 125 (_numpy -> ( expression , ) .)
    ?               reduce using rule 125 (_numpy -> ( expression , ) .)
    {               reduce using rule 125 (_numpy -> ( expression , ) .)
    SANDBOX         reduce using rule 125 (_numpy -> ( expression , ) .)
    LIMPORT         reduce using rule 125 (_numpy -> ( expression , ) .)
    .               reduce using rule 125 (_numpy -> ( expression , ) .)
    IMPORT          reduce using rule 125 (_numpy -> ( expression , ) .)
    ID              reduce using rule 125 (_numpy -> ( expression , ) .)
    RETURN          reduce using rule 125 (_numpy -> ( expression , ) .)
    DEL             reduce using rule 125 (_numpy -> ( expression , ) .)
    FOR             reduce using rule 125 (_numpy -> ( expression , ) .)
    DEBUG           reduce using rule 125 (_numpy -> ( expression , ) .)
    SKIP            reduce using rule 125 (_numpy -> ( expression , ) .)
    BREAK           reduce using rule 125 (_numpy -> ( expression , ) .)
    LET             reduce using rule 125 (_numpy -> ( expression , ) .)
    WHILE           reduce using rule 125 (_numpy -> ( expression , ) .)
    NAMESPACE       reduce using rule 125 (_numpy -> ( expression , ) .)
    CLASS           reduce using rule 125 (_numpy -> ( expression , ) .)
    FUNC            reduce using rule 125 (_numpy -> ( expression , ) .)
    INIT            reduce using rule 125 (_numpy -> ( expression , ) .)
    PYTHON_CODE_EXEC reduce using rule 125 (_numpy -> ( expression , ) .)
    PYTHON_CODE     reduce using rule 125 (_numpy -> ( expression , ) .)
    IF              reduce using rule 125 (_numpy -> ( expression , ) .)
    #               reduce using rule 125 (_numpy -> ( expression , ) .)
    !               reduce using rule 125 (_numpy -> ( expression , ) .)
    STRING          reduce using rule 125 (_numpy -> ( expression , ) .)
    FALSE           reduce using rule 125 (_numpy -> ( expression , ) .)
    TRUE            reduce using rule 125 (_numpy -> ( expression , ) .)
    FLOAT           reduce using rule 125 (_numpy -> ( expression , ) .)
    INT             reduce using rule 125 (_numpy -> ( expression , ) .)
    NULL            reduce using rule 125 (_numpy -> ( expression , ) .)
    $end            reduce using rule 125 (_numpy -> ( expression , ) .)


state 256

    (126) _numpy -> ( items , ) .
    ^               reduce using rule 126 (_numpy -> ( items , ) .)
    [               reduce using rule 126 (_numpy -> ( items , ) .)
    COLON_COLON     reduce using rule 126 (_numpy -> ( items , ) .)
    (               reduce using rule 126 (_numpy -> ( items , ) .)
    >               reduce using rule 126 (_numpy -> ( items , ) .)
    <               reduce using rule 126 (_numpy -> ( items , ) .)
    &               reduce using rule 126 (_numpy -> ( items , ) .)
    |               reduce using rule 126 (_numpy -> ( items , ) .)
    EQ_GREATER      reduce using rule 126 (_numpy -> ( items , ) .)
    EQ_LESS         reduce using rule 126 (_numpy -> ( items , ) .)
    NOT_EQEQ        reduce using rule 126 (_numpy -> ( items , ) .)
    EQEQ            reduce using rule 126 (_numpy -> ( items , ) .)
    %               reduce using rule 126 (_numpy -> ( items , ) .)
    *               reduce using rule 126 (_numpy -> ( items , ) .)
    /               reduce using rule 126 (_numpy -> ( items , ) .)
    -               reduce using rule 126 (_numpy -> ( items , ) .)
    +               reduce using rule 126 (_numpy -> ( items , ) .)
    :               reduce using rule 126 (_numpy -> ( items , ) .)
    ,               reduce using rule 126 (_numpy -> ( items , ) .)
    }               reduce using rule 126 (_numpy -> ( items , ) .)
    ;               reduce using rule 126 (_numpy -> ( items , ) .)
    IN              reduce using rule 126 (_numpy -> ( items , ) .)
    )               reduce using rule 126 (_numpy -> ( items , ) .)
    ]               reduce using rule 126 (_numpy -> ( items , ) .)
    EQ_DIV          reduce using rule 126 (_numpy -> ( items , ) .)
    EQ_MOD          reduce using rule 126 (_numpy -> ( items , ) .)
    EQ_MUL          reduce using rule 126 (_numpy -> ( items , ) .)
    EQ_SUB          reduce using rule 126 (_numpy -> ( items , ) .)
    EQ_ADD          reduce using rule 126 (_numpy -> ( items , ) .)
    =               reduce using rule 126 (_numpy -> ( items , ) .)
    ?               reduce using rule 126 (_numpy -> ( items , ) .)
    {               reduce using rule 126 (_numpy -> ( items , ) .)
    SANDBOX         reduce using rule 126 (_numpy -> ( items , ) .)
    LIMPORT         reduce using rule 126 (_numpy -> ( items , ) .)
    .               reduce using rule 126 (_numpy -> ( items , ) .)
    IMPORT          reduce using rule 126 (_numpy -> ( items , ) .)
    ID              reduce using rule 126 (_numpy -> ( items , ) .)
    RETURN          reduce using rule 126 (_numpy -> ( items , ) .)
    DEL             reduce using rule 126 (_numpy -> ( items , ) .)
    FOR             reduce using rule 126 (_numpy -> ( items , ) .)
    DEBUG           reduce using rule 126 (_numpy -> ( items , ) .)
    SKIP            reduce using rule 126 (_numpy -> ( items , ) .)
    BREAK           reduce using rule 126 (_numpy -> ( items , ) .)
    LET             reduce using rule 126 (_numpy -> ( items , ) .)
    WHILE           reduce using rule 126 (_numpy -> ( items , ) .)
    NAMESPACE       reduce using rule 126 (_numpy -> ( items , ) .)
    CLASS           reduce using rule 126 (_numpy -> ( items , ) .)
    FUNC            reduce using rule 126 (_numpy -> ( items , ) .)
    INIT            reduce using rule 126 (_numpy -> ( items , ) .)
    PYTHON_CODE_EXEC reduce using rule 126 (_numpy -> ( items , ) .)
    PYTHON_CODE     reduce using rule 126 (_numpy -> ( items , ) .)
    IF              reduce using rule 126 (_numpy -> ( items , ) .)
    #               reduce using rule 126 (_numpy -> ( items , ) .)
    !               reduce using rule 126 (_numpy -> ( items , ) .)
    STRING          reduce using rule 126 (_numpy -> ( items , ) .)
    FALSE           reduce using rule 126 (_numpy -> ( items , ) .)
    TRUE            reduce using rule 126 (_numpy -> ( items , ) .)
    FLOAT           reduce using rule 126 (_numpy -> ( items , ) .)
    INT             reduce using rule 126 (_numpy -> ( items , ) .)
    NULL            reduce using rule 126 (_numpy -> ( items , ) .)
    $end            reduce using rule 126 (_numpy -> ( items , ) .)


state 257

    (129) items -> items , expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ,               reduce using rule 129 (items -> items , expression .)
    )               reduce using rule 129 (items -> items , expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 258

    (77) else_statement -> ELSE { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 286
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 259

    (76) else_if_statement -> ELSE IF ( . expression ) { program }
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 287
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 260

    (68) class_attribute_assignment -> class_attribute = expression ; .
    SANDBOX         reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    LIMPORT         reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    .               reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    IMPORT          reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    ID              reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    RETURN          reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    DEL             reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    FOR             reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    DEBUG           reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    SKIP            reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    BREAK           reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    LET             reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    WHILE           reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    NAMESPACE       reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    CLASS           reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    FUNC            reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    INIT            reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    PYTHON_CODE     reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    IF              reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    <               reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    #               reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    (               reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    !               reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    +               reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    -               reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    *               reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    &               reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    {               reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    [               reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    STRING          reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    FALSE           reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    TRUE            reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    FLOAT           reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    INT             reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    NULL            reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    $end            reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)
    }               reduce using rule 68 (class_attribute_assignment -> class_attribute = expression ; .)


state 261

    (47) class_declaration -> NAMESPACE ID { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 288
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 262

    (48) class_declaration -> CLASS ID { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 289
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 263

    (39) function_declaration -> FUNC ID ( empty . ) { program } TARROW expression
    )               shift and go to state 290


state 264

    (43) function_declaration -> FUNC ID ( function_arguments . ) { program } TARROW expression
    )               shift and go to state 291


state 265

    (40) function_declaration -> FUNC ID COLON_COLON ID . ( empty ) { program } TARROW expression
    (41) function_declaration -> FUNC ID COLON_COLON ID . ( function_arguments ) { program } TARROW expression
    (               shift and go to state 292


state 266

    (42) function_declaration -> INIT ( function_arguments ) . { program } ;
    {               shift and go to state 293


state 267

    (121) _list -> [ positional_args , ] .
    ^               reduce using rule 121 (_list -> [ positional_args , ] .)
    [               reduce using rule 121 (_list -> [ positional_args , ] .)
    COLON_COLON     reduce using rule 121 (_list -> [ positional_args , ] .)
    (               reduce using rule 121 (_list -> [ positional_args , ] .)
    >               reduce using rule 121 (_list -> [ positional_args , ] .)
    <               reduce using rule 121 (_list -> [ positional_args , ] .)
    &               reduce using rule 121 (_list -> [ positional_args , ] .)
    |               reduce using rule 121 (_list -> [ positional_args , ] .)
    EQ_GREATER      reduce using rule 121 (_list -> [ positional_args , ] .)
    EQ_LESS         reduce using rule 121 (_list -> [ positional_args , ] .)
    NOT_EQEQ        reduce using rule 121 (_list -> [ positional_args , ] .)
    EQEQ            reduce using rule 121 (_list -> [ positional_args , ] .)
    %               reduce using rule 121 (_list -> [ positional_args , ] .)
    *               reduce using rule 121 (_list -> [ positional_args , ] .)
    /               reduce using rule 121 (_list -> [ positional_args , ] .)
    -               reduce using rule 121 (_list -> [ positional_args , ] .)
    +               reduce using rule 121 (_list -> [ positional_args , ] .)
    :               reduce using rule 121 (_list -> [ positional_args , ] .)
    ,               reduce using rule 121 (_list -> [ positional_args , ] .)
    }               reduce using rule 121 (_list -> [ positional_args , ] .)
    ;               reduce using rule 121 (_list -> [ positional_args , ] .)
    IN              reduce using rule 121 (_list -> [ positional_args , ] .)
    )               reduce using rule 121 (_list -> [ positional_args , ] .)
    ]               reduce using rule 121 (_list -> [ positional_args , ] .)
    EQ_DIV          reduce using rule 121 (_list -> [ positional_args , ] .)
    EQ_MOD          reduce using rule 121 (_list -> [ positional_args , ] .)
    EQ_MUL          reduce using rule 121 (_list -> [ positional_args , ] .)
    EQ_SUB          reduce using rule 121 (_list -> [ positional_args , ] .)
    EQ_ADD          reduce using rule 121 (_list -> [ positional_args , ] .)
    =               reduce using rule 121 (_list -> [ positional_args , ] .)
    ?               reduce using rule 121 (_list -> [ positional_args , ] .)
    {               reduce using rule 121 (_list -> [ positional_args , ] .)
    SANDBOX         reduce using rule 121 (_list -> [ positional_args , ] .)
    LIMPORT         reduce using rule 121 (_list -> [ positional_args , ] .)
    .               reduce using rule 121 (_list -> [ positional_args , ] .)
    IMPORT          reduce using rule 121 (_list -> [ positional_args , ] .)
    ID              reduce using rule 121 (_list -> [ positional_args , ] .)
    RETURN          reduce using rule 121 (_list -> [ positional_args , ] .)
    DEL             reduce using rule 121 (_list -> [ positional_args , ] .)
    FOR             reduce using rule 121 (_list -> [ positional_args , ] .)
    DEBUG           reduce using rule 121 (_list -> [ positional_args , ] .)
    SKIP            reduce using rule 121 (_list -> [ positional_args , ] .)
    BREAK           reduce using rule 121 (_list -> [ positional_args , ] .)
    LET             reduce using rule 121 (_list -> [ positional_args , ] .)
    WHILE           reduce using rule 121 (_list -> [ positional_args , ] .)
    NAMESPACE       reduce using rule 121 (_list -> [ positional_args , ] .)
    CLASS           reduce using rule 121 (_list -> [ positional_args , ] .)
    FUNC            reduce using rule 121 (_list -> [ positional_args , ] .)
    INIT            reduce using rule 121 (_list -> [ positional_args , ] .)
    PYTHON_CODE_EXEC reduce using rule 121 (_list -> [ positional_args , ] .)
    PYTHON_CODE     reduce using rule 121 (_list -> [ positional_args , ] .)
    IF              reduce using rule 121 (_list -> [ positional_args , ] .)
    #               reduce using rule 121 (_list -> [ positional_args , ] .)
    !               reduce using rule 121 (_list -> [ positional_args , ] .)
    STRING          reduce using rule 121 (_list -> [ positional_args , ] .)
    FALSE           reduce using rule 121 (_list -> [ positional_args , ] .)
    TRUE            reduce using rule 121 (_list -> [ positional_args , ] .)
    FLOAT           reduce using rule 121 (_list -> [ positional_args , ] .)
    INT             reduce using rule 121 (_list -> [ positional_args , ] .)
    NULL            reduce using rule 121 (_list -> [ positional_args , ] .)
    $end            reduce using rule 121 (_list -> [ positional_args , ] .)


state 268

    (73) if_statement -> IF ( expression ) . { program }
    {               shift and go to state 294


state 269

    (30) function_call -> < ID > expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               reduce using rule 30 (function_call -> < ID > expression .)
    ^               reduce using rule 30 (function_call -> < ID > expression .)
    [               reduce using rule 30 (function_call -> < ID > expression .)
    (               reduce using rule 30 (function_call -> < ID > expression .)
    >               reduce using rule 30 (function_call -> < ID > expression .)
    <               reduce using rule 30 (function_call -> < ID > expression .)
    &               reduce using rule 30 (function_call -> < ID > expression .)
    |               reduce using rule 30 (function_call -> < ID > expression .)
    EQ_GREATER      reduce using rule 30 (function_call -> < ID > expression .)
    EQ_LESS         reduce using rule 30 (function_call -> < ID > expression .)
    NOT_EQEQ        reduce using rule 30 (function_call -> < ID > expression .)
    EQEQ            reduce using rule 30 (function_call -> < ID > expression .)
    :               reduce using rule 30 (function_call -> < ID > expression .)
    ,               reduce using rule 30 (function_call -> < ID > expression .)
    }               reduce using rule 30 (function_call -> < ID > expression .)
    IN              reduce using rule 30 (function_call -> < ID > expression .)
    )               reduce using rule 30 (function_call -> < ID > expression .)
    ]               reduce using rule 30 (function_call -> < ID > expression .)
    EQ_DIV          reduce using rule 30 (function_call -> < ID > expression .)
    EQ_MOD          reduce using rule 30 (function_call -> < ID > expression .)
    EQ_MUL          reduce using rule 30 (function_call -> < ID > expression .)
    EQ_SUB          reduce using rule 30 (function_call -> < ID > expression .)
    EQ_ADD          reduce using rule 30 (function_call -> < ID > expression .)
    =               reduce using rule 30 (function_call -> < ID > expression .)
    ?               reduce using rule 30 (function_call -> < ID > expression .)
    {               reduce using rule 30 (function_call -> < ID > expression .)
    SANDBOX         reduce using rule 30 (function_call -> < ID > expression .)
    LIMPORT         reduce using rule 30 (function_call -> < ID > expression .)
    .               reduce using rule 30 (function_call -> < ID > expression .)
    IMPORT          reduce using rule 30 (function_call -> < ID > expression .)
    ID              reduce using rule 30 (function_call -> < ID > expression .)
    RETURN          reduce using rule 30 (function_call -> < ID > expression .)
    DEL             reduce using rule 30 (function_call -> < ID > expression .)
    FOR             reduce using rule 30 (function_call -> < ID > expression .)
    DEBUG           reduce using rule 30 (function_call -> < ID > expression .)
    SKIP            reduce using rule 30 (function_call -> < ID > expression .)
    BREAK           reduce using rule 30 (function_call -> < ID > expression .)
    LET             reduce using rule 30 (function_call -> < ID > expression .)
    WHILE           reduce using rule 30 (function_call -> < ID > expression .)
    NAMESPACE       reduce using rule 30 (function_call -> < ID > expression .)
    CLASS           reduce using rule 30 (function_call -> < ID > expression .)
    FUNC            reduce using rule 30 (function_call -> < ID > expression .)
    INIT            reduce using rule 30 (function_call -> < ID > expression .)
    PYTHON_CODE_EXEC reduce using rule 30 (function_call -> < ID > expression .)
    PYTHON_CODE     reduce using rule 30 (function_call -> < ID > expression .)
    IF              reduce using rule 30 (function_call -> < ID > expression .)
    #               reduce using rule 30 (function_call -> < ID > expression .)
    !               reduce using rule 30 (function_call -> < ID > expression .)
    STRING          reduce using rule 30 (function_call -> < ID > expression .)
    FALSE           reduce using rule 30 (function_call -> < ID > expression .)
    TRUE            reduce using rule 30 (function_call -> < ID > expression .)
    FLOAT           reduce using rule 30 (function_call -> < ID > expression .)
    INT             reduce using rule 30 (function_call -> < ID > expression .)
    NULL            reduce using rule 30 (function_call -> < ID > expression .)
    $end            reduce using rule 30 (function_call -> < ID > expression .)
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85


state 270

    (34) function_call -> # DEFINE expression ? . ID
    ID              shift and go to state 295


state 271

    (139) assoc_array_items -> assoc_array_items , expression : . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 296
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 272

    (29) function_call -> expression ( empty ) FARROW . { program }
    {               shift and go to state 297


state 273

    (36) function_call -> expression ( function_arguments ) FARROW . { program }
    {               shift and go to state 298


state 274

    (54) kwargs -> kwargs , id . = expression
    =               shift and go to state 299


state 275

    (136) id -> ID .
    =               reduce using rule 136 (id -> ID .)


state 276

    (45) function_arguments -> positional_args , kwargs .
    (54) kwargs -> kwargs . , id = expression
    )               reduce using rule 45 (function_arguments -> positional_args , kwargs .)
    ,               shift and go to state 233


state 277

    (53) kwargs -> ID = expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ,               reduce using rule 53 (kwargs -> ID = expression .)
    )               reduce using rule 53 (kwargs -> ID = expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 278

    (27) function_call -> . ENV FROM ID { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    program                        shift and go to state 300
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 279

    (28) function_call -> . ENV { program } .
    ;               reduce using rule 28 (function_call -> . ENV { program } .)
    ^               reduce using rule 28 (function_call -> . ENV { program } .)
    [               reduce using rule 28 (function_call -> . ENV { program } .)
    COLON_COLON     reduce using rule 28 (function_call -> . ENV { program } .)
    (               reduce using rule 28 (function_call -> . ENV { program } .)
    >               reduce using rule 28 (function_call -> . ENV { program } .)
    <               reduce using rule 28 (function_call -> . ENV { program } .)
    &               reduce using rule 28 (function_call -> . ENV { program } .)
    |               reduce using rule 28 (function_call -> . ENV { program } .)
    EQ_GREATER      reduce using rule 28 (function_call -> . ENV { program } .)
    EQ_LESS         reduce using rule 28 (function_call -> . ENV { program } .)
    NOT_EQEQ        reduce using rule 28 (function_call -> . ENV { program } .)
    EQEQ            reduce using rule 28 (function_call -> . ENV { program } .)
    %               reduce using rule 28 (function_call -> . ENV { program } .)
    *               reduce using rule 28 (function_call -> . ENV { program } .)
    /               reduce using rule 28 (function_call -> . ENV { program } .)
    -               reduce using rule 28 (function_call -> . ENV { program } .)
    +               reduce using rule 28 (function_call -> . ENV { program } .)
    :               reduce using rule 28 (function_call -> . ENV { program } .)
    ,               reduce using rule 28 (function_call -> . ENV { program } .)
    }               reduce using rule 28 (function_call -> . ENV { program } .)
    IN              reduce using rule 28 (function_call -> . ENV { program } .)
    )               reduce using rule 28 (function_call -> . ENV { program } .)
    ]               reduce using rule 28 (function_call -> . ENV { program } .)
    EQ_DIV          reduce using rule 28 (function_call -> . ENV { program } .)
    EQ_MOD          reduce using rule 28 (function_call -> . ENV { program } .)
    EQ_MUL          reduce using rule 28 (function_call -> . ENV { program } .)
    EQ_SUB          reduce using rule 28 (function_call -> . ENV { program } .)
    EQ_ADD          reduce using rule 28 (function_call -> . ENV { program } .)
    =               reduce using rule 28 (function_call -> . ENV { program } .)
    ?               reduce using rule 28 (function_call -> . ENV { program } .)
    {               reduce using rule 28 (function_call -> . ENV { program } .)
    SANDBOX         reduce using rule 28 (function_call -> . ENV { program } .)
    LIMPORT         reduce using rule 28 (function_call -> . ENV { program } .)
    .               reduce using rule 28 (function_call -> . ENV { program } .)
    IMPORT          reduce using rule 28 (function_call -> . ENV { program } .)
    ID              reduce using rule 28 (function_call -> . ENV { program } .)
    RETURN          reduce using rule 28 (function_call -> . ENV { program } .)
    DEL             reduce using rule 28 (function_call -> . ENV { program } .)
    FOR             reduce using rule 28 (function_call -> . ENV { program } .)
    DEBUG           reduce using rule 28 (function_call -> . ENV { program } .)
    SKIP            reduce using rule 28 (function_call -> . ENV { program } .)
    BREAK           reduce using rule 28 (function_call -> . ENV { program } .)
    LET             reduce using rule 28 (function_call -> . ENV { program } .)
    WHILE           reduce using rule 28 (function_call -> . ENV { program } .)
    NAMESPACE       reduce using rule 28 (function_call -> . ENV { program } .)
    CLASS           reduce using rule 28 (function_call -> . ENV { program } .)
    FUNC            reduce using rule 28 (function_call -> . ENV { program } .)
    INIT            reduce using rule 28 (function_call -> . ENV { program } .)
    PYTHON_CODE_EXEC reduce using rule 28 (function_call -> . ENV { program } .)
    PYTHON_CODE     reduce using rule 28 (function_call -> . ENV { program } .)
    IF              reduce using rule 28 (function_call -> . ENV { program } .)
    #               reduce using rule 28 (function_call -> . ENV { program } .)
    !               reduce using rule 28 (function_call -> . ENV { program } .)
    STRING          reduce using rule 28 (function_call -> . ENV { program } .)
    FALSE           reduce using rule 28 (function_call -> . ENV { program } .)
    TRUE            reduce using rule 28 (function_call -> . ENV { program } .)
    FLOAT           reduce using rule 28 (function_call -> . ENV { program } .)
    INT             reduce using rule 28 (function_call -> . ENV { program } .)
    NULL            reduce using rule 28 (function_call -> . ENV { program } .)
    $end            reduce using rule 28 (function_call -> . ENV { program } .)


state 280

    (31) function_call -> ID TARROW ID ( function_arguments . )
    )               shift and go to state 301


state 281

    (49) for_loop -> FOR expression IN expression { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    expression                     shift and go to state 22
    program                        shift and go to state 302
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 282

    (55) variable_assignment -> LET get_index = expression ; .
    SANDBOX         reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    LIMPORT         reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    .               reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    IMPORT          reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    ID              reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    RETURN          reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    DEL             reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    FOR             reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    DEBUG           reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    SKIP            reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    BREAK           reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    LET             reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    WHILE           reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    NAMESPACE       reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    CLASS           reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    FUNC            reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    INIT            reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    PYTHON_CODE     reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    IF              reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    <               reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    #               reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    (               reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    !               reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    +               reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    -               reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    *               reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    &               reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    {               reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    [               reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    STRING          reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    FALSE           reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    TRUE            reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    FLOAT           reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    INT             reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    NULL            reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    $end            reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)
    }               reduce using rule 55 (variable_assignment -> LET get_index = expression ; .)


state 283

    (56) variable_assignment -> LET ID : ID = . expression ;
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 303
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 284

    (57) variable_assignment -> LET ID = expression ; .
    SANDBOX         reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    LIMPORT         reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    .               reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    IMPORT          reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    ID              reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    RETURN          reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    DEL             reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    FOR             reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    DEBUG           reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    SKIP            reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    BREAK           reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    LET             reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    WHILE           reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    NAMESPACE       reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    CLASS           reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    FUNC            reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    INIT            reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    PYTHON_CODE     reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    IF              reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    <               reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    #               reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    (               reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    !               reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    +               reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    -               reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    *               reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    &               reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    {               reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    [               reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    STRING          reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    FALSE           reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    TRUE            reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    FLOAT           reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    INT             reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    NULL            reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    $end            reduce using rule 57 (variable_assignment -> LET ID = expression ; .)
    }               reduce using rule 57 (variable_assignment -> LET ID = expression ; .)


state 285

    (50) while_loop -> WHILE ( expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    expression                     shift and go to state 22
    program                        shift and go to state 304
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 286

    (77) else_statement -> ELSE { program } .
    SANDBOX         reduce using rule 77 (else_statement -> ELSE { program } .)
    LIMPORT         reduce using rule 77 (else_statement -> ELSE { program } .)
    .               reduce using rule 77 (else_statement -> ELSE { program } .)
    IMPORT          reduce using rule 77 (else_statement -> ELSE { program } .)
    ID              reduce using rule 77 (else_statement -> ELSE { program } .)
    RETURN          reduce using rule 77 (else_statement -> ELSE { program } .)
    DEL             reduce using rule 77 (else_statement -> ELSE { program } .)
    FOR             reduce using rule 77 (else_statement -> ELSE { program } .)
    DEBUG           reduce using rule 77 (else_statement -> ELSE { program } .)
    SKIP            reduce using rule 77 (else_statement -> ELSE { program } .)
    BREAK           reduce using rule 77 (else_statement -> ELSE { program } .)
    LET             reduce using rule 77 (else_statement -> ELSE { program } .)
    WHILE           reduce using rule 77 (else_statement -> ELSE { program } .)
    NAMESPACE       reduce using rule 77 (else_statement -> ELSE { program } .)
    CLASS           reduce using rule 77 (else_statement -> ELSE { program } .)
    FUNC            reduce using rule 77 (else_statement -> ELSE { program } .)
    INIT            reduce using rule 77 (else_statement -> ELSE { program } .)
    PYTHON_CODE_EXEC reduce using rule 77 (else_statement -> ELSE { program } .)
    PYTHON_CODE     reduce using rule 77 (else_statement -> ELSE { program } .)
    IF              reduce using rule 77 (else_statement -> ELSE { program } .)
    <               reduce using rule 77 (else_statement -> ELSE { program } .)
    #               reduce using rule 77 (else_statement -> ELSE { program } .)
    (               reduce using rule 77 (else_statement -> ELSE { program } .)
    !               reduce using rule 77 (else_statement -> ELSE { program } .)
    +               reduce using rule 77 (else_statement -> ELSE { program } .)
    -               reduce using rule 77 (else_statement -> ELSE { program } .)
    *               reduce using rule 77 (else_statement -> ELSE { program } .)
    &               reduce using rule 77 (else_statement -> ELSE { program } .)
    {               reduce using rule 77 (else_statement -> ELSE { program } .)
    [               reduce using rule 77 (else_statement -> ELSE { program } .)
    STRING          reduce using rule 77 (else_statement -> ELSE { program } .)
    FALSE           reduce using rule 77 (else_statement -> ELSE { program } .)
    TRUE            reduce using rule 77 (else_statement -> ELSE { program } .)
    FLOAT           reduce using rule 77 (else_statement -> ELSE { program } .)
    INT             reduce using rule 77 (else_statement -> ELSE { program } .)
    NULL            reduce using rule 77 (else_statement -> ELSE { program } .)
    $end            reduce using rule 77 (else_statement -> ELSE { program } .)
    }               reduce using rule 77 (else_statement -> ELSE { program } .)


state 287

    (76) else_if_statement -> ELSE IF ( expression . ) { program }
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    )               shift and go to state 305
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 288

    (47) class_declaration -> NAMESPACE ID { program } .
    SANDBOX         reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    LIMPORT         reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    .               reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    IMPORT          reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    ID              reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    RETURN          reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    DEL             reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    FOR             reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    DEBUG           reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    SKIP            reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    BREAK           reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    LET             reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    WHILE           reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    NAMESPACE       reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    CLASS           reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    FUNC            reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    INIT            reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    PYTHON_CODE_EXEC reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    PYTHON_CODE     reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    IF              reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    <               reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    #               reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    (               reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    !               reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    +               reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    -               reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    *               reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    &               reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    {               reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    [               reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    STRING          reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    FALSE           reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    TRUE            reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    FLOAT           reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    INT             reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    NULL            reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    $end            reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)
    }               reduce using rule 47 (class_declaration -> NAMESPACE ID { program } .)


state 289

    (48) class_declaration -> CLASS ID { program } .
    SANDBOX         reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    LIMPORT         reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    .               reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    IMPORT          reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    ID              reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    RETURN          reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    DEL             reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    FOR             reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    DEBUG           reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    SKIP            reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    BREAK           reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    LET             reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    WHILE           reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    NAMESPACE       reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    CLASS           reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    FUNC            reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    INIT            reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    PYTHON_CODE_EXEC reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    PYTHON_CODE     reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    IF              reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    <               reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    #               reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    (               reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    !               reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    +               reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    -               reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    *               reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    &               reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    {               reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    [               reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    STRING          reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    FALSE           reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    TRUE            reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    FLOAT           reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    INT             reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    NULL            reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    $end            reduce using rule 48 (class_declaration -> CLASS ID { program } .)
    }               reduce using rule 48 (class_declaration -> CLASS ID { program } .)


state 290

    (39) function_declaration -> FUNC ID ( empty ) . { program } TARROW expression
    {               shift and go to state 306


state 291

    (43) function_declaration -> FUNC ID ( function_arguments ) . { program } TARROW expression
    {               shift and go to state 307


state 292

    (40) function_declaration -> FUNC ID COLON_COLON ID ( . empty ) { program } TARROW expression
    (41) function_declaration -> FUNC ID COLON_COLON ID ( . function_arguments ) { program } TARROW expression
    (142) empty -> .
    (44) function_arguments -> . kwargs
    (45) function_arguments -> . positional_args , kwargs
    (46) function_arguments -> . positional_args
    (53) kwargs -> . ID = expression
    (54) kwargs -> . kwargs , id = expression
    (51) positional_args -> . expression
    (52) positional_args -> . positional_args , expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    )               reduce using rule 142 (empty -> .)
    ID              shift and go to state 166
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    empty                          shift and go to state 308
    expression                     shift and go to state 142
    function_arguments             shift and go to state 309
    kwargs                         shift and go to state 164
    positional_args                shift and go to state 165
    id                             shift and go to state 54
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 293

    (42) function_declaration -> INIT ( function_arguments ) { . program } ;
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    program                        shift and go to state 310
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 294

    (73) if_statement -> IF ( expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    expression                     shift and go to state 22
    program                        shift and go to state 311
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 295

    (34) function_call -> # DEFINE expression ? ID .
    ;               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    ^               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    [               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    COLON_COLON     reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    (               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    >               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    <               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    &               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    |               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    EQ_GREATER      reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    EQ_LESS         reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    NOT_EQEQ        reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    EQEQ            reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    %               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    *               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    /               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    -               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    +               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    :               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    ,               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    }               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    IN              reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    )               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    ]               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    EQ_DIV          reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    EQ_MOD          reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    EQ_MUL          reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    EQ_SUB          reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    EQ_ADD          reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    =               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    ?               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    {               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    SANDBOX         reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    LIMPORT         reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    .               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    IMPORT          reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    ID              reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    RETURN          reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    DEL             reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    FOR             reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    DEBUG           reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    SKIP            reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    BREAK           reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    LET             reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    WHILE           reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    NAMESPACE       reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    CLASS           reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    FUNC            reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    INIT            reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    PYTHON_CODE_EXEC reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    PYTHON_CODE     reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    IF              reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    #               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    !               reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    STRING          reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    FALSE           reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    TRUE            reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    FLOAT           reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    INT             reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    NULL            reduce using rule 34 (function_call -> # DEFINE expression ? ID .)
    $end            reduce using rule 34 (function_call -> # DEFINE expression ? ID .)


state 296

    (139) assoc_array_items -> assoc_array_items , expression : expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    }               reduce using rule 139 (assoc_array_items -> assoc_array_items , expression : expression .)
    ,               reduce using rule 139 (assoc_array_items -> assoc_array_items , expression : expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 297

    (29) function_call -> expression ( empty ) FARROW { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    expression                     shift and go to state 22
    empty                          shift and go to state 2
    program                        shift and go to state 312
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 298

    (36) function_call -> expression ( function_arguments ) FARROW { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    expression                     shift and go to state 22
    program                        shift and go to state 313
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 299

    (54) kwargs -> kwargs , id = . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    id                             shift and go to state 54
    expression                     shift and go to state 314
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 300

    (27) function_call -> . ENV FROM ID { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 315
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 301

    (31) function_call -> ID TARROW ID ( function_arguments ) .
    ;               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    ^               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    [               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    COLON_COLON     reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    (               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    >               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    <               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    &               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    |               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    EQ_GREATER      reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    EQ_LESS         reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    NOT_EQEQ        reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    EQEQ            reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    %               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    *               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    /               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    -               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    +               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    :               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    ,               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    }               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    IN              reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    )               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    ]               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    EQ_DIV          reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    EQ_MOD          reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    EQ_MUL          reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    EQ_SUB          reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    EQ_ADD          reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    =               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    ?               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    {               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    SANDBOX         reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    LIMPORT         reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    .               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    IMPORT          reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    ID              reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    RETURN          reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    DEL             reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    FOR             reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    DEBUG           reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    SKIP            reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    BREAK           reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    LET             reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    WHILE           reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    NAMESPACE       reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    CLASS           reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    FUNC            reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    INIT            reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    PYTHON_CODE_EXEC reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    PYTHON_CODE     reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    IF              reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    #               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    !               reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    STRING          reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    FALSE           reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    TRUE            reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    FLOAT           reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    INT             reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    NULL            reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)
    $end            reduce using rule 31 (function_call -> ID TARROW ID ( function_arguments ) .)


state 302

    (49) for_loop -> FOR expression IN expression { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 316
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    expression                     shift and go to state 22
    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 303

    (56) variable_assignment -> LET ID : ID = expression . ;
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 317
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 304

    (50) while_loop -> WHILE ( expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 318
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    expression                     shift and go to state 22
    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 305

    (76) else_if_statement -> ELSE IF ( expression ) . { program }
    {               shift and go to state 319


state 306

    (39) function_declaration -> FUNC ID ( empty ) { . program } TARROW expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    empty                          shift and go to state 2
    program                        shift and go to state 320
    expression                     shift and go to state 22
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 307

    (43) function_declaration -> FUNC ID ( function_arguments ) { . program } TARROW expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    program                        shift and go to state 321
    expression                     shift and go to state 22
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 308

    (40) function_declaration -> FUNC ID COLON_COLON ID ( empty . ) { program } TARROW expression
    )               shift and go to state 322


state 309

    (41) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments . ) { program } TARROW expression
    )               shift and go to state 323


state 310

    (42) function_declaration -> INIT ( function_arguments ) { program . } ;
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 324
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 311

    (73) if_statement -> IF ( expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 325
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    expression                     shift and go to state 22
    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 312

    (29) function_call -> expression ( empty ) FARROW { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 326
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    expression                     shift and go to state 22
    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 313

    (36) function_call -> expression ( function_arguments ) FARROW { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 327
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    expression                     shift and go to state 22
    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 314

    (54) kwargs -> kwargs , id = expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
    ,               reduce using rule 54 (kwargs -> kwargs , id = expression .)
    )               reduce using rule 54 (kwargs -> kwargs , id = expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 315

    (27) function_call -> . ENV FROM ID { program } .
    ;               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    ^               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    [               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    COLON_COLON     reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    (               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    >               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    <               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    &               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    |               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    EQ_GREATER      reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    EQ_LESS         reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    NOT_EQEQ        reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    EQEQ            reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    %               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    *               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    /               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    -               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    +               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    :               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    ,               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    }               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    IN              reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    )               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    ]               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    EQ_DIV          reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    EQ_MOD          reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    EQ_MUL          reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    EQ_SUB          reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    EQ_ADD          reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    =               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    ?               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    {               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    SANDBOX         reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    LIMPORT         reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    .               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    IMPORT          reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    ID              reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    RETURN          reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    DEL             reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    FOR             reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    DEBUG           reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    SKIP            reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    BREAK           reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    LET             reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    WHILE           reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    NAMESPACE       reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    CLASS           reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    FUNC            reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    INIT            reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    PYTHON_CODE_EXEC reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    PYTHON_CODE     reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    IF              reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    #               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    !               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    STRING          reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    FALSE           reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    TRUE            reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    FLOAT           reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    INT             reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    NULL            reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    $end            reduce using rule 27 (function_call -> . ENV FROM ID { program } .)


state 316

    (49) for_loop -> FOR expression IN expression { program } .
    SANDBOX         reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    LIMPORT         reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    .               reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    IMPORT          reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    ID              reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    RETURN          reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    DEL             reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    FOR             reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    DEBUG           reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    SKIP            reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    BREAK           reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    LET             reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    WHILE           reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    NAMESPACE       reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    CLASS           reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    FUNC            reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    INIT            reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    PYTHON_CODE_EXEC reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    PYTHON_CODE     reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    IF              reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    <               reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    #               reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    (               reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    !               reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    +               reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    -               reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    *               reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    &               reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    {               reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    [               reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    STRING          reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    FALSE           reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    TRUE            reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    FLOAT           reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    INT             reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    NULL            reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    $end            reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)
    }               reduce using rule 49 (for_loop -> FOR expression IN expression { program } .)


state 317

    (56) variable_assignment -> LET ID : ID = expression ; .
    SANDBOX         reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    LIMPORT         reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    .               reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    IMPORT          reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    ID              reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    RETURN          reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    DEL             reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    FOR             reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    DEBUG           reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    SKIP            reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    BREAK           reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    LET             reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    WHILE           reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    NAMESPACE       reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    CLASS           reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    FUNC            reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    INIT            reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    PYTHON_CODE     reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    IF              reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    <               reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    #               reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    (               reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    !               reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    +               reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    -               reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    *               reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    &               reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    {               reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    [               reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    STRING          reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    FALSE           reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    TRUE            reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    FLOAT           reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    INT             reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    NULL            reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    $end            reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)
    }               reduce using rule 56 (variable_assignment -> LET ID : ID = expression ; .)


state 318

    (50) while_loop -> WHILE ( expression ) { program } .
    SANDBOX         reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    LIMPORT         reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    .               reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    IMPORT          reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    ID              reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    RETURN          reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    DEL             reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    FOR             reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    DEBUG           reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    SKIP            reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    BREAK           reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    LET             reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    WHILE           reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    NAMESPACE       reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    CLASS           reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    FUNC            reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    INIT            reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    IF              reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    <               reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    #               reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    (               reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    !               reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    +               reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    -               reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    *               reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    &               reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    {               reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    [               reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    STRING          reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    FALSE           reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    TRUE            reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    FLOAT           reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    INT             reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    NULL            reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    $end            reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)
    }               reduce using rule 50 (while_loop -> WHILE ( expression ) { program } .)


state 319

    (76) else_if_statement -> ELSE IF ( expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    expression                     shift and go to state 22
    program                        shift and go to state 328
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 320

    (39) function_declaration -> FUNC ID ( empty ) { program . } TARROW expression
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 329
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    expression                     shift and go to state 22
    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 321

    (43) function_declaration -> FUNC ID ( function_arguments ) { program . } TARROW expression
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 330
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    expression                     shift and go to state 22
    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 322

    (40) function_declaration -> FUNC ID COLON_COLON ID ( empty ) . { program } TARROW expression
    {               shift and go to state 331


state 323

    (41) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) . { program } TARROW expression
    {               shift and go to state 332


state 324

    (42) function_declaration -> INIT ( function_arguments ) { program } . ;
    ;               shift and go to state 333


state 325

    (73) if_statement -> IF ( expression ) { program } .
    ELSE            reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    SANDBOX         reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    LIMPORT         reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    .               reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    IMPORT          reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    ID              reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    RETURN          reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    DEL             reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    FOR             reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    DEBUG           reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    SKIP            reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    BREAK           reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    LET             reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    WHILE           reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    NAMESPACE       reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    CLASS           reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    FUNC            reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    INIT            reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    IF              reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    <               reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    #               reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    (               reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    !               reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    +               reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    -               reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    *               reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    &               reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    {               reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    [               reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    STRING          reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    FALSE           reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    TRUE            reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    FLOAT           reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    INT             reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    NULL            reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    $end            reduce using rule 73 (if_statement -> IF ( expression ) { program } .)
    }               reduce using rule 73 (if_statement -> IF ( expression ) { program } .)


state 326

    (29) function_call -> expression ( empty ) FARROW { program } .
    ;               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    ^               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    [               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    COLON_COLON     reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    (               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    >               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    <               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    &               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    |               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_GREATER      reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_LESS         reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    NOT_EQEQ        reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    EQEQ            reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    %               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    *               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    /               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    -               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    +               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    :               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    ,               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    }               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    IN              reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    )               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    ]               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_DIV          reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_MOD          reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_MUL          reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_SUB          reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_ADD          reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    =               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    ?               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    {               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    SANDBOX         reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    LIMPORT         reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    .               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    IMPORT          reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    ID              reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    RETURN          reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    DEL             reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    FOR             reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    DEBUG           reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    SKIP            reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    BREAK           reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    LET             reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    WHILE           reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    NAMESPACE       reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    CLASS           reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    FUNC            reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    INIT            reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    PYTHON_CODE_EXEC reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    PYTHON_CODE     reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    IF              reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    #               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    !               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    STRING          reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    FALSE           reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    TRUE            reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    FLOAT           reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    INT             reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    NULL            reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    $end            reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)


state 327

    (36) function_call -> expression ( function_arguments ) FARROW { program } .
    ;               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ^               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    [               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    COLON_COLON     reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    (               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    >               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    <               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    &               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    |               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_GREATER      reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_LESS         reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    NOT_EQEQ        reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQEQ            reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    %               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    *               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    /               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    -               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    +               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    :               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ,               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    }               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    IN              reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    )               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ]               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_DIV          reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_MOD          reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_MUL          reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_SUB          reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_ADD          reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    =               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ?               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    {               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    SANDBOX         reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    LIMPORT         reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    .               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    IMPORT          reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ID              reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    RETURN          reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    DEL             reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FOR             reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    DEBUG           reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    SKIP            reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    BREAK           reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    LET             reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    WHILE           reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    NAMESPACE       reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    CLASS           reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FUNC            reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    INIT            reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    PYTHON_CODE_EXEC reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    PYTHON_CODE     reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    IF              reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    #               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    !               reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    STRING          reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FALSE           reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    TRUE            reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FLOAT           reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    INT             reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    NULL            reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)
    $end            reduce using rule 36 (function_call -> expression ( function_arguments ) FARROW { program } .)


state 328

    (76) else_if_statement -> ELSE IF ( expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 334
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    expression                     shift and go to state 22
    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 329

    (39) function_declaration -> FUNC ID ( empty ) { program } . TARROW expression
    TARROW          shift and go to state 335


state 330

    (43) function_declaration -> FUNC ID ( function_arguments ) { program } . TARROW expression
    TARROW          shift and go to state 336


state 331

    (40) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { . program } TARROW expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    empty                          shift and go to state 2
    program                        shift and go to state 337
    expression                     shift and go to state 22
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 332

    (41) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { . program } TARROW expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (142) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               reduce using rule 142 (empty -> .)
    SANDBOX         reduce using rule 142 (empty -> .)
    LIMPORT         reduce using rule 142 (empty -> .)
    .               reduce using rule 142 (empty -> .)
    IMPORT          reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    DEL             reduce using rule 142 (empty -> .)
    FOR             reduce using rule 142 (empty -> .)
    DEBUG           reduce using rule 142 (empty -> .)
    SKIP            reduce using rule 142 (empty -> .)
    BREAK           reduce using rule 142 (empty -> .)
    LET             reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    NAMESPACE       reduce using rule 142 (empty -> .)
    CLASS           reduce using rule 142 (empty -> .)
    FUNC            reduce using rule 142 (empty -> .)
    INIT            reduce using rule 142 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 142 (empty -> .)
    PYTHON_CODE     reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    #               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    {               reduce using rule 142 (empty -> .)
    [               reduce using rule 142 (empty -> .)
    STRING          reduce using rule 142 (empty -> .)
    FALSE           reduce using rule 142 (empty -> .)
    TRUE            reduce using rule 142 (empty -> .)
    FLOAT           reduce using rule 142 (empty -> .)
    INT             reduce using rule 142 (empty -> .)
    NULL            reduce using rule 142 (empty -> .)
    <               shift and go to state 48
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61

    program                        shift and go to state 338
    expression                     shift and go to state 22
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 333

    (42) function_declaration -> INIT ( function_arguments ) { program } ; .
    SANDBOX         reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    LIMPORT         reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    .               reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    IMPORT          reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    ID              reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    RETURN          reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    DEL             reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    FOR             reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    DEBUG           reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    SKIP            reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    BREAK           reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    LET             reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    WHILE           reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    NAMESPACE       reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    CLASS           reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    FUNC            reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    INIT            reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    PYTHON_CODE_EXEC reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    PYTHON_CODE     reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    IF              reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    <               reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    #               reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    (               reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    !               reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    +               reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    -               reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    *               reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    &               reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    {               reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    [               reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    STRING          reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    FALSE           reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    TRUE            reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    FLOAT           reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    INT             reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    NULL            reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    $end            reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)
    }               reduce using rule 42 (function_declaration -> INIT ( function_arguments ) { program } ; .)


state 334

    (76) else_if_statement -> ELSE IF ( expression ) { program } .
    ELSE            reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    SANDBOX         reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    LIMPORT         reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    .               reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    IMPORT          reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    ID              reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    RETURN          reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    DEL             reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FOR             reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    DEBUG           reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    SKIP            reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    BREAK           reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    LET             reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    WHILE           reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    NAMESPACE       reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    CLASS           reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FUNC            reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    INIT            reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    IF              reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    <               reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    #               reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    (               reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    !               reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    +               reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    -               reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    *               reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    &               reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    {               reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    [               reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    STRING          reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FALSE           reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    TRUE            reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FLOAT           reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    INT             reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    NULL            reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    $end            reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)
    }               reduce using rule 76 (else_if_statement -> ELSE IF ( expression ) { program } .)


state 335

    (39) function_declaration -> FUNC ID ( empty ) { program } TARROW . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 339
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 336

    (43) function_declaration -> FUNC ID ( function_arguments ) { program } TARROW . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 340
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 337

    (40) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program . } TARROW expression
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 341
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    expression                     shift and go to state 22
    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 338

    (41) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program . } TARROW expression
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (79) import_statement -> . . SELFISH ;
    (80) import_statement -> . . GLOBAL ;
    (81) import_statement -> . IMPORT expression ;
    (58) variable_operation -> . get_index EQ_DIV expression ;
    (59) variable_operation -> . ID EQ_DIV expression ;
    (60) variable_operation -> . get_index EQ_MOD expression ;
    (61) variable_operation -> . ID EQ_MOD expression ;
    (62) variable_operation -> . get_index EQ_MUL expression ;
    (63) variable_operation -> . ID EQ_MUL expression ;
    (64) variable_operation -> . get_index EQ_SUB expression ;
    (65) variable_operation -> . ID EQ_SUB expression ;
    (66) variable_operation -> . get_index EQ_ADD expression ;
    (67) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (78) delete_statement -> . DEL ID ;
    (49) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (55) variable_assignment -> . LET get_index = expression ;
    (56) variable_assignment -> . LET ID : ID = expression ;
    (57) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (50) while_loop -> . WHILE ( expression ) { program }
    (69) conditional -> . if_statement else_statement
    (70) conditional -> . if_statement else_if_loop else_statement
    (71) conditional -> . if_statement else_if_loop
    (72) conditional -> . if_statement
    (68) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (47) class_declaration -> . NAMESPACE ID { program }
    (48) class_declaration -> . CLASS ID { program }
    (39) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (40) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (41) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (42) function_declaration -> . INIT ( function_arguments ) { program } ;
    (43) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (73) if_statement -> . IF ( expression ) { program }
    (135) class_attribute -> . expression COLON_COLON ID
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    }               shift and go to state 342
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    DEBUG           shift and go to state 30
    SKIP            shift and go to state 31
    BREAK           shift and go to state 32
    LET             shift and go to state 33
    WHILE           shift and go to state 35
    NAMESPACE       shift and go to state 40
    CLASS           shift and go to state 41
    FUNC            shift and go to state 42
    INIT            shift and go to state 43
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46
    IF              shift and go to state 47
    <               shift and go to state 48
    #               shift and go to state 49
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70

    expression                     shift and go to state 22
    statement                      shift and go to state 71
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 34
    if_statement                   shift and go to state 37
    class_attribute                shift and go to state 38
    function_call                  shift and go to state 39
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59

state 339

    (39) function_declaration -> FUNC ID ( empty ) { program } TARROW expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    SANDBOX         reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    LIMPORT         reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    .               reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    IMPORT          reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    ID              reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    RETURN          reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    DEL             reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    FOR             reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    DEBUG           reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    SKIP            reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    BREAK           reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    LET             reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    WHILE           reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    NAMESPACE       reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    CLASS           reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    FUNC            reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    INIT            reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    PYTHON_CODE_EXEC reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    PYTHON_CODE     reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    IF              reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    #               reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    !               reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    {               reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    STRING          reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    FALSE           reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    TRUE            reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    FLOAT           reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    INT             reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    NULL            reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    $end            reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    }               reduce using rule 39 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 340

    (43) function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    SANDBOX         reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    LIMPORT         reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    .               reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    IMPORT          reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    ID              reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    RETURN          reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    DEL             reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    FOR             reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    DEBUG           reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    SKIP            reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    BREAK           reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    LET             reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    WHILE           reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    NAMESPACE       reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    CLASS           reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    FUNC            reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    INIT            reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    PYTHON_CODE_EXEC reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    PYTHON_CODE     reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    IF              reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    #               reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    !               reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    {               reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    STRING          reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    FALSE           reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    TRUE            reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    FLOAT           reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    INT             reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    NULL            reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    $end            reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    }               reduce using rule 43 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 341

    (40) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } . TARROW expression
    TARROW          shift and go to state 343


state 342

    (41) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } . TARROW expression
    TARROW          shift and go to state 344


state 343

    (40) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 345
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 344

    (41) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW . expression
    (82) expression -> . assoc_array
    (83) expression -> . _numpy
    (84) expression -> . _list
    (85) expression -> . _tuple
    (86) expression -> . class_attribute
    (87) expression -> . id
    (88) expression -> . string
    (89) expression -> . bool
    (90) expression -> . float
    (91) expression -> . int
    (92) expression -> . null
    (93) expression -> . get_index
    (94) expression -> . function_call
    (95) expression -> . python_code
    (96) expression -> . ( expression )
    (97) expression -> . expression > expression
    (98) expression -> . expression < expression
    (99) expression -> . ! expression
    (100) expression -> . expression & expression
    (101) expression -> . expression | expression
    (102) expression -> . expression EQ_GREATER expression
    (103) expression -> . expression EQ_LESS expression
    (104) expression -> . expression NOT_EQEQ expression
    (105) expression -> . expression EQEQ expression
    (106) expression -> . expression % expression
    (107) expression -> . expression * expression
    (108) expression -> . expression / expression
    (109) expression -> . expression - expression
    (110) expression -> . expression + expression
    (111) expression -> . + expression
    (112) expression -> . - expression
    (113) expression -> . * ID
    (114) expression -> . & ID
    (115) expression -> . ID OF ID
    (137) assoc_array -> . { assoc_array_items }
    (123) _numpy -> . ( , )
    (124) _numpy -> . ( )
    (125) _numpy -> . ( expression , )
    (126) _numpy -> . ( items , )
    (127) _numpy -> . ( items )
    (121) _list -> . [ positional_args , ]
    (122) _list -> . [ positional_args ]
    (119) _tuple -> . { positional_args , }
    (120) _tuple -> . { positional_args }
    (135) class_attribute -> . expression COLON_COLON ID
    (136) id -> . ID
    (131) string -> . STRING
    (133) bool -> . FALSE
    (134) bool -> . TRUE
    (132) float -> . FLOAT
    (130) int -> . INT
    (116) null -> . NULL
    (117) get_index -> . expression ^ expression
    (118) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID ( function_arguments )
    (32) function_call -> . ID TARROW ID
    (33) function_call -> . # DEPENDS expression
    (34) function_call -> . # DEFINE expression ? ID
    (35) function_call -> . expression ( empty )
    (36) function_call -> . expression ( function_arguments ) FARROW { program }
    (37) function_call -> . expression ( function_arguments )
    (140) python_code -> . PYTHON_CODE_EXEC
    (141) python_code -> . PYTHON_CODE
    (               shift and go to state 36
    !               shift and go to state 60
    +               shift and go to state 64
    -               shift and go to state 63
    *               shift and go to state 62
    &               shift and go to state 61
    ID              shift and go to state 80
    {               shift and go to state 20
    [               shift and go to state 44
    STRING          shift and go to state 65
    FALSE           shift and go to state 66
    TRUE            shift and go to state 67
    FLOAT           shift and go to state 68
    INT             shift and go to state 69
    NULL            shift and go to state 70
    .               shift and go to state 81
    <               shift and go to state 48
    #               shift and go to state 49
    PYTHON_CODE_EXEC shift and go to state 45
    PYTHON_CODE     shift and go to state 46

    expression                     shift and go to state 346
    assoc_array                    shift and go to state 50
    _numpy                         shift and go to state 51
    _list                          shift and go to state 52
    _tuple                         shift and go to state 53
    class_attribute                shift and go to state 76
    id                             shift and go to state 54
    string                         shift and go to state 55
    bool                           shift and go to state 56
    float                          shift and go to state 57
    int                            shift and go to state 58
    null                           shift and go to state 59
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79

state 345

    (40) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    SANDBOX         reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    LIMPORT         reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    .               reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    IMPORT          reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    ID              reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    RETURN          reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    DEL             reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FOR             reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    DEBUG           reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    SKIP            reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    BREAK           reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    LET             reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    WHILE           reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    NAMESPACE       reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    CLASS           reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FUNC            reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    INIT            reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    PYTHON_CODE_EXEC reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    PYTHON_CODE     reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    IF              reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    #               reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    !               reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    {               reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    STRING          reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FALSE           reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    TRUE            reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FLOAT           reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    INT             reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    NULL            reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    $end            reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    }               reduce using rule 40 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


state 346

    (41) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .
    (97) expression -> expression . > expression
    (98) expression -> expression . < expression
    (100) expression -> expression . & expression
    (101) expression -> expression . | expression
    (102) expression -> expression . EQ_GREATER expression
    (103) expression -> expression . EQ_LESS expression
    (104) expression -> expression . NOT_EQEQ expression
    (105) expression -> expression . EQEQ expression
    (106) expression -> expression . % expression
    (107) expression -> expression . * expression
    (108) expression -> expression . / expression
    (109) expression -> expression . - expression
    (110) expression -> expression . + expression
    (135) class_attribute -> expression . COLON_COLON ID
    (117) get_index -> expression . ^ expression
    (118) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (35) function_call -> expression . ( empty )
    (36) function_call -> expression . ( function_arguments ) FARROW { program }
    (37) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    SANDBOX         reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    LIMPORT         reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    .               reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    IMPORT          reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    ID              reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    RETURN          reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    DEL             reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FOR             reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    DEBUG           reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    SKIP            reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    BREAK           reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    LET             reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    WHILE           reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    NAMESPACE       reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    CLASS           reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FUNC            reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    INIT            reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    PYTHON_CODE_EXEC reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    PYTHON_CODE     reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    IF              reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    #               reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    !               reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    {               reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    STRING          reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FALSE           reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    TRUE            reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FLOAT           reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    INT             reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    NULL            reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    $end            reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    }               reduce using rule 41 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    >               shift and go to state 87
    <               shift and go to state 88
    &               shift and go to state 89
    |               shift and go to state 90
    EQ_GREATER      shift and go to state 91
    EQ_LESS         shift and go to state 92
    NOT_EQEQ        shift and go to state 93
    EQEQ            shift and go to state 94
    %               shift and go to state 95
    *               shift and go to state 96
    /               shift and go to state 97
    -               shift and go to state 98
    +               shift and go to state 99
    COLON_COLON     shift and go to state 85
    ^               shift and go to state 83
    [               shift and go to state 84
    (               shift and go to state 86


Conflicts:

shift/reduce conflict for > in state 159 resolved as shift
shift/reduce conflict for < in state 159 resolved as shift
shift/reduce conflict for & in state 159 resolved as shift
shift/reduce conflict for | in state 159 resolved as shift
shift/reduce conflict for EQ_GREATER in state 159 resolved as shift
shift/reduce conflict for EQ_LESS in state 159 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 159 resolved as shift
shift/reduce conflict for EQEQ in state 159 resolved as shift
shift/reduce conflict for % in state 159 resolved as shift
shift/reduce conflict for * in state 159 resolved as shift
shift/reduce conflict for / in state 159 resolved as shift
shift/reduce conflict for - in state 159 resolved as shift
shift/reduce conflict for + in state 159 resolved as shift
shift/reduce conflict for COLON_COLON in state 159 resolved as shift
shift/reduce conflict for ^ in state 159 resolved as shift
shift/reduce conflict for [ in state 159 resolved as shift
shift/reduce conflict for ( in state 159 resolved as shift
shift/reduce conflict for ( in state 195 resolved as shift
shift/reduce conflict for > in state 223 resolved as shift
shift/reduce conflict for < in state 223 resolved as shift
shift/reduce conflict for & in state 223 resolved as shift
shift/reduce conflict for | in state 223 resolved as shift
shift/reduce conflict for EQ_GREATER in state 223 resolved as shift
shift/reduce conflict for EQ_LESS in state 223 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 223 resolved as shift
shift/reduce conflict for EQEQ in state 223 resolved as shift
shift/reduce conflict for % in state 223 resolved as shift
shift/reduce conflict for * in state 223 resolved as shift
shift/reduce conflict for / in state 223 resolved as shift
shift/reduce conflict for - in state 223 resolved as shift
shift/reduce conflict for + in state 223 resolved as shift
shift/reduce conflict for COLON_COLON in state 223 resolved as shift
shift/reduce conflict for ^ in state 223 resolved as shift
shift/reduce conflict for [ in state 223 resolved as shift
shift/reduce conflict for ( in state 223 resolved as shift
shift/reduce conflict for < in state 339 resolved as shift
shift/reduce conflict for & in state 339 resolved as shift
shift/reduce conflict for * in state 339 resolved as shift
shift/reduce conflict for - in state 339 resolved as shift
shift/reduce conflict for + in state 339 resolved as shift
shift/reduce conflict for [ in state 339 resolved as shift
shift/reduce conflict for ( in state 339 resolved as shift
shift/reduce conflict for < in state 340 resolved as shift
shift/reduce conflict for & in state 340 resolved as shift
shift/reduce conflict for * in state 340 resolved as shift
shift/reduce conflict for - in state 340 resolved as shift
shift/reduce conflict for + in state 340 resolved as shift
shift/reduce conflict for [ in state 340 resolved as shift
shift/reduce conflict for ( in state 340 resolved as shift
shift/reduce conflict for < in state 345 resolved as shift
shift/reduce conflict for & in state 345 resolved as shift
shift/reduce conflict for * in state 345 resolved as shift
shift/reduce conflict for - in state 345 resolved as shift
shift/reduce conflict for + in state 345 resolved as shift
shift/reduce conflict for [ in state 345 resolved as shift
shift/reduce conflict for ( in state 345 resolved as shift
shift/reduce conflict for < in state 346 resolved as shift
shift/reduce conflict for & in state 346 resolved as shift
shift/reduce conflict for * in state 346 resolved as shift
shift/reduce conflict for - in state 346 resolved as shift
shift/reduce conflict for + in state 346 resolved as shift
shift/reduce conflict for [ in state 346 resolved as shift
shift/reduce conflict for ( in state 346 resolved as shift