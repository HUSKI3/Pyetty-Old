Grammar:

Rule 0     S' -> program
Rule 1     program -> empty
Rule 2     program -> statement
Rule 3     program -> program statement
Rule 4     statement -> sandbox
Rule 5     statement -> import_statement
Rule 6     statement -> variable_operation
Rule 7     statement -> return_statement
Rule 8     statement -> delete_statement
Rule 9     statement -> for_loop
Rule 10    statement -> break_statement
Rule 11    statement -> variable_assignment
Rule 12    statement -> python_code_statement
Rule 13    statement -> while_loop
Rule 14    statement -> conditional
Rule 15    statement -> class_attribute_assignment
Rule 16    statement -> function_call_statement
Rule 17    statement -> class_declaration
Rule 18    statement -> function_declaration
Rule 19    sandbox -> SANDBOX { program }
Rule 20    sandbox -> LIMPORT expression ;
Rule 21    function_call_statement -> function_call ;
Rule 22    python_code_statement -> python_code ;
Rule 23    break_statement -> SKIP ;
Rule 24    break_statement -> BREAK ;
Rule 25    return_statement -> RETURN expression ;
Rule 26    function_call -> { program }
Rule 27    function_call -> expression ( empty ) FARROW { program }
Rule 28    function_call -> < ID > expression  [precedence=left, level=7]
Rule 29    function_call -> ID TARROW ID
Rule 30    function_call -> # DEPENDS expression
Rule 31    function_call -> # DEFINE expression ? ID
Rule 32    function_call -> expression ( empty )
Rule 33    function_call -> expression ( function_arguments ) FARROW { program }
Rule 34    function_call -> expression ( function_arguments )
Rule 35    debug_call -> ? expression
Rule 36    function_declaration -> FUNC ID ( empty ) { program } TARROW expression
Rule 37    function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
Rule 38    function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
Rule 39    function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression
Rule 40    function_arguments -> kwargs
Rule 41    function_arguments -> positional_args , kwargs  [precedence=left, level=2]
Rule 42    function_arguments -> positional_args
Rule 43    class_declaration -> NAMESPACE ID { program }
Rule 44    class_declaration -> CLASS ID { program }
Rule 45    for_loop -> FOR expression IN expression { program }
Rule 46    while_loop -> WHILE ( expression ) { program }
Rule 47    positional_args -> expression
Rule 48    positional_args -> positional_args , expression  [precedence=left, level=2]
Rule 49    kwargs -> ID = expression  [precedence=right, level=3]
Rule 50    kwargs -> kwargs , id = expression  [precedence=right, level=3]
Rule 51    variable_assignment -> LET get_index = expression ;
Rule 52    variable_assignment -> LET ID : ID = expression ;
Rule 53    variable_assignment -> LET ID = expression ;
Rule 54    variable_operation -> get_index EQ_DIV expression ;
Rule 55    variable_operation -> ID EQ_DIV expression ;
Rule 56    variable_operation -> get_index EQ_MOD expression ;
Rule 57    variable_operation -> ID EQ_MOD expression ;
Rule 58    variable_operation -> get_index EQ_MUL expression ;
Rule 59    variable_operation -> ID EQ_MUL expression ;
Rule 60    variable_operation -> get_index EQ_SUB expression ;
Rule 61    variable_operation -> ID EQ_SUB expression ;
Rule 62    variable_operation -> get_index EQ_ADD expression ;
Rule 63    variable_operation -> ID EQ_ADD expression ;
Rule 64    class_attribute_assignment -> class_attribute = expression ;
Rule 65    conditional -> if_statement else_statement
Rule 66    conditional -> if_statement else_if_loop else_statement
Rule 67    conditional -> if_statement else_if_loop
Rule 68    conditional -> if_statement
Rule 69    if_statement -> IF ( expression ) { program }
Rule 70    else_if_loop -> else_if_statement
Rule 71    else_if_loop -> else_if_loop else_if_statement
Rule 72    else_if_statement -> ELSE IF ( expression ) { program }
Rule 73    else_statement -> ELSE { program }
Rule 74    delete_statement -> DEL ID ;
Rule 75    import_statement -> . GLOBAL ;
Rule 76    import_statement -> IMPORT expression ;
Rule 77    expression -> assoc_array
Rule 78    expression -> _numpy
Rule 79    expression -> _list
Rule 80    expression -> _tuple
Rule 81    expression -> class_attribute
Rule 82    expression -> id
Rule 83    expression -> string
Rule 84    expression -> bool
Rule 85    expression -> float
Rule 86    expression -> int
Rule 87    expression -> null
Rule 88    expression -> get_index
Rule 89    expression -> function_call
Rule 90    expression -> python_code
Rule 91    expression -> ( expression )
Rule 92    expression -> expression > expression  [precedence=left, level=7]
Rule 93    expression -> expression < expression  [precedence=left, level=7]
Rule 94    expression -> ! expression  [precedence=right, level=11]
Rule 95    expression -> expression & expression  [precedence=left, level=5]
Rule 96    expression -> expression | expression  [precedence=left, level=4]
Rule 97    expression -> expression EQ_GREATER expression  [precedence=left, level=7]
Rule 98    expression -> expression EQ_LESS expression  [precedence=left, level=7]
Rule 99    expression -> expression NOT_EQEQ expression  [precedence=left, level=6]
Rule 100   expression -> expression EQEQ expression  [precedence=left, level=6]
Rule 101   expression -> expression % expression  [precedence=left, level=9]
Rule 102   expression -> expression * expression  [precedence=left, level=9]
Rule 103   expression -> expression / expression  [precedence=left, level=9]
Rule 104   expression -> expression - expression  [precedence=left, level=8]
Rule 105   expression -> expression + expression  [precedence=left, level=8]
Rule 106   expression -> + expression  [precedence=right, level=10]
Rule 107   expression -> - expression  [precedence=right, level=10]
Rule 108   expression -> * ID
Rule 109   expression -> & ID
Rule 110   expression -> ID OF ID
Rule 111   null -> NULL
Rule 112   get_index -> expression ^ expression
Rule 113   get_index -> expression [ expression ]
Rule 114   _tuple -> { positional_args , }
Rule 115   _tuple -> { positional_args }
Rule 116   _list -> [ positional_args , ]
Rule 117   _list -> [ positional_args ]
Rule 118   _numpy -> ( , )
Rule 119   _numpy -> ( )
Rule 120   _numpy -> ( expression , )
Rule 121   _numpy -> ( items , )
Rule 122   _numpy -> ( items )
Rule 123   items -> expression , expression  [precedence=left, level=2]
Rule 124   items -> items , expression  [precedence=left, level=2]
Rule 125   int -> INT
Rule 126   string -> STRING
Rule 127   float -> FLOAT
Rule 128   bool -> FALSE
Rule 129   bool -> TRUE
Rule 130   class_attribute -> expression COLON_COLON ID
Rule 131   id -> ID
Rule 132   assoc_array -> { assoc_array_items }
Rule 133   assoc_array_items -> expression : expression
Rule 134   assoc_array_items -> assoc_array_items , expression : expression
Rule 135   python_code -> PYTHON_CODE_EXEC
Rule 136   python_code -> PYTHON_CODE
Rule 137   empty -> <empty>  [precedence=left, level=1]

Unused terminals:

    CHECK
    TELSE

Terminals, with rules where they appear:

!                    : 94
#                    : 30 31
%                    : 101
&                    : 95 109
(                    : 27 32 33 34 36 37 38 39 46 69 72 91 118 119 120 121 122
)                    : 27 32 33 34 36 37 38 39 46 69 72 91 118 119 120 121 122
*                    : 102 108
+                    : 105 106
,                    : 41 48 50 114 116 118 120 121 123 124 134
-                    : 104 107
.                    : 75
/                    : 103
:                    : 52 133 134
;                    : 20 21 22 23 24 25 51 52 53 54 55 56 57 58 59 60 61 62 63 64 74 75 76
<                    : 28 93
=                    : 49 50 51 52 53 64
>                    : 28 92
?                    : 31 35
BREAK                : 24
CHECK                : 
CLASS                : 44
COLON_COLON          : 37 38 130
DEFINE               : 31
DEL                  : 74
DEPENDS              : 30
ELSE                 : 72 73
EQEQ                 : 100
EQ_ADD               : 62 63
EQ_DIV               : 54 55
EQ_GREATER           : 97
EQ_LESS              : 98
EQ_MOD               : 56 57
EQ_MUL               : 58 59
EQ_SUB               : 60 61
FALSE                : 128
FARROW               : 27 33
FLOAT                : 127
FOR                  : 45
FUNC                 : 36 37 38 39
GLOBAL               : 75
ID                   : 28 29 29 31 36 37 37 38 38 39 43 44 49 52 52 53 55 57 59 61 63 74 108 109 110 110 130 131
IF                   : 69 72
IMPORT               : 76
IN                   : 45
INT                  : 125
LET                  : 51 52 53
LIMPORT              : 20
NAMESPACE            : 43
NOT_EQEQ             : 99
NULL                 : 111
OF                   : 110
PYTHON_CODE          : 136
PYTHON_CODE_EXEC     : 135
RETURN               : 25
SANDBOX              : 19
SKIP                 : 23
STRING               : 126
TARROW               : 29 36 37 38 39
TELSE                : 
TRUE                 : 129
WHILE                : 46
[                    : 113 116 117
]                    : 113 116 117
^                    : 112
error                : 
{                    : 19 26 27 33 36 37 38 39 43 44 45 46 69 72 73 114 115 132
|                    : 96
}                    : 19 26 27 33 36 37 38 39 43 44 45 46 69 72 73 114 115 132

Nonterminals, with rules where they appear:

_list                : 79
_numpy               : 78
_tuple               : 80
assoc_array          : 77
assoc_array_items    : 132 134
bool                 : 84
break_statement      : 10
class_attribute      : 64 81
class_attribute_assignment : 15
class_declaration    : 17
conditional          : 14
debug_call           : 
delete_statement     : 8
else_if_loop         : 66 67 71
else_if_statement    : 70 71
else_statement       : 65 66
empty                : 1 27 32 36 37
expression           : 20 25 27 28 30 31 32 33 34 35 36 37 38 39 45 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 69 72 76 91 92 92 93 93 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 103 104 104 105 105 106 107 112 112 113 113 120 123 123 124 130 133 133 134 134
float                : 85
for_loop             : 9
function_arguments   : 33 34 38 39
function_call        : 21 89
function_call_statement : 16
function_declaration : 18
get_index            : 51 54 56 58 60 62 88
id                   : 50 82
if_statement         : 65 66 67 68
import_statement     : 5
int                  : 86
items                : 121 122 124
kwargs               : 40 41 50
null                 : 87
positional_args      : 41 42 48 114 115 116 117
program              : 3 19 26 27 33 36 37 38 39 43 44 45 46 69 72 73 0
python_code          : 22 90
python_code_statement : 12
return_statement     : 7
sandbox              : 4
statement            : 2 3
string               : 83
variable_assignment  : 11
variable_operation   : 6
while_loop           : 13


state 0

    (0) S' -> . program
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    $end            reduce using rule 137 (empty -> .)
    <               shift and go to state 46
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59

    program                        shift and go to state 1
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 1

    (0) S' -> program .
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    SKIP            shift and go to state 30
    BREAK           shift and go to state 31
    LET             shift and go to state 32
    WHILE           shift and go to state 34
    NAMESPACE       shift and go to state 39
    CLASS           shift and go to state 40
    FUNC            shift and go to state 41
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44
    IF              shift and go to state 45
    {               shift and go to state 20
    <               shift and go to state 46
    #               shift and go to state 47
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68

    statement                      shift and go to state 69
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 2

    (1) program -> empty .
    SANDBOX         reduce using rule 1 (program -> empty .)
    LIMPORT         reduce using rule 1 (program -> empty .)
    .               reduce using rule 1 (program -> empty .)
    IMPORT          reduce using rule 1 (program -> empty .)
    ID              reduce using rule 1 (program -> empty .)
    RETURN          reduce using rule 1 (program -> empty .)
    DEL             reduce using rule 1 (program -> empty .)
    FOR             reduce using rule 1 (program -> empty .)
    SKIP            reduce using rule 1 (program -> empty .)
    BREAK           reduce using rule 1 (program -> empty .)
    LET             reduce using rule 1 (program -> empty .)
    WHILE           reduce using rule 1 (program -> empty .)
    NAMESPACE       reduce using rule 1 (program -> empty .)
    CLASS           reduce using rule 1 (program -> empty .)
    FUNC            reduce using rule 1 (program -> empty .)
    PYTHON_CODE_EXEC reduce using rule 1 (program -> empty .)
    PYTHON_CODE     reduce using rule 1 (program -> empty .)
    IF              reduce using rule 1 (program -> empty .)
    {               reduce using rule 1 (program -> empty .)
    <               reduce using rule 1 (program -> empty .)
    #               reduce using rule 1 (program -> empty .)
    (               reduce using rule 1 (program -> empty .)
    !               reduce using rule 1 (program -> empty .)
    +               reduce using rule 1 (program -> empty .)
    -               reduce using rule 1 (program -> empty .)
    *               reduce using rule 1 (program -> empty .)
    &               reduce using rule 1 (program -> empty .)
    [               reduce using rule 1 (program -> empty .)
    STRING          reduce using rule 1 (program -> empty .)
    FALSE           reduce using rule 1 (program -> empty .)
    TRUE            reduce using rule 1 (program -> empty .)
    FLOAT           reduce using rule 1 (program -> empty .)
    INT             reduce using rule 1 (program -> empty .)
    NULL            reduce using rule 1 (program -> empty .)
    $end            reduce using rule 1 (program -> empty .)
    }               reduce using rule 1 (program -> empty .)


state 3

    (2) program -> statement .
    SANDBOX         reduce using rule 2 (program -> statement .)
    LIMPORT         reduce using rule 2 (program -> statement .)
    .               reduce using rule 2 (program -> statement .)
    IMPORT          reduce using rule 2 (program -> statement .)
    ID              reduce using rule 2 (program -> statement .)
    RETURN          reduce using rule 2 (program -> statement .)
    DEL             reduce using rule 2 (program -> statement .)
    FOR             reduce using rule 2 (program -> statement .)
    SKIP            reduce using rule 2 (program -> statement .)
    BREAK           reduce using rule 2 (program -> statement .)
    LET             reduce using rule 2 (program -> statement .)
    WHILE           reduce using rule 2 (program -> statement .)
    NAMESPACE       reduce using rule 2 (program -> statement .)
    CLASS           reduce using rule 2 (program -> statement .)
    FUNC            reduce using rule 2 (program -> statement .)
    PYTHON_CODE_EXEC reduce using rule 2 (program -> statement .)
    PYTHON_CODE     reduce using rule 2 (program -> statement .)
    IF              reduce using rule 2 (program -> statement .)
    {               reduce using rule 2 (program -> statement .)
    <               reduce using rule 2 (program -> statement .)
    #               reduce using rule 2 (program -> statement .)
    (               reduce using rule 2 (program -> statement .)
    !               reduce using rule 2 (program -> statement .)
    +               reduce using rule 2 (program -> statement .)
    -               reduce using rule 2 (program -> statement .)
    *               reduce using rule 2 (program -> statement .)
    &               reduce using rule 2 (program -> statement .)
    [               reduce using rule 2 (program -> statement .)
    STRING          reduce using rule 2 (program -> statement .)
    FALSE           reduce using rule 2 (program -> statement .)
    TRUE            reduce using rule 2 (program -> statement .)
    FLOAT           reduce using rule 2 (program -> statement .)
    INT             reduce using rule 2 (program -> statement .)
    NULL            reduce using rule 2 (program -> statement .)
    $end            reduce using rule 2 (program -> statement .)
    }               reduce using rule 2 (program -> statement .)


state 4

    (4) statement -> sandbox .
    SANDBOX         reduce using rule 4 (statement -> sandbox .)
    LIMPORT         reduce using rule 4 (statement -> sandbox .)
    .               reduce using rule 4 (statement -> sandbox .)
    IMPORT          reduce using rule 4 (statement -> sandbox .)
    ID              reduce using rule 4 (statement -> sandbox .)
    RETURN          reduce using rule 4 (statement -> sandbox .)
    DEL             reduce using rule 4 (statement -> sandbox .)
    FOR             reduce using rule 4 (statement -> sandbox .)
    SKIP            reduce using rule 4 (statement -> sandbox .)
    BREAK           reduce using rule 4 (statement -> sandbox .)
    LET             reduce using rule 4 (statement -> sandbox .)
    WHILE           reduce using rule 4 (statement -> sandbox .)
    NAMESPACE       reduce using rule 4 (statement -> sandbox .)
    CLASS           reduce using rule 4 (statement -> sandbox .)
    FUNC            reduce using rule 4 (statement -> sandbox .)
    PYTHON_CODE_EXEC reduce using rule 4 (statement -> sandbox .)
    PYTHON_CODE     reduce using rule 4 (statement -> sandbox .)
    IF              reduce using rule 4 (statement -> sandbox .)
    {               reduce using rule 4 (statement -> sandbox .)
    <               reduce using rule 4 (statement -> sandbox .)
    #               reduce using rule 4 (statement -> sandbox .)
    (               reduce using rule 4 (statement -> sandbox .)
    !               reduce using rule 4 (statement -> sandbox .)
    +               reduce using rule 4 (statement -> sandbox .)
    -               reduce using rule 4 (statement -> sandbox .)
    *               reduce using rule 4 (statement -> sandbox .)
    &               reduce using rule 4 (statement -> sandbox .)
    [               reduce using rule 4 (statement -> sandbox .)
    STRING          reduce using rule 4 (statement -> sandbox .)
    FALSE           reduce using rule 4 (statement -> sandbox .)
    TRUE            reduce using rule 4 (statement -> sandbox .)
    FLOAT           reduce using rule 4 (statement -> sandbox .)
    INT             reduce using rule 4 (statement -> sandbox .)
    NULL            reduce using rule 4 (statement -> sandbox .)
    $end            reduce using rule 4 (statement -> sandbox .)
    }               reduce using rule 4 (statement -> sandbox .)


state 5

    (5) statement -> import_statement .
    SANDBOX         reduce using rule 5 (statement -> import_statement .)
    LIMPORT         reduce using rule 5 (statement -> import_statement .)
    .               reduce using rule 5 (statement -> import_statement .)
    IMPORT          reduce using rule 5 (statement -> import_statement .)
    ID              reduce using rule 5 (statement -> import_statement .)
    RETURN          reduce using rule 5 (statement -> import_statement .)
    DEL             reduce using rule 5 (statement -> import_statement .)
    FOR             reduce using rule 5 (statement -> import_statement .)
    SKIP            reduce using rule 5 (statement -> import_statement .)
    BREAK           reduce using rule 5 (statement -> import_statement .)
    LET             reduce using rule 5 (statement -> import_statement .)
    WHILE           reduce using rule 5 (statement -> import_statement .)
    NAMESPACE       reduce using rule 5 (statement -> import_statement .)
    CLASS           reduce using rule 5 (statement -> import_statement .)
    FUNC            reduce using rule 5 (statement -> import_statement .)
    PYTHON_CODE_EXEC reduce using rule 5 (statement -> import_statement .)
    PYTHON_CODE     reduce using rule 5 (statement -> import_statement .)
    IF              reduce using rule 5 (statement -> import_statement .)
    {               reduce using rule 5 (statement -> import_statement .)
    <               reduce using rule 5 (statement -> import_statement .)
    #               reduce using rule 5 (statement -> import_statement .)
    (               reduce using rule 5 (statement -> import_statement .)
    !               reduce using rule 5 (statement -> import_statement .)
    +               reduce using rule 5 (statement -> import_statement .)
    -               reduce using rule 5 (statement -> import_statement .)
    *               reduce using rule 5 (statement -> import_statement .)
    &               reduce using rule 5 (statement -> import_statement .)
    [               reduce using rule 5 (statement -> import_statement .)
    STRING          reduce using rule 5 (statement -> import_statement .)
    FALSE           reduce using rule 5 (statement -> import_statement .)
    TRUE            reduce using rule 5 (statement -> import_statement .)
    FLOAT           reduce using rule 5 (statement -> import_statement .)
    INT             reduce using rule 5 (statement -> import_statement .)
    NULL            reduce using rule 5 (statement -> import_statement .)
    $end            reduce using rule 5 (statement -> import_statement .)
    }               reduce using rule 5 (statement -> import_statement .)


state 6

    (6) statement -> variable_operation .
    SANDBOX         reduce using rule 6 (statement -> variable_operation .)
    LIMPORT         reduce using rule 6 (statement -> variable_operation .)
    .               reduce using rule 6 (statement -> variable_operation .)
    IMPORT          reduce using rule 6 (statement -> variable_operation .)
    ID              reduce using rule 6 (statement -> variable_operation .)
    RETURN          reduce using rule 6 (statement -> variable_operation .)
    DEL             reduce using rule 6 (statement -> variable_operation .)
    FOR             reduce using rule 6 (statement -> variable_operation .)
    SKIP            reduce using rule 6 (statement -> variable_operation .)
    BREAK           reduce using rule 6 (statement -> variable_operation .)
    LET             reduce using rule 6 (statement -> variable_operation .)
    WHILE           reduce using rule 6 (statement -> variable_operation .)
    NAMESPACE       reduce using rule 6 (statement -> variable_operation .)
    CLASS           reduce using rule 6 (statement -> variable_operation .)
    FUNC            reduce using rule 6 (statement -> variable_operation .)
    PYTHON_CODE_EXEC reduce using rule 6 (statement -> variable_operation .)
    PYTHON_CODE     reduce using rule 6 (statement -> variable_operation .)
    IF              reduce using rule 6 (statement -> variable_operation .)
    {               reduce using rule 6 (statement -> variable_operation .)
    <               reduce using rule 6 (statement -> variable_operation .)
    #               reduce using rule 6 (statement -> variable_operation .)
    (               reduce using rule 6 (statement -> variable_operation .)
    !               reduce using rule 6 (statement -> variable_operation .)
    +               reduce using rule 6 (statement -> variable_operation .)
    -               reduce using rule 6 (statement -> variable_operation .)
    *               reduce using rule 6 (statement -> variable_operation .)
    &               reduce using rule 6 (statement -> variable_operation .)
    [               reduce using rule 6 (statement -> variable_operation .)
    STRING          reduce using rule 6 (statement -> variable_operation .)
    FALSE           reduce using rule 6 (statement -> variable_operation .)
    TRUE            reduce using rule 6 (statement -> variable_operation .)
    FLOAT           reduce using rule 6 (statement -> variable_operation .)
    INT             reduce using rule 6 (statement -> variable_operation .)
    NULL            reduce using rule 6 (statement -> variable_operation .)
    $end            reduce using rule 6 (statement -> variable_operation .)
    }               reduce using rule 6 (statement -> variable_operation .)


state 7

    (7) statement -> return_statement .
    SANDBOX         reduce using rule 7 (statement -> return_statement .)
    LIMPORT         reduce using rule 7 (statement -> return_statement .)
    .               reduce using rule 7 (statement -> return_statement .)
    IMPORT          reduce using rule 7 (statement -> return_statement .)
    ID              reduce using rule 7 (statement -> return_statement .)
    RETURN          reduce using rule 7 (statement -> return_statement .)
    DEL             reduce using rule 7 (statement -> return_statement .)
    FOR             reduce using rule 7 (statement -> return_statement .)
    SKIP            reduce using rule 7 (statement -> return_statement .)
    BREAK           reduce using rule 7 (statement -> return_statement .)
    LET             reduce using rule 7 (statement -> return_statement .)
    WHILE           reduce using rule 7 (statement -> return_statement .)
    NAMESPACE       reduce using rule 7 (statement -> return_statement .)
    CLASS           reduce using rule 7 (statement -> return_statement .)
    FUNC            reduce using rule 7 (statement -> return_statement .)
    PYTHON_CODE_EXEC reduce using rule 7 (statement -> return_statement .)
    PYTHON_CODE     reduce using rule 7 (statement -> return_statement .)
    IF              reduce using rule 7 (statement -> return_statement .)
    {               reduce using rule 7 (statement -> return_statement .)
    <               reduce using rule 7 (statement -> return_statement .)
    #               reduce using rule 7 (statement -> return_statement .)
    (               reduce using rule 7 (statement -> return_statement .)
    !               reduce using rule 7 (statement -> return_statement .)
    +               reduce using rule 7 (statement -> return_statement .)
    -               reduce using rule 7 (statement -> return_statement .)
    *               reduce using rule 7 (statement -> return_statement .)
    &               reduce using rule 7 (statement -> return_statement .)
    [               reduce using rule 7 (statement -> return_statement .)
    STRING          reduce using rule 7 (statement -> return_statement .)
    FALSE           reduce using rule 7 (statement -> return_statement .)
    TRUE            reduce using rule 7 (statement -> return_statement .)
    FLOAT           reduce using rule 7 (statement -> return_statement .)
    INT             reduce using rule 7 (statement -> return_statement .)
    NULL            reduce using rule 7 (statement -> return_statement .)
    $end            reduce using rule 7 (statement -> return_statement .)
    }               reduce using rule 7 (statement -> return_statement .)


state 8

    (8) statement -> delete_statement .
    SANDBOX         reduce using rule 8 (statement -> delete_statement .)
    LIMPORT         reduce using rule 8 (statement -> delete_statement .)
    .               reduce using rule 8 (statement -> delete_statement .)
    IMPORT          reduce using rule 8 (statement -> delete_statement .)
    ID              reduce using rule 8 (statement -> delete_statement .)
    RETURN          reduce using rule 8 (statement -> delete_statement .)
    DEL             reduce using rule 8 (statement -> delete_statement .)
    FOR             reduce using rule 8 (statement -> delete_statement .)
    SKIP            reduce using rule 8 (statement -> delete_statement .)
    BREAK           reduce using rule 8 (statement -> delete_statement .)
    LET             reduce using rule 8 (statement -> delete_statement .)
    WHILE           reduce using rule 8 (statement -> delete_statement .)
    NAMESPACE       reduce using rule 8 (statement -> delete_statement .)
    CLASS           reduce using rule 8 (statement -> delete_statement .)
    FUNC            reduce using rule 8 (statement -> delete_statement .)
    PYTHON_CODE_EXEC reduce using rule 8 (statement -> delete_statement .)
    PYTHON_CODE     reduce using rule 8 (statement -> delete_statement .)
    IF              reduce using rule 8 (statement -> delete_statement .)
    {               reduce using rule 8 (statement -> delete_statement .)
    <               reduce using rule 8 (statement -> delete_statement .)
    #               reduce using rule 8 (statement -> delete_statement .)
    (               reduce using rule 8 (statement -> delete_statement .)
    !               reduce using rule 8 (statement -> delete_statement .)
    +               reduce using rule 8 (statement -> delete_statement .)
    -               reduce using rule 8 (statement -> delete_statement .)
    *               reduce using rule 8 (statement -> delete_statement .)
    &               reduce using rule 8 (statement -> delete_statement .)
    [               reduce using rule 8 (statement -> delete_statement .)
    STRING          reduce using rule 8 (statement -> delete_statement .)
    FALSE           reduce using rule 8 (statement -> delete_statement .)
    TRUE            reduce using rule 8 (statement -> delete_statement .)
    FLOAT           reduce using rule 8 (statement -> delete_statement .)
    INT             reduce using rule 8 (statement -> delete_statement .)
    NULL            reduce using rule 8 (statement -> delete_statement .)
    $end            reduce using rule 8 (statement -> delete_statement .)
    }               reduce using rule 8 (statement -> delete_statement .)


state 9

    (9) statement -> for_loop .
    SANDBOX         reduce using rule 9 (statement -> for_loop .)
    LIMPORT         reduce using rule 9 (statement -> for_loop .)
    .               reduce using rule 9 (statement -> for_loop .)
    IMPORT          reduce using rule 9 (statement -> for_loop .)
    ID              reduce using rule 9 (statement -> for_loop .)
    RETURN          reduce using rule 9 (statement -> for_loop .)
    DEL             reduce using rule 9 (statement -> for_loop .)
    FOR             reduce using rule 9 (statement -> for_loop .)
    SKIP            reduce using rule 9 (statement -> for_loop .)
    BREAK           reduce using rule 9 (statement -> for_loop .)
    LET             reduce using rule 9 (statement -> for_loop .)
    WHILE           reduce using rule 9 (statement -> for_loop .)
    NAMESPACE       reduce using rule 9 (statement -> for_loop .)
    CLASS           reduce using rule 9 (statement -> for_loop .)
    FUNC            reduce using rule 9 (statement -> for_loop .)
    PYTHON_CODE_EXEC reduce using rule 9 (statement -> for_loop .)
    PYTHON_CODE     reduce using rule 9 (statement -> for_loop .)
    IF              reduce using rule 9 (statement -> for_loop .)
    {               reduce using rule 9 (statement -> for_loop .)
    <               reduce using rule 9 (statement -> for_loop .)
    #               reduce using rule 9 (statement -> for_loop .)
    (               reduce using rule 9 (statement -> for_loop .)
    !               reduce using rule 9 (statement -> for_loop .)
    +               reduce using rule 9 (statement -> for_loop .)
    -               reduce using rule 9 (statement -> for_loop .)
    *               reduce using rule 9 (statement -> for_loop .)
    &               reduce using rule 9 (statement -> for_loop .)
    [               reduce using rule 9 (statement -> for_loop .)
    STRING          reduce using rule 9 (statement -> for_loop .)
    FALSE           reduce using rule 9 (statement -> for_loop .)
    TRUE            reduce using rule 9 (statement -> for_loop .)
    FLOAT           reduce using rule 9 (statement -> for_loop .)
    INT             reduce using rule 9 (statement -> for_loop .)
    NULL            reduce using rule 9 (statement -> for_loop .)
    $end            reduce using rule 9 (statement -> for_loop .)
    }               reduce using rule 9 (statement -> for_loop .)


state 10

    (10) statement -> break_statement .
    SANDBOX         reduce using rule 10 (statement -> break_statement .)
    LIMPORT         reduce using rule 10 (statement -> break_statement .)
    .               reduce using rule 10 (statement -> break_statement .)
    IMPORT          reduce using rule 10 (statement -> break_statement .)
    ID              reduce using rule 10 (statement -> break_statement .)
    RETURN          reduce using rule 10 (statement -> break_statement .)
    DEL             reduce using rule 10 (statement -> break_statement .)
    FOR             reduce using rule 10 (statement -> break_statement .)
    SKIP            reduce using rule 10 (statement -> break_statement .)
    BREAK           reduce using rule 10 (statement -> break_statement .)
    LET             reduce using rule 10 (statement -> break_statement .)
    WHILE           reduce using rule 10 (statement -> break_statement .)
    NAMESPACE       reduce using rule 10 (statement -> break_statement .)
    CLASS           reduce using rule 10 (statement -> break_statement .)
    FUNC            reduce using rule 10 (statement -> break_statement .)
    PYTHON_CODE_EXEC reduce using rule 10 (statement -> break_statement .)
    PYTHON_CODE     reduce using rule 10 (statement -> break_statement .)
    IF              reduce using rule 10 (statement -> break_statement .)
    {               reduce using rule 10 (statement -> break_statement .)
    <               reduce using rule 10 (statement -> break_statement .)
    #               reduce using rule 10 (statement -> break_statement .)
    (               reduce using rule 10 (statement -> break_statement .)
    !               reduce using rule 10 (statement -> break_statement .)
    +               reduce using rule 10 (statement -> break_statement .)
    -               reduce using rule 10 (statement -> break_statement .)
    *               reduce using rule 10 (statement -> break_statement .)
    &               reduce using rule 10 (statement -> break_statement .)
    [               reduce using rule 10 (statement -> break_statement .)
    STRING          reduce using rule 10 (statement -> break_statement .)
    FALSE           reduce using rule 10 (statement -> break_statement .)
    TRUE            reduce using rule 10 (statement -> break_statement .)
    FLOAT           reduce using rule 10 (statement -> break_statement .)
    INT             reduce using rule 10 (statement -> break_statement .)
    NULL            reduce using rule 10 (statement -> break_statement .)
    $end            reduce using rule 10 (statement -> break_statement .)
    }               reduce using rule 10 (statement -> break_statement .)


state 11

    (11) statement -> variable_assignment .
    SANDBOX         reduce using rule 11 (statement -> variable_assignment .)
    LIMPORT         reduce using rule 11 (statement -> variable_assignment .)
    .               reduce using rule 11 (statement -> variable_assignment .)
    IMPORT          reduce using rule 11 (statement -> variable_assignment .)
    ID              reduce using rule 11 (statement -> variable_assignment .)
    RETURN          reduce using rule 11 (statement -> variable_assignment .)
    DEL             reduce using rule 11 (statement -> variable_assignment .)
    FOR             reduce using rule 11 (statement -> variable_assignment .)
    SKIP            reduce using rule 11 (statement -> variable_assignment .)
    BREAK           reduce using rule 11 (statement -> variable_assignment .)
    LET             reduce using rule 11 (statement -> variable_assignment .)
    WHILE           reduce using rule 11 (statement -> variable_assignment .)
    NAMESPACE       reduce using rule 11 (statement -> variable_assignment .)
    CLASS           reduce using rule 11 (statement -> variable_assignment .)
    FUNC            reduce using rule 11 (statement -> variable_assignment .)
    PYTHON_CODE_EXEC reduce using rule 11 (statement -> variable_assignment .)
    PYTHON_CODE     reduce using rule 11 (statement -> variable_assignment .)
    IF              reduce using rule 11 (statement -> variable_assignment .)
    {               reduce using rule 11 (statement -> variable_assignment .)
    <               reduce using rule 11 (statement -> variable_assignment .)
    #               reduce using rule 11 (statement -> variable_assignment .)
    (               reduce using rule 11 (statement -> variable_assignment .)
    !               reduce using rule 11 (statement -> variable_assignment .)
    +               reduce using rule 11 (statement -> variable_assignment .)
    -               reduce using rule 11 (statement -> variable_assignment .)
    *               reduce using rule 11 (statement -> variable_assignment .)
    &               reduce using rule 11 (statement -> variable_assignment .)
    [               reduce using rule 11 (statement -> variable_assignment .)
    STRING          reduce using rule 11 (statement -> variable_assignment .)
    FALSE           reduce using rule 11 (statement -> variable_assignment .)
    TRUE            reduce using rule 11 (statement -> variable_assignment .)
    FLOAT           reduce using rule 11 (statement -> variable_assignment .)
    INT             reduce using rule 11 (statement -> variable_assignment .)
    NULL            reduce using rule 11 (statement -> variable_assignment .)
    $end            reduce using rule 11 (statement -> variable_assignment .)
    }               reduce using rule 11 (statement -> variable_assignment .)


state 12

    (12) statement -> python_code_statement .
    SANDBOX         reduce using rule 12 (statement -> python_code_statement .)
    LIMPORT         reduce using rule 12 (statement -> python_code_statement .)
    .               reduce using rule 12 (statement -> python_code_statement .)
    IMPORT          reduce using rule 12 (statement -> python_code_statement .)
    ID              reduce using rule 12 (statement -> python_code_statement .)
    RETURN          reduce using rule 12 (statement -> python_code_statement .)
    DEL             reduce using rule 12 (statement -> python_code_statement .)
    FOR             reduce using rule 12 (statement -> python_code_statement .)
    SKIP            reduce using rule 12 (statement -> python_code_statement .)
    BREAK           reduce using rule 12 (statement -> python_code_statement .)
    LET             reduce using rule 12 (statement -> python_code_statement .)
    WHILE           reduce using rule 12 (statement -> python_code_statement .)
    NAMESPACE       reduce using rule 12 (statement -> python_code_statement .)
    CLASS           reduce using rule 12 (statement -> python_code_statement .)
    FUNC            reduce using rule 12 (statement -> python_code_statement .)
    PYTHON_CODE_EXEC reduce using rule 12 (statement -> python_code_statement .)
    PYTHON_CODE     reduce using rule 12 (statement -> python_code_statement .)
    IF              reduce using rule 12 (statement -> python_code_statement .)
    {               reduce using rule 12 (statement -> python_code_statement .)
    <               reduce using rule 12 (statement -> python_code_statement .)
    #               reduce using rule 12 (statement -> python_code_statement .)
    (               reduce using rule 12 (statement -> python_code_statement .)
    !               reduce using rule 12 (statement -> python_code_statement .)
    +               reduce using rule 12 (statement -> python_code_statement .)
    -               reduce using rule 12 (statement -> python_code_statement .)
    *               reduce using rule 12 (statement -> python_code_statement .)
    &               reduce using rule 12 (statement -> python_code_statement .)
    [               reduce using rule 12 (statement -> python_code_statement .)
    STRING          reduce using rule 12 (statement -> python_code_statement .)
    FALSE           reduce using rule 12 (statement -> python_code_statement .)
    TRUE            reduce using rule 12 (statement -> python_code_statement .)
    FLOAT           reduce using rule 12 (statement -> python_code_statement .)
    INT             reduce using rule 12 (statement -> python_code_statement .)
    NULL            reduce using rule 12 (statement -> python_code_statement .)
    $end            reduce using rule 12 (statement -> python_code_statement .)
    }               reduce using rule 12 (statement -> python_code_statement .)


state 13

    (13) statement -> while_loop .
    SANDBOX         reduce using rule 13 (statement -> while_loop .)
    LIMPORT         reduce using rule 13 (statement -> while_loop .)
    .               reduce using rule 13 (statement -> while_loop .)
    IMPORT          reduce using rule 13 (statement -> while_loop .)
    ID              reduce using rule 13 (statement -> while_loop .)
    RETURN          reduce using rule 13 (statement -> while_loop .)
    DEL             reduce using rule 13 (statement -> while_loop .)
    FOR             reduce using rule 13 (statement -> while_loop .)
    SKIP            reduce using rule 13 (statement -> while_loop .)
    BREAK           reduce using rule 13 (statement -> while_loop .)
    LET             reduce using rule 13 (statement -> while_loop .)
    WHILE           reduce using rule 13 (statement -> while_loop .)
    NAMESPACE       reduce using rule 13 (statement -> while_loop .)
    CLASS           reduce using rule 13 (statement -> while_loop .)
    FUNC            reduce using rule 13 (statement -> while_loop .)
    PYTHON_CODE_EXEC reduce using rule 13 (statement -> while_loop .)
    PYTHON_CODE     reduce using rule 13 (statement -> while_loop .)
    IF              reduce using rule 13 (statement -> while_loop .)
    {               reduce using rule 13 (statement -> while_loop .)
    <               reduce using rule 13 (statement -> while_loop .)
    #               reduce using rule 13 (statement -> while_loop .)
    (               reduce using rule 13 (statement -> while_loop .)
    !               reduce using rule 13 (statement -> while_loop .)
    +               reduce using rule 13 (statement -> while_loop .)
    -               reduce using rule 13 (statement -> while_loop .)
    *               reduce using rule 13 (statement -> while_loop .)
    &               reduce using rule 13 (statement -> while_loop .)
    [               reduce using rule 13 (statement -> while_loop .)
    STRING          reduce using rule 13 (statement -> while_loop .)
    FALSE           reduce using rule 13 (statement -> while_loop .)
    TRUE            reduce using rule 13 (statement -> while_loop .)
    FLOAT           reduce using rule 13 (statement -> while_loop .)
    INT             reduce using rule 13 (statement -> while_loop .)
    NULL            reduce using rule 13 (statement -> while_loop .)
    $end            reduce using rule 13 (statement -> while_loop .)
    }               reduce using rule 13 (statement -> while_loop .)


state 14

    (14) statement -> conditional .
    SANDBOX         reduce using rule 14 (statement -> conditional .)
    LIMPORT         reduce using rule 14 (statement -> conditional .)
    .               reduce using rule 14 (statement -> conditional .)
    IMPORT          reduce using rule 14 (statement -> conditional .)
    ID              reduce using rule 14 (statement -> conditional .)
    RETURN          reduce using rule 14 (statement -> conditional .)
    DEL             reduce using rule 14 (statement -> conditional .)
    FOR             reduce using rule 14 (statement -> conditional .)
    SKIP            reduce using rule 14 (statement -> conditional .)
    BREAK           reduce using rule 14 (statement -> conditional .)
    LET             reduce using rule 14 (statement -> conditional .)
    WHILE           reduce using rule 14 (statement -> conditional .)
    NAMESPACE       reduce using rule 14 (statement -> conditional .)
    CLASS           reduce using rule 14 (statement -> conditional .)
    FUNC            reduce using rule 14 (statement -> conditional .)
    PYTHON_CODE_EXEC reduce using rule 14 (statement -> conditional .)
    PYTHON_CODE     reduce using rule 14 (statement -> conditional .)
    IF              reduce using rule 14 (statement -> conditional .)
    {               reduce using rule 14 (statement -> conditional .)
    <               reduce using rule 14 (statement -> conditional .)
    #               reduce using rule 14 (statement -> conditional .)
    (               reduce using rule 14 (statement -> conditional .)
    !               reduce using rule 14 (statement -> conditional .)
    +               reduce using rule 14 (statement -> conditional .)
    -               reduce using rule 14 (statement -> conditional .)
    *               reduce using rule 14 (statement -> conditional .)
    &               reduce using rule 14 (statement -> conditional .)
    [               reduce using rule 14 (statement -> conditional .)
    STRING          reduce using rule 14 (statement -> conditional .)
    FALSE           reduce using rule 14 (statement -> conditional .)
    TRUE            reduce using rule 14 (statement -> conditional .)
    FLOAT           reduce using rule 14 (statement -> conditional .)
    INT             reduce using rule 14 (statement -> conditional .)
    NULL            reduce using rule 14 (statement -> conditional .)
    $end            reduce using rule 14 (statement -> conditional .)
    }               reduce using rule 14 (statement -> conditional .)


state 15

    (15) statement -> class_attribute_assignment .
    SANDBOX         reduce using rule 15 (statement -> class_attribute_assignment .)
    LIMPORT         reduce using rule 15 (statement -> class_attribute_assignment .)
    .               reduce using rule 15 (statement -> class_attribute_assignment .)
    IMPORT          reduce using rule 15 (statement -> class_attribute_assignment .)
    ID              reduce using rule 15 (statement -> class_attribute_assignment .)
    RETURN          reduce using rule 15 (statement -> class_attribute_assignment .)
    DEL             reduce using rule 15 (statement -> class_attribute_assignment .)
    FOR             reduce using rule 15 (statement -> class_attribute_assignment .)
    SKIP            reduce using rule 15 (statement -> class_attribute_assignment .)
    BREAK           reduce using rule 15 (statement -> class_attribute_assignment .)
    LET             reduce using rule 15 (statement -> class_attribute_assignment .)
    WHILE           reduce using rule 15 (statement -> class_attribute_assignment .)
    NAMESPACE       reduce using rule 15 (statement -> class_attribute_assignment .)
    CLASS           reduce using rule 15 (statement -> class_attribute_assignment .)
    FUNC            reduce using rule 15 (statement -> class_attribute_assignment .)
    PYTHON_CODE_EXEC reduce using rule 15 (statement -> class_attribute_assignment .)
    PYTHON_CODE     reduce using rule 15 (statement -> class_attribute_assignment .)
    IF              reduce using rule 15 (statement -> class_attribute_assignment .)
    {               reduce using rule 15 (statement -> class_attribute_assignment .)
    <               reduce using rule 15 (statement -> class_attribute_assignment .)
    #               reduce using rule 15 (statement -> class_attribute_assignment .)
    (               reduce using rule 15 (statement -> class_attribute_assignment .)
    !               reduce using rule 15 (statement -> class_attribute_assignment .)
    +               reduce using rule 15 (statement -> class_attribute_assignment .)
    -               reduce using rule 15 (statement -> class_attribute_assignment .)
    *               reduce using rule 15 (statement -> class_attribute_assignment .)
    &               reduce using rule 15 (statement -> class_attribute_assignment .)
    [               reduce using rule 15 (statement -> class_attribute_assignment .)
    STRING          reduce using rule 15 (statement -> class_attribute_assignment .)
    FALSE           reduce using rule 15 (statement -> class_attribute_assignment .)
    TRUE            reduce using rule 15 (statement -> class_attribute_assignment .)
    FLOAT           reduce using rule 15 (statement -> class_attribute_assignment .)
    INT             reduce using rule 15 (statement -> class_attribute_assignment .)
    NULL            reduce using rule 15 (statement -> class_attribute_assignment .)
    $end            reduce using rule 15 (statement -> class_attribute_assignment .)
    }               reduce using rule 15 (statement -> class_attribute_assignment .)


state 16

    (16) statement -> function_call_statement .
    SANDBOX         reduce using rule 16 (statement -> function_call_statement .)
    LIMPORT         reduce using rule 16 (statement -> function_call_statement .)
    .               reduce using rule 16 (statement -> function_call_statement .)
    IMPORT          reduce using rule 16 (statement -> function_call_statement .)
    ID              reduce using rule 16 (statement -> function_call_statement .)
    RETURN          reduce using rule 16 (statement -> function_call_statement .)
    DEL             reduce using rule 16 (statement -> function_call_statement .)
    FOR             reduce using rule 16 (statement -> function_call_statement .)
    SKIP            reduce using rule 16 (statement -> function_call_statement .)
    BREAK           reduce using rule 16 (statement -> function_call_statement .)
    LET             reduce using rule 16 (statement -> function_call_statement .)
    WHILE           reduce using rule 16 (statement -> function_call_statement .)
    NAMESPACE       reduce using rule 16 (statement -> function_call_statement .)
    CLASS           reduce using rule 16 (statement -> function_call_statement .)
    FUNC            reduce using rule 16 (statement -> function_call_statement .)
    PYTHON_CODE_EXEC reduce using rule 16 (statement -> function_call_statement .)
    PYTHON_CODE     reduce using rule 16 (statement -> function_call_statement .)
    IF              reduce using rule 16 (statement -> function_call_statement .)
    {               reduce using rule 16 (statement -> function_call_statement .)
    <               reduce using rule 16 (statement -> function_call_statement .)
    #               reduce using rule 16 (statement -> function_call_statement .)
    (               reduce using rule 16 (statement -> function_call_statement .)
    !               reduce using rule 16 (statement -> function_call_statement .)
    +               reduce using rule 16 (statement -> function_call_statement .)
    -               reduce using rule 16 (statement -> function_call_statement .)
    *               reduce using rule 16 (statement -> function_call_statement .)
    &               reduce using rule 16 (statement -> function_call_statement .)
    [               reduce using rule 16 (statement -> function_call_statement .)
    STRING          reduce using rule 16 (statement -> function_call_statement .)
    FALSE           reduce using rule 16 (statement -> function_call_statement .)
    TRUE            reduce using rule 16 (statement -> function_call_statement .)
    FLOAT           reduce using rule 16 (statement -> function_call_statement .)
    INT             reduce using rule 16 (statement -> function_call_statement .)
    NULL            reduce using rule 16 (statement -> function_call_statement .)
    $end            reduce using rule 16 (statement -> function_call_statement .)
    }               reduce using rule 16 (statement -> function_call_statement .)


state 17

    (17) statement -> class_declaration .
    SANDBOX         reduce using rule 17 (statement -> class_declaration .)
    LIMPORT         reduce using rule 17 (statement -> class_declaration .)
    .               reduce using rule 17 (statement -> class_declaration .)
    IMPORT          reduce using rule 17 (statement -> class_declaration .)
    ID              reduce using rule 17 (statement -> class_declaration .)
    RETURN          reduce using rule 17 (statement -> class_declaration .)
    DEL             reduce using rule 17 (statement -> class_declaration .)
    FOR             reduce using rule 17 (statement -> class_declaration .)
    SKIP            reduce using rule 17 (statement -> class_declaration .)
    BREAK           reduce using rule 17 (statement -> class_declaration .)
    LET             reduce using rule 17 (statement -> class_declaration .)
    WHILE           reduce using rule 17 (statement -> class_declaration .)
    NAMESPACE       reduce using rule 17 (statement -> class_declaration .)
    CLASS           reduce using rule 17 (statement -> class_declaration .)
    FUNC            reduce using rule 17 (statement -> class_declaration .)
    PYTHON_CODE_EXEC reduce using rule 17 (statement -> class_declaration .)
    PYTHON_CODE     reduce using rule 17 (statement -> class_declaration .)
    IF              reduce using rule 17 (statement -> class_declaration .)
    {               reduce using rule 17 (statement -> class_declaration .)
    <               reduce using rule 17 (statement -> class_declaration .)
    #               reduce using rule 17 (statement -> class_declaration .)
    (               reduce using rule 17 (statement -> class_declaration .)
    !               reduce using rule 17 (statement -> class_declaration .)
    +               reduce using rule 17 (statement -> class_declaration .)
    -               reduce using rule 17 (statement -> class_declaration .)
    *               reduce using rule 17 (statement -> class_declaration .)
    &               reduce using rule 17 (statement -> class_declaration .)
    [               reduce using rule 17 (statement -> class_declaration .)
    STRING          reduce using rule 17 (statement -> class_declaration .)
    FALSE           reduce using rule 17 (statement -> class_declaration .)
    TRUE            reduce using rule 17 (statement -> class_declaration .)
    FLOAT           reduce using rule 17 (statement -> class_declaration .)
    INT             reduce using rule 17 (statement -> class_declaration .)
    NULL            reduce using rule 17 (statement -> class_declaration .)
    $end            reduce using rule 17 (statement -> class_declaration .)
    }               reduce using rule 17 (statement -> class_declaration .)


state 18

    (18) statement -> function_declaration .
    SANDBOX         reduce using rule 18 (statement -> function_declaration .)
    LIMPORT         reduce using rule 18 (statement -> function_declaration .)
    .               reduce using rule 18 (statement -> function_declaration .)
    IMPORT          reduce using rule 18 (statement -> function_declaration .)
    ID              reduce using rule 18 (statement -> function_declaration .)
    RETURN          reduce using rule 18 (statement -> function_declaration .)
    DEL             reduce using rule 18 (statement -> function_declaration .)
    FOR             reduce using rule 18 (statement -> function_declaration .)
    SKIP            reduce using rule 18 (statement -> function_declaration .)
    BREAK           reduce using rule 18 (statement -> function_declaration .)
    LET             reduce using rule 18 (statement -> function_declaration .)
    WHILE           reduce using rule 18 (statement -> function_declaration .)
    NAMESPACE       reduce using rule 18 (statement -> function_declaration .)
    CLASS           reduce using rule 18 (statement -> function_declaration .)
    FUNC            reduce using rule 18 (statement -> function_declaration .)
    PYTHON_CODE_EXEC reduce using rule 18 (statement -> function_declaration .)
    PYTHON_CODE     reduce using rule 18 (statement -> function_declaration .)
    IF              reduce using rule 18 (statement -> function_declaration .)
    {               reduce using rule 18 (statement -> function_declaration .)
    <               reduce using rule 18 (statement -> function_declaration .)
    #               reduce using rule 18 (statement -> function_declaration .)
    (               reduce using rule 18 (statement -> function_declaration .)
    !               reduce using rule 18 (statement -> function_declaration .)
    +               reduce using rule 18 (statement -> function_declaration .)
    -               reduce using rule 18 (statement -> function_declaration .)
    *               reduce using rule 18 (statement -> function_declaration .)
    &               reduce using rule 18 (statement -> function_declaration .)
    [               reduce using rule 18 (statement -> function_declaration .)
    STRING          reduce using rule 18 (statement -> function_declaration .)
    FALSE           reduce using rule 18 (statement -> function_declaration .)
    TRUE            reduce using rule 18 (statement -> function_declaration .)
    FLOAT           reduce using rule 18 (statement -> function_declaration .)
    INT             reduce using rule 18 (statement -> function_declaration .)
    NULL            reduce using rule 18 (statement -> function_declaration .)
    $end            reduce using rule 18 (statement -> function_declaration .)
    }               reduce using rule 18 (statement -> function_declaration .)


state 19

    (19) sandbox -> SANDBOX . { program }
    {               shift and go to state 70


state 20

    (26) function_call -> { . program }
    (132) assoc_array -> { . assoc_array_items }
    (114) _tuple -> { . positional_args , }
    (115) _tuple -> { . positional_args }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (133) assoc_array_items -> . expression : expression
    (134) assoc_array_items -> . assoc_array_items , expression : expression
    (47) positional_args -> . expression
    (48) positional_args -> . positional_args , expression
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    }               reduce using rule 137 (empty -> .)
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    <               shift and go to state 46

    program                        shift and go to state 72
    assoc_array_items              shift and go to state 73
    positional_args                shift and go to state 74
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 75
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 76
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79
    if_statement                   shift and go to state 36

state 21

    (20) sandbox -> LIMPORT . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 81
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 22

    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (130) class_attribute -> expression . COLON_COLON ID
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    ^               shift and go to state 87
    [               shift and go to state 88
    COLON_COLON     shift and go to state 89
    (               shift and go to state 90
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103


state 23

    (75) import_statement -> . . GLOBAL ;
    GLOBAL          shift and go to state 104


state 24

    (76) import_statement -> IMPORT . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 105
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 25

    (54) variable_operation -> get_index . EQ_DIV expression ;
    (56) variable_operation -> get_index . EQ_MOD expression ;
    (58) variable_operation -> get_index . EQ_MUL expression ;
    (60) variable_operation -> get_index . EQ_SUB expression ;
    (62) variable_operation -> get_index . EQ_ADD expression ;
    (88) expression -> get_index .
    EQ_DIV          shift and go to state 106
    EQ_MOD          shift and go to state 107
    EQ_MUL          shift and go to state 108
    EQ_SUB          shift and go to state 109
    EQ_ADD          shift and go to state 110
    ^               reduce using rule 88 (expression -> get_index .)
    [               reduce using rule 88 (expression -> get_index .)
    COLON_COLON     reduce using rule 88 (expression -> get_index .)
    (               reduce using rule 88 (expression -> get_index .)
    >               reduce using rule 88 (expression -> get_index .)
    <               reduce using rule 88 (expression -> get_index .)
    &               reduce using rule 88 (expression -> get_index .)
    |               reduce using rule 88 (expression -> get_index .)
    EQ_GREATER      reduce using rule 88 (expression -> get_index .)
    EQ_LESS         reduce using rule 88 (expression -> get_index .)
    NOT_EQEQ        reduce using rule 88 (expression -> get_index .)
    EQEQ            reduce using rule 88 (expression -> get_index .)
    %               reduce using rule 88 (expression -> get_index .)
    *               reduce using rule 88 (expression -> get_index .)
    /               reduce using rule 88 (expression -> get_index .)
    -               reduce using rule 88 (expression -> get_index .)
    +               reduce using rule 88 (expression -> get_index .)


state 26

    (55) variable_operation -> ID . EQ_DIV expression ;
    (57) variable_operation -> ID . EQ_MOD expression ;
    (59) variable_operation -> ID . EQ_MUL expression ;
    (61) variable_operation -> ID . EQ_SUB expression ;
    (63) variable_operation -> ID . EQ_ADD expression ;
    (29) function_call -> ID . TARROW ID
    (110) expression -> ID . OF ID
    (131) id -> ID .
    EQ_DIV          shift and go to state 111
    EQ_MOD          shift and go to state 112
    EQ_MUL          shift and go to state 113
    EQ_SUB          shift and go to state 114
    EQ_ADD          shift and go to state 115
    TARROW          shift and go to state 116
    OF              shift and go to state 117
    ^               reduce using rule 131 (id -> ID .)
    [               reduce using rule 131 (id -> ID .)
    COLON_COLON     reduce using rule 131 (id -> ID .)
    (               reduce using rule 131 (id -> ID .)
    >               reduce using rule 131 (id -> ID .)
    <               reduce using rule 131 (id -> ID .)
    &               reduce using rule 131 (id -> ID .)
    |               reduce using rule 131 (id -> ID .)
    EQ_GREATER      reduce using rule 131 (id -> ID .)
    EQ_LESS         reduce using rule 131 (id -> ID .)
    NOT_EQEQ        reduce using rule 131 (id -> ID .)
    EQEQ            reduce using rule 131 (id -> ID .)
    %               reduce using rule 131 (id -> ID .)
    *               reduce using rule 131 (id -> ID .)
    /               reduce using rule 131 (id -> ID .)
    -               reduce using rule 131 (id -> ID .)
    +               reduce using rule 131 (id -> ID .)


state 27

    (25) return_statement -> RETURN . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 118
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 28

    (74) delete_statement -> DEL . ID ;
    ID              shift and go to state 119


state 29

    (45) for_loop -> FOR . expression IN expression { program }
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 120
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 30

    (23) break_statement -> SKIP . ;
    ;               shift and go to state 121


state 31

    (24) break_statement -> BREAK . ;
    ;               shift and go to state 122


state 32

    (51) variable_assignment -> LET . get_index = expression ;
    (52) variable_assignment -> LET . ID : ID = expression ;
    (53) variable_assignment -> LET . ID = expression ;
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    ID              shift and go to state 125
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    get_index                      shift and go to state 123
    expression                     shift and go to state 124
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 33

    (22) python_code_statement -> python_code . ;
    (90) expression -> python_code .
    ;               shift and go to state 126
    ^               reduce using rule 90 (expression -> python_code .)
    [               reduce using rule 90 (expression -> python_code .)
    COLON_COLON     reduce using rule 90 (expression -> python_code .)
    (               reduce using rule 90 (expression -> python_code .)
    >               reduce using rule 90 (expression -> python_code .)
    <               reduce using rule 90 (expression -> python_code .)
    &               reduce using rule 90 (expression -> python_code .)
    |               reduce using rule 90 (expression -> python_code .)
    EQ_GREATER      reduce using rule 90 (expression -> python_code .)
    EQ_LESS         reduce using rule 90 (expression -> python_code .)
    NOT_EQEQ        reduce using rule 90 (expression -> python_code .)
    EQEQ            reduce using rule 90 (expression -> python_code .)
    %               reduce using rule 90 (expression -> python_code .)
    *               reduce using rule 90 (expression -> python_code .)
    /               reduce using rule 90 (expression -> python_code .)
    -               reduce using rule 90 (expression -> python_code .)
    +               reduce using rule 90 (expression -> python_code .)


state 34

    (46) while_loop -> WHILE . ( expression ) { program }
    (               shift and go to state 127


state 35

    (91) expression -> ( . expression )
    (118) _numpy -> ( . , )
    (119) _numpy -> ( . )
    (120) _numpy -> ( . expression , )
    (121) _numpy -> ( . items , )
    (122) _numpy -> ( . items )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (123) items -> . expression , expression
    (124) items -> . items , expression
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    ,               shift and go to state 130
    )               shift and go to state 129
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 128
    items                          shift and go to state 131
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 36

    (65) conditional -> if_statement . else_statement
    (66) conditional -> if_statement . else_if_loop else_statement
    (67) conditional -> if_statement . else_if_loop
    (68) conditional -> if_statement .
    (73) else_statement -> . ELSE { program }
    (70) else_if_loop -> . else_if_statement
    (71) else_if_loop -> . else_if_loop else_if_statement
    (72) else_if_statement -> . ELSE IF ( expression ) { program }
    SANDBOX         reduce using rule 68 (conditional -> if_statement .)
    LIMPORT         reduce using rule 68 (conditional -> if_statement .)
    .               reduce using rule 68 (conditional -> if_statement .)
    IMPORT          reduce using rule 68 (conditional -> if_statement .)
    ID              reduce using rule 68 (conditional -> if_statement .)
    RETURN          reduce using rule 68 (conditional -> if_statement .)
    DEL             reduce using rule 68 (conditional -> if_statement .)
    FOR             reduce using rule 68 (conditional -> if_statement .)
    SKIP            reduce using rule 68 (conditional -> if_statement .)
    BREAK           reduce using rule 68 (conditional -> if_statement .)
    LET             reduce using rule 68 (conditional -> if_statement .)
    WHILE           reduce using rule 68 (conditional -> if_statement .)
    NAMESPACE       reduce using rule 68 (conditional -> if_statement .)
    CLASS           reduce using rule 68 (conditional -> if_statement .)
    FUNC            reduce using rule 68 (conditional -> if_statement .)
    PYTHON_CODE_EXEC reduce using rule 68 (conditional -> if_statement .)
    PYTHON_CODE     reduce using rule 68 (conditional -> if_statement .)
    IF              reduce using rule 68 (conditional -> if_statement .)
    {               reduce using rule 68 (conditional -> if_statement .)
    <               reduce using rule 68 (conditional -> if_statement .)
    #               reduce using rule 68 (conditional -> if_statement .)
    (               reduce using rule 68 (conditional -> if_statement .)
    !               reduce using rule 68 (conditional -> if_statement .)
    +               reduce using rule 68 (conditional -> if_statement .)
    -               reduce using rule 68 (conditional -> if_statement .)
    *               reduce using rule 68 (conditional -> if_statement .)
    &               reduce using rule 68 (conditional -> if_statement .)
    [               reduce using rule 68 (conditional -> if_statement .)
    STRING          reduce using rule 68 (conditional -> if_statement .)
    FALSE           reduce using rule 68 (conditional -> if_statement .)
    TRUE            reduce using rule 68 (conditional -> if_statement .)
    FLOAT           reduce using rule 68 (conditional -> if_statement .)
    INT             reduce using rule 68 (conditional -> if_statement .)
    NULL            reduce using rule 68 (conditional -> if_statement .)
    $end            reduce using rule 68 (conditional -> if_statement .)
    }               reduce using rule 68 (conditional -> if_statement .)
    ELSE            shift and go to state 134

    else_statement                 shift and go to state 132
    else_if_loop                   shift and go to state 133
    else_if_statement              shift and go to state 135

state 37

    (64) class_attribute_assignment -> class_attribute . = expression ;
    (81) expression -> class_attribute .
    =               shift and go to state 136
    ^               reduce using rule 81 (expression -> class_attribute .)
    [               reduce using rule 81 (expression -> class_attribute .)
    COLON_COLON     reduce using rule 81 (expression -> class_attribute .)
    (               reduce using rule 81 (expression -> class_attribute .)
    >               reduce using rule 81 (expression -> class_attribute .)
    <               reduce using rule 81 (expression -> class_attribute .)
    &               reduce using rule 81 (expression -> class_attribute .)
    |               reduce using rule 81 (expression -> class_attribute .)
    EQ_GREATER      reduce using rule 81 (expression -> class_attribute .)
    EQ_LESS         reduce using rule 81 (expression -> class_attribute .)
    NOT_EQEQ        reduce using rule 81 (expression -> class_attribute .)
    EQEQ            reduce using rule 81 (expression -> class_attribute .)
    %               reduce using rule 81 (expression -> class_attribute .)
    *               reduce using rule 81 (expression -> class_attribute .)
    /               reduce using rule 81 (expression -> class_attribute .)
    -               reduce using rule 81 (expression -> class_attribute .)
    +               reduce using rule 81 (expression -> class_attribute .)


state 38

    (21) function_call_statement -> function_call . ;
    (89) expression -> function_call .
    ;               shift and go to state 137
    ^               reduce using rule 89 (expression -> function_call .)
    [               reduce using rule 89 (expression -> function_call .)
    COLON_COLON     reduce using rule 89 (expression -> function_call .)
    (               reduce using rule 89 (expression -> function_call .)
    >               reduce using rule 89 (expression -> function_call .)
    <               reduce using rule 89 (expression -> function_call .)
    &               reduce using rule 89 (expression -> function_call .)
    |               reduce using rule 89 (expression -> function_call .)
    EQ_GREATER      reduce using rule 89 (expression -> function_call .)
    EQ_LESS         reduce using rule 89 (expression -> function_call .)
    NOT_EQEQ        reduce using rule 89 (expression -> function_call .)
    EQEQ            reduce using rule 89 (expression -> function_call .)
    %               reduce using rule 89 (expression -> function_call .)
    *               reduce using rule 89 (expression -> function_call .)
    /               reduce using rule 89 (expression -> function_call .)
    -               reduce using rule 89 (expression -> function_call .)
    +               reduce using rule 89 (expression -> function_call .)


state 39

    (43) class_declaration -> NAMESPACE . ID { program }
    ID              shift and go to state 138


state 40

    (44) class_declaration -> CLASS . ID { program }
    ID              shift and go to state 139


state 41

    (36) function_declaration -> FUNC . ID ( empty ) { program } TARROW expression
    (37) function_declaration -> FUNC . ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> FUNC . ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> FUNC . ID ( function_arguments ) { program } TARROW expression
    ID              shift and go to state 140


state 42

    (116) _list -> [ . positional_args , ]
    (117) _list -> [ . positional_args ]
    (47) positional_args -> . expression
    (48) positional_args -> . positional_args , expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    positional_args                shift and go to state 141
    expression                     shift and go to state 142
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 43

    (135) python_code -> PYTHON_CODE_EXEC .
    ;               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    ^               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    [               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    COLON_COLON     reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    (               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    >               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    <               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    &               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    |               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    EQ_GREATER      reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    EQ_LESS         reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    NOT_EQEQ        reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    EQEQ            reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    %               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    *               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    /               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    -               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    +               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    :               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    ,               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    }               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    IN              reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    )               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    ]               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    EQ_DIV          reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    EQ_MOD          reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    EQ_MUL          reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    EQ_SUB          reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    EQ_ADD          reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    =               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    ?               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    {               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    SANDBOX         reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    LIMPORT         reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    .               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    IMPORT          reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    ID              reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    RETURN          reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    DEL             reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    FOR             reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    SKIP            reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    BREAK           reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    LET             reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    WHILE           reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    NAMESPACE       reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    CLASS           reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    FUNC            reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    PYTHON_CODE_EXEC reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    PYTHON_CODE     reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    IF              reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    #               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    !               reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    STRING          reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    FALSE           reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    TRUE            reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    FLOAT           reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    INT             reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    NULL            reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)
    $end            reduce using rule 135 (python_code -> PYTHON_CODE_EXEC .)


state 44

    (136) python_code -> PYTHON_CODE .
    ;               reduce using rule 136 (python_code -> PYTHON_CODE .)
    ^               reduce using rule 136 (python_code -> PYTHON_CODE .)
    [               reduce using rule 136 (python_code -> PYTHON_CODE .)
    COLON_COLON     reduce using rule 136 (python_code -> PYTHON_CODE .)
    (               reduce using rule 136 (python_code -> PYTHON_CODE .)
    >               reduce using rule 136 (python_code -> PYTHON_CODE .)
    <               reduce using rule 136 (python_code -> PYTHON_CODE .)
    &               reduce using rule 136 (python_code -> PYTHON_CODE .)
    |               reduce using rule 136 (python_code -> PYTHON_CODE .)
    EQ_GREATER      reduce using rule 136 (python_code -> PYTHON_CODE .)
    EQ_LESS         reduce using rule 136 (python_code -> PYTHON_CODE .)
    NOT_EQEQ        reduce using rule 136 (python_code -> PYTHON_CODE .)
    EQEQ            reduce using rule 136 (python_code -> PYTHON_CODE .)
    %               reduce using rule 136 (python_code -> PYTHON_CODE .)
    *               reduce using rule 136 (python_code -> PYTHON_CODE .)
    /               reduce using rule 136 (python_code -> PYTHON_CODE .)
    -               reduce using rule 136 (python_code -> PYTHON_CODE .)
    +               reduce using rule 136 (python_code -> PYTHON_CODE .)
    :               reduce using rule 136 (python_code -> PYTHON_CODE .)
    ,               reduce using rule 136 (python_code -> PYTHON_CODE .)
    }               reduce using rule 136 (python_code -> PYTHON_CODE .)
    IN              reduce using rule 136 (python_code -> PYTHON_CODE .)
    )               reduce using rule 136 (python_code -> PYTHON_CODE .)
    ]               reduce using rule 136 (python_code -> PYTHON_CODE .)
    EQ_DIV          reduce using rule 136 (python_code -> PYTHON_CODE .)
    EQ_MOD          reduce using rule 136 (python_code -> PYTHON_CODE .)
    EQ_MUL          reduce using rule 136 (python_code -> PYTHON_CODE .)
    EQ_SUB          reduce using rule 136 (python_code -> PYTHON_CODE .)
    EQ_ADD          reduce using rule 136 (python_code -> PYTHON_CODE .)
    =               reduce using rule 136 (python_code -> PYTHON_CODE .)
    ?               reduce using rule 136 (python_code -> PYTHON_CODE .)
    {               reduce using rule 136 (python_code -> PYTHON_CODE .)
    SANDBOX         reduce using rule 136 (python_code -> PYTHON_CODE .)
    LIMPORT         reduce using rule 136 (python_code -> PYTHON_CODE .)
    .               reduce using rule 136 (python_code -> PYTHON_CODE .)
    IMPORT          reduce using rule 136 (python_code -> PYTHON_CODE .)
    ID              reduce using rule 136 (python_code -> PYTHON_CODE .)
    RETURN          reduce using rule 136 (python_code -> PYTHON_CODE .)
    DEL             reduce using rule 136 (python_code -> PYTHON_CODE .)
    FOR             reduce using rule 136 (python_code -> PYTHON_CODE .)
    SKIP            reduce using rule 136 (python_code -> PYTHON_CODE .)
    BREAK           reduce using rule 136 (python_code -> PYTHON_CODE .)
    LET             reduce using rule 136 (python_code -> PYTHON_CODE .)
    WHILE           reduce using rule 136 (python_code -> PYTHON_CODE .)
    NAMESPACE       reduce using rule 136 (python_code -> PYTHON_CODE .)
    CLASS           reduce using rule 136 (python_code -> PYTHON_CODE .)
    FUNC            reduce using rule 136 (python_code -> PYTHON_CODE .)
    PYTHON_CODE_EXEC reduce using rule 136 (python_code -> PYTHON_CODE .)
    PYTHON_CODE     reduce using rule 136 (python_code -> PYTHON_CODE .)
    IF              reduce using rule 136 (python_code -> PYTHON_CODE .)
    #               reduce using rule 136 (python_code -> PYTHON_CODE .)
    !               reduce using rule 136 (python_code -> PYTHON_CODE .)
    STRING          reduce using rule 136 (python_code -> PYTHON_CODE .)
    FALSE           reduce using rule 136 (python_code -> PYTHON_CODE .)
    TRUE            reduce using rule 136 (python_code -> PYTHON_CODE .)
    FLOAT           reduce using rule 136 (python_code -> PYTHON_CODE .)
    INT             reduce using rule 136 (python_code -> PYTHON_CODE .)
    NULL            reduce using rule 136 (python_code -> PYTHON_CODE .)
    $end            reduce using rule 136 (python_code -> PYTHON_CODE .)


state 45

    (69) if_statement -> IF . ( expression ) { program }
    (               shift and go to state 143


state 46

    (28) function_call -> < . ID > expression
    ID              shift and go to state 144


state 47

    (30) function_call -> # . DEPENDS expression
    (31) function_call -> # . DEFINE expression ? ID
    DEPENDS         shift and go to state 145
    DEFINE          shift and go to state 146


state 48

    (77) expression -> assoc_array .
    ^               reduce using rule 77 (expression -> assoc_array .)
    [               reduce using rule 77 (expression -> assoc_array .)
    COLON_COLON     reduce using rule 77 (expression -> assoc_array .)
    (               reduce using rule 77 (expression -> assoc_array .)
    >               reduce using rule 77 (expression -> assoc_array .)
    <               reduce using rule 77 (expression -> assoc_array .)
    &               reduce using rule 77 (expression -> assoc_array .)
    |               reduce using rule 77 (expression -> assoc_array .)
    EQ_GREATER      reduce using rule 77 (expression -> assoc_array .)
    EQ_LESS         reduce using rule 77 (expression -> assoc_array .)
    NOT_EQEQ        reduce using rule 77 (expression -> assoc_array .)
    EQEQ            reduce using rule 77 (expression -> assoc_array .)
    %               reduce using rule 77 (expression -> assoc_array .)
    *               reduce using rule 77 (expression -> assoc_array .)
    /               reduce using rule 77 (expression -> assoc_array .)
    -               reduce using rule 77 (expression -> assoc_array .)
    +               reduce using rule 77 (expression -> assoc_array .)
    :               reduce using rule 77 (expression -> assoc_array .)
    ,               reduce using rule 77 (expression -> assoc_array .)
    }               reduce using rule 77 (expression -> assoc_array .)
    ;               reduce using rule 77 (expression -> assoc_array .)
    IN              reduce using rule 77 (expression -> assoc_array .)
    )               reduce using rule 77 (expression -> assoc_array .)
    ]               reduce using rule 77 (expression -> assoc_array .)
    EQ_DIV          reduce using rule 77 (expression -> assoc_array .)
    EQ_MOD          reduce using rule 77 (expression -> assoc_array .)
    EQ_MUL          reduce using rule 77 (expression -> assoc_array .)
    EQ_SUB          reduce using rule 77 (expression -> assoc_array .)
    EQ_ADD          reduce using rule 77 (expression -> assoc_array .)
    =               reduce using rule 77 (expression -> assoc_array .)
    ?               reduce using rule 77 (expression -> assoc_array .)
    {               reduce using rule 77 (expression -> assoc_array .)
    SANDBOX         reduce using rule 77 (expression -> assoc_array .)
    LIMPORT         reduce using rule 77 (expression -> assoc_array .)
    .               reduce using rule 77 (expression -> assoc_array .)
    IMPORT          reduce using rule 77 (expression -> assoc_array .)
    ID              reduce using rule 77 (expression -> assoc_array .)
    RETURN          reduce using rule 77 (expression -> assoc_array .)
    DEL             reduce using rule 77 (expression -> assoc_array .)
    FOR             reduce using rule 77 (expression -> assoc_array .)
    SKIP            reduce using rule 77 (expression -> assoc_array .)
    BREAK           reduce using rule 77 (expression -> assoc_array .)
    LET             reduce using rule 77 (expression -> assoc_array .)
    WHILE           reduce using rule 77 (expression -> assoc_array .)
    NAMESPACE       reduce using rule 77 (expression -> assoc_array .)
    CLASS           reduce using rule 77 (expression -> assoc_array .)
    FUNC            reduce using rule 77 (expression -> assoc_array .)
    PYTHON_CODE_EXEC reduce using rule 77 (expression -> assoc_array .)
    PYTHON_CODE     reduce using rule 77 (expression -> assoc_array .)
    IF              reduce using rule 77 (expression -> assoc_array .)
    #               reduce using rule 77 (expression -> assoc_array .)
    !               reduce using rule 77 (expression -> assoc_array .)
    STRING          reduce using rule 77 (expression -> assoc_array .)
    FALSE           reduce using rule 77 (expression -> assoc_array .)
    TRUE            reduce using rule 77 (expression -> assoc_array .)
    FLOAT           reduce using rule 77 (expression -> assoc_array .)
    INT             reduce using rule 77 (expression -> assoc_array .)
    NULL            reduce using rule 77 (expression -> assoc_array .)
    $end            reduce using rule 77 (expression -> assoc_array .)


state 49

    (78) expression -> _numpy .
    ^               reduce using rule 78 (expression -> _numpy .)
    [               reduce using rule 78 (expression -> _numpy .)
    COLON_COLON     reduce using rule 78 (expression -> _numpy .)
    (               reduce using rule 78 (expression -> _numpy .)
    >               reduce using rule 78 (expression -> _numpy .)
    <               reduce using rule 78 (expression -> _numpy .)
    &               reduce using rule 78 (expression -> _numpy .)
    |               reduce using rule 78 (expression -> _numpy .)
    EQ_GREATER      reduce using rule 78 (expression -> _numpy .)
    EQ_LESS         reduce using rule 78 (expression -> _numpy .)
    NOT_EQEQ        reduce using rule 78 (expression -> _numpy .)
    EQEQ            reduce using rule 78 (expression -> _numpy .)
    %               reduce using rule 78 (expression -> _numpy .)
    *               reduce using rule 78 (expression -> _numpy .)
    /               reduce using rule 78 (expression -> _numpy .)
    -               reduce using rule 78 (expression -> _numpy .)
    +               reduce using rule 78 (expression -> _numpy .)
    :               reduce using rule 78 (expression -> _numpy .)
    ,               reduce using rule 78 (expression -> _numpy .)
    }               reduce using rule 78 (expression -> _numpy .)
    ;               reduce using rule 78 (expression -> _numpy .)
    IN              reduce using rule 78 (expression -> _numpy .)
    )               reduce using rule 78 (expression -> _numpy .)
    ]               reduce using rule 78 (expression -> _numpy .)
    EQ_DIV          reduce using rule 78 (expression -> _numpy .)
    EQ_MOD          reduce using rule 78 (expression -> _numpy .)
    EQ_MUL          reduce using rule 78 (expression -> _numpy .)
    EQ_SUB          reduce using rule 78 (expression -> _numpy .)
    EQ_ADD          reduce using rule 78 (expression -> _numpy .)
    =               reduce using rule 78 (expression -> _numpy .)
    ?               reduce using rule 78 (expression -> _numpy .)
    {               reduce using rule 78 (expression -> _numpy .)
    SANDBOX         reduce using rule 78 (expression -> _numpy .)
    LIMPORT         reduce using rule 78 (expression -> _numpy .)
    .               reduce using rule 78 (expression -> _numpy .)
    IMPORT          reduce using rule 78 (expression -> _numpy .)
    ID              reduce using rule 78 (expression -> _numpy .)
    RETURN          reduce using rule 78 (expression -> _numpy .)
    DEL             reduce using rule 78 (expression -> _numpy .)
    FOR             reduce using rule 78 (expression -> _numpy .)
    SKIP            reduce using rule 78 (expression -> _numpy .)
    BREAK           reduce using rule 78 (expression -> _numpy .)
    LET             reduce using rule 78 (expression -> _numpy .)
    WHILE           reduce using rule 78 (expression -> _numpy .)
    NAMESPACE       reduce using rule 78 (expression -> _numpy .)
    CLASS           reduce using rule 78 (expression -> _numpy .)
    FUNC            reduce using rule 78 (expression -> _numpy .)
    PYTHON_CODE_EXEC reduce using rule 78 (expression -> _numpy .)
    PYTHON_CODE     reduce using rule 78 (expression -> _numpy .)
    IF              reduce using rule 78 (expression -> _numpy .)
    #               reduce using rule 78 (expression -> _numpy .)
    !               reduce using rule 78 (expression -> _numpy .)
    STRING          reduce using rule 78 (expression -> _numpy .)
    FALSE           reduce using rule 78 (expression -> _numpy .)
    TRUE            reduce using rule 78 (expression -> _numpy .)
    FLOAT           reduce using rule 78 (expression -> _numpy .)
    INT             reduce using rule 78 (expression -> _numpy .)
    NULL            reduce using rule 78 (expression -> _numpy .)
    $end            reduce using rule 78 (expression -> _numpy .)


state 50

    (79) expression -> _list .
    ^               reduce using rule 79 (expression -> _list .)
    [               reduce using rule 79 (expression -> _list .)
    COLON_COLON     reduce using rule 79 (expression -> _list .)
    (               reduce using rule 79 (expression -> _list .)
    >               reduce using rule 79 (expression -> _list .)
    <               reduce using rule 79 (expression -> _list .)
    &               reduce using rule 79 (expression -> _list .)
    |               reduce using rule 79 (expression -> _list .)
    EQ_GREATER      reduce using rule 79 (expression -> _list .)
    EQ_LESS         reduce using rule 79 (expression -> _list .)
    NOT_EQEQ        reduce using rule 79 (expression -> _list .)
    EQEQ            reduce using rule 79 (expression -> _list .)
    %               reduce using rule 79 (expression -> _list .)
    *               reduce using rule 79 (expression -> _list .)
    /               reduce using rule 79 (expression -> _list .)
    -               reduce using rule 79 (expression -> _list .)
    +               reduce using rule 79 (expression -> _list .)
    :               reduce using rule 79 (expression -> _list .)
    ,               reduce using rule 79 (expression -> _list .)
    }               reduce using rule 79 (expression -> _list .)
    ;               reduce using rule 79 (expression -> _list .)
    IN              reduce using rule 79 (expression -> _list .)
    )               reduce using rule 79 (expression -> _list .)
    ]               reduce using rule 79 (expression -> _list .)
    EQ_DIV          reduce using rule 79 (expression -> _list .)
    EQ_MOD          reduce using rule 79 (expression -> _list .)
    EQ_MUL          reduce using rule 79 (expression -> _list .)
    EQ_SUB          reduce using rule 79 (expression -> _list .)
    EQ_ADD          reduce using rule 79 (expression -> _list .)
    =               reduce using rule 79 (expression -> _list .)
    ?               reduce using rule 79 (expression -> _list .)
    {               reduce using rule 79 (expression -> _list .)
    SANDBOX         reduce using rule 79 (expression -> _list .)
    LIMPORT         reduce using rule 79 (expression -> _list .)
    .               reduce using rule 79 (expression -> _list .)
    IMPORT          reduce using rule 79 (expression -> _list .)
    ID              reduce using rule 79 (expression -> _list .)
    RETURN          reduce using rule 79 (expression -> _list .)
    DEL             reduce using rule 79 (expression -> _list .)
    FOR             reduce using rule 79 (expression -> _list .)
    SKIP            reduce using rule 79 (expression -> _list .)
    BREAK           reduce using rule 79 (expression -> _list .)
    LET             reduce using rule 79 (expression -> _list .)
    WHILE           reduce using rule 79 (expression -> _list .)
    NAMESPACE       reduce using rule 79 (expression -> _list .)
    CLASS           reduce using rule 79 (expression -> _list .)
    FUNC            reduce using rule 79 (expression -> _list .)
    PYTHON_CODE_EXEC reduce using rule 79 (expression -> _list .)
    PYTHON_CODE     reduce using rule 79 (expression -> _list .)
    IF              reduce using rule 79 (expression -> _list .)
    #               reduce using rule 79 (expression -> _list .)
    !               reduce using rule 79 (expression -> _list .)
    STRING          reduce using rule 79 (expression -> _list .)
    FALSE           reduce using rule 79 (expression -> _list .)
    TRUE            reduce using rule 79 (expression -> _list .)
    FLOAT           reduce using rule 79 (expression -> _list .)
    INT             reduce using rule 79 (expression -> _list .)
    NULL            reduce using rule 79 (expression -> _list .)
    $end            reduce using rule 79 (expression -> _list .)


state 51

    (80) expression -> _tuple .
    ^               reduce using rule 80 (expression -> _tuple .)
    [               reduce using rule 80 (expression -> _tuple .)
    COLON_COLON     reduce using rule 80 (expression -> _tuple .)
    (               reduce using rule 80 (expression -> _tuple .)
    >               reduce using rule 80 (expression -> _tuple .)
    <               reduce using rule 80 (expression -> _tuple .)
    &               reduce using rule 80 (expression -> _tuple .)
    |               reduce using rule 80 (expression -> _tuple .)
    EQ_GREATER      reduce using rule 80 (expression -> _tuple .)
    EQ_LESS         reduce using rule 80 (expression -> _tuple .)
    NOT_EQEQ        reduce using rule 80 (expression -> _tuple .)
    EQEQ            reduce using rule 80 (expression -> _tuple .)
    %               reduce using rule 80 (expression -> _tuple .)
    *               reduce using rule 80 (expression -> _tuple .)
    /               reduce using rule 80 (expression -> _tuple .)
    -               reduce using rule 80 (expression -> _tuple .)
    +               reduce using rule 80 (expression -> _tuple .)
    :               reduce using rule 80 (expression -> _tuple .)
    ,               reduce using rule 80 (expression -> _tuple .)
    }               reduce using rule 80 (expression -> _tuple .)
    ;               reduce using rule 80 (expression -> _tuple .)
    IN              reduce using rule 80 (expression -> _tuple .)
    )               reduce using rule 80 (expression -> _tuple .)
    ]               reduce using rule 80 (expression -> _tuple .)
    EQ_DIV          reduce using rule 80 (expression -> _tuple .)
    EQ_MOD          reduce using rule 80 (expression -> _tuple .)
    EQ_MUL          reduce using rule 80 (expression -> _tuple .)
    EQ_SUB          reduce using rule 80 (expression -> _tuple .)
    EQ_ADD          reduce using rule 80 (expression -> _tuple .)
    =               reduce using rule 80 (expression -> _tuple .)
    ?               reduce using rule 80 (expression -> _tuple .)
    {               reduce using rule 80 (expression -> _tuple .)
    SANDBOX         reduce using rule 80 (expression -> _tuple .)
    LIMPORT         reduce using rule 80 (expression -> _tuple .)
    .               reduce using rule 80 (expression -> _tuple .)
    IMPORT          reduce using rule 80 (expression -> _tuple .)
    ID              reduce using rule 80 (expression -> _tuple .)
    RETURN          reduce using rule 80 (expression -> _tuple .)
    DEL             reduce using rule 80 (expression -> _tuple .)
    FOR             reduce using rule 80 (expression -> _tuple .)
    SKIP            reduce using rule 80 (expression -> _tuple .)
    BREAK           reduce using rule 80 (expression -> _tuple .)
    LET             reduce using rule 80 (expression -> _tuple .)
    WHILE           reduce using rule 80 (expression -> _tuple .)
    NAMESPACE       reduce using rule 80 (expression -> _tuple .)
    CLASS           reduce using rule 80 (expression -> _tuple .)
    FUNC            reduce using rule 80 (expression -> _tuple .)
    PYTHON_CODE_EXEC reduce using rule 80 (expression -> _tuple .)
    PYTHON_CODE     reduce using rule 80 (expression -> _tuple .)
    IF              reduce using rule 80 (expression -> _tuple .)
    #               reduce using rule 80 (expression -> _tuple .)
    !               reduce using rule 80 (expression -> _tuple .)
    STRING          reduce using rule 80 (expression -> _tuple .)
    FALSE           reduce using rule 80 (expression -> _tuple .)
    TRUE            reduce using rule 80 (expression -> _tuple .)
    FLOAT           reduce using rule 80 (expression -> _tuple .)
    INT             reduce using rule 80 (expression -> _tuple .)
    NULL            reduce using rule 80 (expression -> _tuple .)
    $end            reduce using rule 80 (expression -> _tuple .)


state 52

    (82) expression -> id .
    ^               reduce using rule 82 (expression -> id .)
    [               reduce using rule 82 (expression -> id .)
    COLON_COLON     reduce using rule 82 (expression -> id .)
    (               reduce using rule 82 (expression -> id .)
    >               reduce using rule 82 (expression -> id .)
    <               reduce using rule 82 (expression -> id .)
    &               reduce using rule 82 (expression -> id .)
    |               reduce using rule 82 (expression -> id .)
    EQ_GREATER      reduce using rule 82 (expression -> id .)
    EQ_LESS         reduce using rule 82 (expression -> id .)
    NOT_EQEQ        reduce using rule 82 (expression -> id .)
    EQEQ            reduce using rule 82 (expression -> id .)
    %               reduce using rule 82 (expression -> id .)
    *               reduce using rule 82 (expression -> id .)
    /               reduce using rule 82 (expression -> id .)
    -               reduce using rule 82 (expression -> id .)
    +               reduce using rule 82 (expression -> id .)
    :               reduce using rule 82 (expression -> id .)
    ,               reduce using rule 82 (expression -> id .)
    }               reduce using rule 82 (expression -> id .)
    ;               reduce using rule 82 (expression -> id .)
    IN              reduce using rule 82 (expression -> id .)
    )               reduce using rule 82 (expression -> id .)
    ]               reduce using rule 82 (expression -> id .)
    EQ_DIV          reduce using rule 82 (expression -> id .)
    EQ_MOD          reduce using rule 82 (expression -> id .)
    EQ_MUL          reduce using rule 82 (expression -> id .)
    EQ_SUB          reduce using rule 82 (expression -> id .)
    EQ_ADD          reduce using rule 82 (expression -> id .)
    =               reduce using rule 82 (expression -> id .)
    ?               reduce using rule 82 (expression -> id .)
    {               reduce using rule 82 (expression -> id .)
    SANDBOX         reduce using rule 82 (expression -> id .)
    LIMPORT         reduce using rule 82 (expression -> id .)
    .               reduce using rule 82 (expression -> id .)
    IMPORT          reduce using rule 82 (expression -> id .)
    ID              reduce using rule 82 (expression -> id .)
    RETURN          reduce using rule 82 (expression -> id .)
    DEL             reduce using rule 82 (expression -> id .)
    FOR             reduce using rule 82 (expression -> id .)
    SKIP            reduce using rule 82 (expression -> id .)
    BREAK           reduce using rule 82 (expression -> id .)
    LET             reduce using rule 82 (expression -> id .)
    WHILE           reduce using rule 82 (expression -> id .)
    NAMESPACE       reduce using rule 82 (expression -> id .)
    CLASS           reduce using rule 82 (expression -> id .)
    FUNC            reduce using rule 82 (expression -> id .)
    PYTHON_CODE_EXEC reduce using rule 82 (expression -> id .)
    PYTHON_CODE     reduce using rule 82 (expression -> id .)
    IF              reduce using rule 82 (expression -> id .)
    #               reduce using rule 82 (expression -> id .)
    !               reduce using rule 82 (expression -> id .)
    STRING          reduce using rule 82 (expression -> id .)
    FALSE           reduce using rule 82 (expression -> id .)
    TRUE            reduce using rule 82 (expression -> id .)
    FLOAT           reduce using rule 82 (expression -> id .)
    INT             reduce using rule 82 (expression -> id .)
    NULL            reduce using rule 82 (expression -> id .)
    $end            reduce using rule 82 (expression -> id .)


state 53

    (83) expression -> string .
    ^               reduce using rule 83 (expression -> string .)
    [               reduce using rule 83 (expression -> string .)
    COLON_COLON     reduce using rule 83 (expression -> string .)
    (               reduce using rule 83 (expression -> string .)
    >               reduce using rule 83 (expression -> string .)
    <               reduce using rule 83 (expression -> string .)
    &               reduce using rule 83 (expression -> string .)
    |               reduce using rule 83 (expression -> string .)
    EQ_GREATER      reduce using rule 83 (expression -> string .)
    EQ_LESS         reduce using rule 83 (expression -> string .)
    NOT_EQEQ        reduce using rule 83 (expression -> string .)
    EQEQ            reduce using rule 83 (expression -> string .)
    %               reduce using rule 83 (expression -> string .)
    *               reduce using rule 83 (expression -> string .)
    /               reduce using rule 83 (expression -> string .)
    -               reduce using rule 83 (expression -> string .)
    +               reduce using rule 83 (expression -> string .)
    :               reduce using rule 83 (expression -> string .)
    ,               reduce using rule 83 (expression -> string .)
    }               reduce using rule 83 (expression -> string .)
    ;               reduce using rule 83 (expression -> string .)
    IN              reduce using rule 83 (expression -> string .)
    )               reduce using rule 83 (expression -> string .)
    ]               reduce using rule 83 (expression -> string .)
    EQ_DIV          reduce using rule 83 (expression -> string .)
    EQ_MOD          reduce using rule 83 (expression -> string .)
    EQ_MUL          reduce using rule 83 (expression -> string .)
    EQ_SUB          reduce using rule 83 (expression -> string .)
    EQ_ADD          reduce using rule 83 (expression -> string .)
    =               reduce using rule 83 (expression -> string .)
    ?               reduce using rule 83 (expression -> string .)
    {               reduce using rule 83 (expression -> string .)
    SANDBOX         reduce using rule 83 (expression -> string .)
    LIMPORT         reduce using rule 83 (expression -> string .)
    .               reduce using rule 83 (expression -> string .)
    IMPORT          reduce using rule 83 (expression -> string .)
    ID              reduce using rule 83 (expression -> string .)
    RETURN          reduce using rule 83 (expression -> string .)
    DEL             reduce using rule 83 (expression -> string .)
    FOR             reduce using rule 83 (expression -> string .)
    SKIP            reduce using rule 83 (expression -> string .)
    BREAK           reduce using rule 83 (expression -> string .)
    LET             reduce using rule 83 (expression -> string .)
    WHILE           reduce using rule 83 (expression -> string .)
    NAMESPACE       reduce using rule 83 (expression -> string .)
    CLASS           reduce using rule 83 (expression -> string .)
    FUNC            reduce using rule 83 (expression -> string .)
    PYTHON_CODE_EXEC reduce using rule 83 (expression -> string .)
    PYTHON_CODE     reduce using rule 83 (expression -> string .)
    IF              reduce using rule 83 (expression -> string .)
    #               reduce using rule 83 (expression -> string .)
    !               reduce using rule 83 (expression -> string .)
    STRING          reduce using rule 83 (expression -> string .)
    FALSE           reduce using rule 83 (expression -> string .)
    TRUE            reduce using rule 83 (expression -> string .)
    FLOAT           reduce using rule 83 (expression -> string .)
    INT             reduce using rule 83 (expression -> string .)
    NULL            reduce using rule 83 (expression -> string .)
    $end            reduce using rule 83 (expression -> string .)


state 54

    (84) expression -> bool .
    ^               reduce using rule 84 (expression -> bool .)
    [               reduce using rule 84 (expression -> bool .)
    COLON_COLON     reduce using rule 84 (expression -> bool .)
    (               reduce using rule 84 (expression -> bool .)
    >               reduce using rule 84 (expression -> bool .)
    <               reduce using rule 84 (expression -> bool .)
    &               reduce using rule 84 (expression -> bool .)
    |               reduce using rule 84 (expression -> bool .)
    EQ_GREATER      reduce using rule 84 (expression -> bool .)
    EQ_LESS         reduce using rule 84 (expression -> bool .)
    NOT_EQEQ        reduce using rule 84 (expression -> bool .)
    EQEQ            reduce using rule 84 (expression -> bool .)
    %               reduce using rule 84 (expression -> bool .)
    *               reduce using rule 84 (expression -> bool .)
    /               reduce using rule 84 (expression -> bool .)
    -               reduce using rule 84 (expression -> bool .)
    +               reduce using rule 84 (expression -> bool .)
    :               reduce using rule 84 (expression -> bool .)
    ,               reduce using rule 84 (expression -> bool .)
    }               reduce using rule 84 (expression -> bool .)
    ;               reduce using rule 84 (expression -> bool .)
    IN              reduce using rule 84 (expression -> bool .)
    )               reduce using rule 84 (expression -> bool .)
    ]               reduce using rule 84 (expression -> bool .)
    EQ_DIV          reduce using rule 84 (expression -> bool .)
    EQ_MOD          reduce using rule 84 (expression -> bool .)
    EQ_MUL          reduce using rule 84 (expression -> bool .)
    EQ_SUB          reduce using rule 84 (expression -> bool .)
    EQ_ADD          reduce using rule 84 (expression -> bool .)
    =               reduce using rule 84 (expression -> bool .)
    ?               reduce using rule 84 (expression -> bool .)
    {               reduce using rule 84 (expression -> bool .)
    SANDBOX         reduce using rule 84 (expression -> bool .)
    LIMPORT         reduce using rule 84 (expression -> bool .)
    .               reduce using rule 84 (expression -> bool .)
    IMPORT          reduce using rule 84 (expression -> bool .)
    ID              reduce using rule 84 (expression -> bool .)
    RETURN          reduce using rule 84 (expression -> bool .)
    DEL             reduce using rule 84 (expression -> bool .)
    FOR             reduce using rule 84 (expression -> bool .)
    SKIP            reduce using rule 84 (expression -> bool .)
    BREAK           reduce using rule 84 (expression -> bool .)
    LET             reduce using rule 84 (expression -> bool .)
    WHILE           reduce using rule 84 (expression -> bool .)
    NAMESPACE       reduce using rule 84 (expression -> bool .)
    CLASS           reduce using rule 84 (expression -> bool .)
    FUNC            reduce using rule 84 (expression -> bool .)
    PYTHON_CODE_EXEC reduce using rule 84 (expression -> bool .)
    PYTHON_CODE     reduce using rule 84 (expression -> bool .)
    IF              reduce using rule 84 (expression -> bool .)
    #               reduce using rule 84 (expression -> bool .)
    !               reduce using rule 84 (expression -> bool .)
    STRING          reduce using rule 84 (expression -> bool .)
    FALSE           reduce using rule 84 (expression -> bool .)
    TRUE            reduce using rule 84 (expression -> bool .)
    FLOAT           reduce using rule 84 (expression -> bool .)
    INT             reduce using rule 84 (expression -> bool .)
    NULL            reduce using rule 84 (expression -> bool .)
    $end            reduce using rule 84 (expression -> bool .)


state 55

    (85) expression -> float .
    ^               reduce using rule 85 (expression -> float .)
    [               reduce using rule 85 (expression -> float .)
    COLON_COLON     reduce using rule 85 (expression -> float .)
    (               reduce using rule 85 (expression -> float .)
    >               reduce using rule 85 (expression -> float .)
    <               reduce using rule 85 (expression -> float .)
    &               reduce using rule 85 (expression -> float .)
    |               reduce using rule 85 (expression -> float .)
    EQ_GREATER      reduce using rule 85 (expression -> float .)
    EQ_LESS         reduce using rule 85 (expression -> float .)
    NOT_EQEQ        reduce using rule 85 (expression -> float .)
    EQEQ            reduce using rule 85 (expression -> float .)
    %               reduce using rule 85 (expression -> float .)
    *               reduce using rule 85 (expression -> float .)
    /               reduce using rule 85 (expression -> float .)
    -               reduce using rule 85 (expression -> float .)
    +               reduce using rule 85 (expression -> float .)
    :               reduce using rule 85 (expression -> float .)
    ,               reduce using rule 85 (expression -> float .)
    }               reduce using rule 85 (expression -> float .)
    ;               reduce using rule 85 (expression -> float .)
    IN              reduce using rule 85 (expression -> float .)
    )               reduce using rule 85 (expression -> float .)
    ]               reduce using rule 85 (expression -> float .)
    EQ_DIV          reduce using rule 85 (expression -> float .)
    EQ_MOD          reduce using rule 85 (expression -> float .)
    EQ_MUL          reduce using rule 85 (expression -> float .)
    EQ_SUB          reduce using rule 85 (expression -> float .)
    EQ_ADD          reduce using rule 85 (expression -> float .)
    =               reduce using rule 85 (expression -> float .)
    ?               reduce using rule 85 (expression -> float .)
    {               reduce using rule 85 (expression -> float .)
    SANDBOX         reduce using rule 85 (expression -> float .)
    LIMPORT         reduce using rule 85 (expression -> float .)
    .               reduce using rule 85 (expression -> float .)
    IMPORT          reduce using rule 85 (expression -> float .)
    ID              reduce using rule 85 (expression -> float .)
    RETURN          reduce using rule 85 (expression -> float .)
    DEL             reduce using rule 85 (expression -> float .)
    FOR             reduce using rule 85 (expression -> float .)
    SKIP            reduce using rule 85 (expression -> float .)
    BREAK           reduce using rule 85 (expression -> float .)
    LET             reduce using rule 85 (expression -> float .)
    WHILE           reduce using rule 85 (expression -> float .)
    NAMESPACE       reduce using rule 85 (expression -> float .)
    CLASS           reduce using rule 85 (expression -> float .)
    FUNC            reduce using rule 85 (expression -> float .)
    PYTHON_CODE_EXEC reduce using rule 85 (expression -> float .)
    PYTHON_CODE     reduce using rule 85 (expression -> float .)
    IF              reduce using rule 85 (expression -> float .)
    #               reduce using rule 85 (expression -> float .)
    !               reduce using rule 85 (expression -> float .)
    STRING          reduce using rule 85 (expression -> float .)
    FALSE           reduce using rule 85 (expression -> float .)
    TRUE            reduce using rule 85 (expression -> float .)
    FLOAT           reduce using rule 85 (expression -> float .)
    INT             reduce using rule 85 (expression -> float .)
    NULL            reduce using rule 85 (expression -> float .)
    $end            reduce using rule 85 (expression -> float .)


state 56

    (86) expression -> int .
    ^               reduce using rule 86 (expression -> int .)
    [               reduce using rule 86 (expression -> int .)
    COLON_COLON     reduce using rule 86 (expression -> int .)
    (               reduce using rule 86 (expression -> int .)
    >               reduce using rule 86 (expression -> int .)
    <               reduce using rule 86 (expression -> int .)
    &               reduce using rule 86 (expression -> int .)
    |               reduce using rule 86 (expression -> int .)
    EQ_GREATER      reduce using rule 86 (expression -> int .)
    EQ_LESS         reduce using rule 86 (expression -> int .)
    NOT_EQEQ        reduce using rule 86 (expression -> int .)
    EQEQ            reduce using rule 86 (expression -> int .)
    %               reduce using rule 86 (expression -> int .)
    *               reduce using rule 86 (expression -> int .)
    /               reduce using rule 86 (expression -> int .)
    -               reduce using rule 86 (expression -> int .)
    +               reduce using rule 86 (expression -> int .)
    :               reduce using rule 86 (expression -> int .)
    ,               reduce using rule 86 (expression -> int .)
    }               reduce using rule 86 (expression -> int .)
    ;               reduce using rule 86 (expression -> int .)
    IN              reduce using rule 86 (expression -> int .)
    )               reduce using rule 86 (expression -> int .)
    ]               reduce using rule 86 (expression -> int .)
    EQ_DIV          reduce using rule 86 (expression -> int .)
    EQ_MOD          reduce using rule 86 (expression -> int .)
    EQ_MUL          reduce using rule 86 (expression -> int .)
    EQ_SUB          reduce using rule 86 (expression -> int .)
    EQ_ADD          reduce using rule 86 (expression -> int .)
    =               reduce using rule 86 (expression -> int .)
    ?               reduce using rule 86 (expression -> int .)
    {               reduce using rule 86 (expression -> int .)
    SANDBOX         reduce using rule 86 (expression -> int .)
    LIMPORT         reduce using rule 86 (expression -> int .)
    .               reduce using rule 86 (expression -> int .)
    IMPORT          reduce using rule 86 (expression -> int .)
    ID              reduce using rule 86 (expression -> int .)
    RETURN          reduce using rule 86 (expression -> int .)
    DEL             reduce using rule 86 (expression -> int .)
    FOR             reduce using rule 86 (expression -> int .)
    SKIP            reduce using rule 86 (expression -> int .)
    BREAK           reduce using rule 86 (expression -> int .)
    LET             reduce using rule 86 (expression -> int .)
    WHILE           reduce using rule 86 (expression -> int .)
    NAMESPACE       reduce using rule 86 (expression -> int .)
    CLASS           reduce using rule 86 (expression -> int .)
    FUNC            reduce using rule 86 (expression -> int .)
    PYTHON_CODE_EXEC reduce using rule 86 (expression -> int .)
    PYTHON_CODE     reduce using rule 86 (expression -> int .)
    IF              reduce using rule 86 (expression -> int .)
    #               reduce using rule 86 (expression -> int .)
    !               reduce using rule 86 (expression -> int .)
    STRING          reduce using rule 86 (expression -> int .)
    FALSE           reduce using rule 86 (expression -> int .)
    TRUE            reduce using rule 86 (expression -> int .)
    FLOAT           reduce using rule 86 (expression -> int .)
    INT             reduce using rule 86 (expression -> int .)
    NULL            reduce using rule 86 (expression -> int .)
    $end            reduce using rule 86 (expression -> int .)


state 57

    (87) expression -> null .
    ^               reduce using rule 87 (expression -> null .)
    [               reduce using rule 87 (expression -> null .)
    COLON_COLON     reduce using rule 87 (expression -> null .)
    (               reduce using rule 87 (expression -> null .)
    >               reduce using rule 87 (expression -> null .)
    <               reduce using rule 87 (expression -> null .)
    &               reduce using rule 87 (expression -> null .)
    |               reduce using rule 87 (expression -> null .)
    EQ_GREATER      reduce using rule 87 (expression -> null .)
    EQ_LESS         reduce using rule 87 (expression -> null .)
    NOT_EQEQ        reduce using rule 87 (expression -> null .)
    EQEQ            reduce using rule 87 (expression -> null .)
    %               reduce using rule 87 (expression -> null .)
    *               reduce using rule 87 (expression -> null .)
    /               reduce using rule 87 (expression -> null .)
    -               reduce using rule 87 (expression -> null .)
    +               reduce using rule 87 (expression -> null .)
    :               reduce using rule 87 (expression -> null .)
    ,               reduce using rule 87 (expression -> null .)
    }               reduce using rule 87 (expression -> null .)
    ;               reduce using rule 87 (expression -> null .)
    IN              reduce using rule 87 (expression -> null .)
    )               reduce using rule 87 (expression -> null .)
    ]               reduce using rule 87 (expression -> null .)
    EQ_DIV          reduce using rule 87 (expression -> null .)
    EQ_MOD          reduce using rule 87 (expression -> null .)
    EQ_MUL          reduce using rule 87 (expression -> null .)
    EQ_SUB          reduce using rule 87 (expression -> null .)
    EQ_ADD          reduce using rule 87 (expression -> null .)
    =               reduce using rule 87 (expression -> null .)
    ?               reduce using rule 87 (expression -> null .)
    {               reduce using rule 87 (expression -> null .)
    SANDBOX         reduce using rule 87 (expression -> null .)
    LIMPORT         reduce using rule 87 (expression -> null .)
    .               reduce using rule 87 (expression -> null .)
    IMPORT          reduce using rule 87 (expression -> null .)
    ID              reduce using rule 87 (expression -> null .)
    RETURN          reduce using rule 87 (expression -> null .)
    DEL             reduce using rule 87 (expression -> null .)
    FOR             reduce using rule 87 (expression -> null .)
    SKIP            reduce using rule 87 (expression -> null .)
    BREAK           reduce using rule 87 (expression -> null .)
    LET             reduce using rule 87 (expression -> null .)
    WHILE           reduce using rule 87 (expression -> null .)
    NAMESPACE       reduce using rule 87 (expression -> null .)
    CLASS           reduce using rule 87 (expression -> null .)
    FUNC            reduce using rule 87 (expression -> null .)
    PYTHON_CODE_EXEC reduce using rule 87 (expression -> null .)
    PYTHON_CODE     reduce using rule 87 (expression -> null .)
    IF              reduce using rule 87 (expression -> null .)
    #               reduce using rule 87 (expression -> null .)
    !               reduce using rule 87 (expression -> null .)
    STRING          reduce using rule 87 (expression -> null .)
    FALSE           reduce using rule 87 (expression -> null .)
    TRUE            reduce using rule 87 (expression -> null .)
    FLOAT           reduce using rule 87 (expression -> null .)
    INT             reduce using rule 87 (expression -> null .)
    NULL            reduce using rule 87 (expression -> null .)
    $end            reduce using rule 87 (expression -> null .)


state 58

    (94) expression -> ! . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 147
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 59

    (109) expression -> & . ID
    ID              shift and go to state 148


state 60

    (108) expression -> * . ID
    ID              shift and go to state 149


state 61

    (107) expression -> - . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 150
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 62

    (106) expression -> + . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 151
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 63

    (126) string -> STRING .
    ^               reduce using rule 126 (string -> STRING .)
    [               reduce using rule 126 (string -> STRING .)
    COLON_COLON     reduce using rule 126 (string -> STRING .)
    (               reduce using rule 126 (string -> STRING .)
    >               reduce using rule 126 (string -> STRING .)
    <               reduce using rule 126 (string -> STRING .)
    &               reduce using rule 126 (string -> STRING .)
    |               reduce using rule 126 (string -> STRING .)
    EQ_GREATER      reduce using rule 126 (string -> STRING .)
    EQ_LESS         reduce using rule 126 (string -> STRING .)
    NOT_EQEQ        reduce using rule 126 (string -> STRING .)
    EQEQ            reduce using rule 126 (string -> STRING .)
    %               reduce using rule 126 (string -> STRING .)
    *               reduce using rule 126 (string -> STRING .)
    /               reduce using rule 126 (string -> STRING .)
    -               reduce using rule 126 (string -> STRING .)
    +               reduce using rule 126 (string -> STRING .)
    :               reduce using rule 126 (string -> STRING .)
    ,               reduce using rule 126 (string -> STRING .)
    }               reduce using rule 126 (string -> STRING .)
    ;               reduce using rule 126 (string -> STRING .)
    IN              reduce using rule 126 (string -> STRING .)
    )               reduce using rule 126 (string -> STRING .)
    ]               reduce using rule 126 (string -> STRING .)
    EQ_DIV          reduce using rule 126 (string -> STRING .)
    EQ_MOD          reduce using rule 126 (string -> STRING .)
    EQ_MUL          reduce using rule 126 (string -> STRING .)
    EQ_SUB          reduce using rule 126 (string -> STRING .)
    EQ_ADD          reduce using rule 126 (string -> STRING .)
    =               reduce using rule 126 (string -> STRING .)
    ?               reduce using rule 126 (string -> STRING .)
    {               reduce using rule 126 (string -> STRING .)
    SANDBOX         reduce using rule 126 (string -> STRING .)
    LIMPORT         reduce using rule 126 (string -> STRING .)
    .               reduce using rule 126 (string -> STRING .)
    IMPORT          reduce using rule 126 (string -> STRING .)
    ID              reduce using rule 126 (string -> STRING .)
    RETURN          reduce using rule 126 (string -> STRING .)
    DEL             reduce using rule 126 (string -> STRING .)
    FOR             reduce using rule 126 (string -> STRING .)
    SKIP            reduce using rule 126 (string -> STRING .)
    BREAK           reduce using rule 126 (string -> STRING .)
    LET             reduce using rule 126 (string -> STRING .)
    WHILE           reduce using rule 126 (string -> STRING .)
    NAMESPACE       reduce using rule 126 (string -> STRING .)
    CLASS           reduce using rule 126 (string -> STRING .)
    FUNC            reduce using rule 126 (string -> STRING .)
    PYTHON_CODE_EXEC reduce using rule 126 (string -> STRING .)
    PYTHON_CODE     reduce using rule 126 (string -> STRING .)
    IF              reduce using rule 126 (string -> STRING .)
    #               reduce using rule 126 (string -> STRING .)
    !               reduce using rule 126 (string -> STRING .)
    STRING          reduce using rule 126 (string -> STRING .)
    FALSE           reduce using rule 126 (string -> STRING .)
    TRUE            reduce using rule 126 (string -> STRING .)
    FLOAT           reduce using rule 126 (string -> STRING .)
    INT             reduce using rule 126 (string -> STRING .)
    NULL            reduce using rule 126 (string -> STRING .)
    $end            reduce using rule 126 (string -> STRING .)


state 64

    (128) bool -> FALSE .
    ^               reduce using rule 128 (bool -> FALSE .)
    [               reduce using rule 128 (bool -> FALSE .)
    COLON_COLON     reduce using rule 128 (bool -> FALSE .)
    (               reduce using rule 128 (bool -> FALSE .)
    >               reduce using rule 128 (bool -> FALSE .)
    <               reduce using rule 128 (bool -> FALSE .)
    &               reduce using rule 128 (bool -> FALSE .)
    |               reduce using rule 128 (bool -> FALSE .)
    EQ_GREATER      reduce using rule 128 (bool -> FALSE .)
    EQ_LESS         reduce using rule 128 (bool -> FALSE .)
    NOT_EQEQ        reduce using rule 128 (bool -> FALSE .)
    EQEQ            reduce using rule 128 (bool -> FALSE .)
    %               reduce using rule 128 (bool -> FALSE .)
    *               reduce using rule 128 (bool -> FALSE .)
    /               reduce using rule 128 (bool -> FALSE .)
    -               reduce using rule 128 (bool -> FALSE .)
    +               reduce using rule 128 (bool -> FALSE .)
    :               reduce using rule 128 (bool -> FALSE .)
    ,               reduce using rule 128 (bool -> FALSE .)
    }               reduce using rule 128 (bool -> FALSE .)
    ;               reduce using rule 128 (bool -> FALSE .)
    IN              reduce using rule 128 (bool -> FALSE .)
    )               reduce using rule 128 (bool -> FALSE .)
    ]               reduce using rule 128 (bool -> FALSE .)
    EQ_DIV          reduce using rule 128 (bool -> FALSE .)
    EQ_MOD          reduce using rule 128 (bool -> FALSE .)
    EQ_MUL          reduce using rule 128 (bool -> FALSE .)
    EQ_SUB          reduce using rule 128 (bool -> FALSE .)
    EQ_ADD          reduce using rule 128 (bool -> FALSE .)
    =               reduce using rule 128 (bool -> FALSE .)
    ?               reduce using rule 128 (bool -> FALSE .)
    {               reduce using rule 128 (bool -> FALSE .)
    SANDBOX         reduce using rule 128 (bool -> FALSE .)
    LIMPORT         reduce using rule 128 (bool -> FALSE .)
    .               reduce using rule 128 (bool -> FALSE .)
    IMPORT          reduce using rule 128 (bool -> FALSE .)
    ID              reduce using rule 128 (bool -> FALSE .)
    RETURN          reduce using rule 128 (bool -> FALSE .)
    DEL             reduce using rule 128 (bool -> FALSE .)
    FOR             reduce using rule 128 (bool -> FALSE .)
    SKIP            reduce using rule 128 (bool -> FALSE .)
    BREAK           reduce using rule 128 (bool -> FALSE .)
    LET             reduce using rule 128 (bool -> FALSE .)
    WHILE           reduce using rule 128 (bool -> FALSE .)
    NAMESPACE       reduce using rule 128 (bool -> FALSE .)
    CLASS           reduce using rule 128 (bool -> FALSE .)
    FUNC            reduce using rule 128 (bool -> FALSE .)
    PYTHON_CODE_EXEC reduce using rule 128 (bool -> FALSE .)
    PYTHON_CODE     reduce using rule 128 (bool -> FALSE .)
    IF              reduce using rule 128 (bool -> FALSE .)
    #               reduce using rule 128 (bool -> FALSE .)
    !               reduce using rule 128 (bool -> FALSE .)
    STRING          reduce using rule 128 (bool -> FALSE .)
    FALSE           reduce using rule 128 (bool -> FALSE .)
    TRUE            reduce using rule 128 (bool -> FALSE .)
    FLOAT           reduce using rule 128 (bool -> FALSE .)
    INT             reduce using rule 128 (bool -> FALSE .)
    NULL            reduce using rule 128 (bool -> FALSE .)
    $end            reduce using rule 128 (bool -> FALSE .)


state 65

    (129) bool -> TRUE .
    ^               reduce using rule 129 (bool -> TRUE .)
    [               reduce using rule 129 (bool -> TRUE .)
    COLON_COLON     reduce using rule 129 (bool -> TRUE .)
    (               reduce using rule 129 (bool -> TRUE .)
    >               reduce using rule 129 (bool -> TRUE .)
    <               reduce using rule 129 (bool -> TRUE .)
    &               reduce using rule 129 (bool -> TRUE .)
    |               reduce using rule 129 (bool -> TRUE .)
    EQ_GREATER      reduce using rule 129 (bool -> TRUE .)
    EQ_LESS         reduce using rule 129 (bool -> TRUE .)
    NOT_EQEQ        reduce using rule 129 (bool -> TRUE .)
    EQEQ            reduce using rule 129 (bool -> TRUE .)
    %               reduce using rule 129 (bool -> TRUE .)
    *               reduce using rule 129 (bool -> TRUE .)
    /               reduce using rule 129 (bool -> TRUE .)
    -               reduce using rule 129 (bool -> TRUE .)
    +               reduce using rule 129 (bool -> TRUE .)
    :               reduce using rule 129 (bool -> TRUE .)
    ,               reduce using rule 129 (bool -> TRUE .)
    }               reduce using rule 129 (bool -> TRUE .)
    ;               reduce using rule 129 (bool -> TRUE .)
    IN              reduce using rule 129 (bool -> TRUE .)
    )               reduce using rule 129 (bool -> TRUE .)
    ]               reduce using rule 129 (bool -> TRUE .)
    EQ_DIV          reduce using rule 129 (bool -> TRUE .)
    EQ_MOD          reduce using rule 129 (bool -> TRUE .)
    EQ_MUL          reduce using rule 129 (bool -> TRUE .)
    EQ_SUB          reduce using rule 129 (bool -> TRUE .)
    EQ_ADD          reduce using rule 129 (bool -> TRUE .)
    =               reduce using rule 129 (bool -> TRUE .)
    ?               reduce using rule 129 (bool -> TRUE .)
    {               reduce using rule 129 (bool -> TRUE .)
    SANDBOX         reduce using rule 129 (bool -> TRUE .)
    LIMPORT         reduce using rule 129 (bool -> TRUE .)
    .               reduce using rule 129 (bool -> TRUE .)
    IMPORT          reduce using rule 129 (bool -> TRUE .)
    ID              reduce using rule 129 (bool -> TRUE .)
    RETURN          reduce using rule 129 (bool -> TRUE .)
    DEL             reduce using rule 129 (bool -> TRUE .)
    FOR             reduce using rule 129 (bool -> TRUE .)
    SKIP            reduce using rule 129 (bool -> TRUE .)
    BREAK           reduce using rule 129 (bool -> TRUE .)
    LET             reduce using rule 129 (bool -> TRUE .)
    WHILE           reduce using rule 129 (bool -> TRUE .)
    NAMESPACE       reduce using rule 129 (bool -> TRUE .)
    CLASS           reduce using rule 129 (bool -> TRUE .)
    FUNC            reduce using rule 129 (bool -> TRUE .)
    PYTHON_CODE_EXEC reduce using rule 129 (bool -> TRUE .)
    PYTHON_CODE     reduce using rule 129 (bool -> TRUE .)
    IF              reduce using rule 129 (bool -> TRUE .)
    #               reduce using rule 129 (bool -> TRUE .)
    !               reduce using rule 129 (bool -> TRUE .)
    STRING          reduce using rule 129 (bool -> TRUE .)
    FALSE           reduce using rule 129 (bool -> TRUE .)
    TRUE            reduce using rule 129 (bool -> TRUE .)
    FLOAT           reduce using rule 129 (bool -> TRUE .)
    INT             reduce using rule 129 (bool -> TRUE .)
    NULL            reduce using rule 129 (bool -> TRUE .)
    $end            reduce using rule 129 (bool -> TRUE .)


state 66

    (127) float -> FLOAT .
    ^               reduce using rule 127 (float -> FLOAT .)
    [               reduce using rule 127 (float -> FLOAT .)
    COLON_COLON     reduce using rule 127 (float -> FLOAT .)
    (               reduce using rule 127 (float -> FLOAT .)
    >               reduce using rule 127 (float -> FLOAT .)
    <               reduce using rule 127 (float -> FLOAT .)
    &               reduce using rule 127 (float -> FLOAT .)
    |               reduce using rule 127 (float -> FLOAT .)
    EQ_GREATER      reduce using rule 127 (float -> FLOAT .)
    EQ_LESS         reduce using rule 127 (float -> FLOAT .)
    NOT_EQEQ        reduce using rule 127 (float -> FLOAT .)
    EQEQ            reduce using rule 127 (float -> FLOAT .)
    %               reduce using rule 127 (float -> FLOAT .)
    *               reduce using rule 127 (float -> FLOAT .)
    /               reduce using rule 127 (float -> FLOAT .)
    -               reduce using rule 127 (float -> FLOAT .)
    +               reduce using rule 127 (float -> FLOAT .)
    :               reduce using rule 127 (float -> FLOAT .)
    ,               reduce using rule 127 (float -> FLOAT .)
    }               reduce using rule 127 (float -> FLOAT .)
    ;               reduce using rule 127 (float -> FLOAT .)
    IN              reduce using rule 127 (float -> FLOAT .)
    )               reduce using rule 127 (float -> FLOAT .)
    ]               reduce using rule 127 (float -> FLOAT .)
    EQ_DIV          reduce using rule 127 (float -> FLOAT .)
    EQ_MOD          reduce using rule 127 (float -> FLOAT .)
    EQ_MUL          reduce using rule 127 (float -> FLOAT .)
    EQ_SUB          reduce using rule 127 (float -> FLOAT .)
    EQ_ADD          reduce using rule 127 (float -> FLOAT .)
    =               reduce using rule 127 (float -> FLOAT .)
    ?               reduce using rule 127 (float -> FLOAT .)
    {               reduce using rule 127 (float -> FLOAT .)
    SANDBOX         reduce using rule 127 (float -> FLOAT .)
    LIMPORT         reduce using rule 127 (float -> FLOAT .)
    .               reduce using rule 127 (float -> FLOAT .)
    IMPORT          reduce using rule 127 (float -> FLOAT .)
    ID              reduce using rule 127 (float -> FLOAT .)
    RETURN          reduce using rule 127 (float -> FLOAT .)
    DEL             reduce using rule 127 (float -> FLOAT .)
    FOR             reduce using rule 127 (float -> FLOAT .)
    SKIP            reduce using rule 127 (float -> FLOAT .)
    BREAK           reduce using rule 127 (float -> FLOAT .)
    LET             reduce using rule 127 (float -> FLOAT .)
    WHILE           reduce using rule 127 (float -> FLOAT .)
    NAMESPACE       reduce using rule 127 (float -> FLOAT .)
    CLASS           reduce using rule 127 (float -> FLOAT .)
    FUNC            reduce using rule 127 (float -> FLOAT .)
    PYTHON_CODE_EXEC reduce using rule 127 (float -> FLOAT .)
    PYTHON_CODE     reduce using rule 127 (float -> FLOAT .)
    IF              reduce using rule 127 (float -> FLOAT .)
    #               reduce using rule 127 (float -> FLOAT .)
    !               reduce using rule 127 (float -> FLOAT .)
    STRING          reduce using rule 127 (float -> FLOAT .)
    FALSE           reduce using rule 127 (float -> FLOAT .)
    TRUE            reduce using rule 127 (float -> FLOAT .)
    FLOAT           reduce using rule 127 (float -> FLOAT .)
    INT             reduce using rule 127 (float -> FLOAT .)
    NULL            reduce using rule 127 (float -> FLOAT .)
    $end            reduce using rule 127 (float -> FLOAT .)


state 67

    (125) int -> INT .
    ^               reduce using rule 125 (int -> INT .)
    [               reduce using rule 125 (int -> INT .)
    COLON_COLON     reduce using rule 125 (int -> INT .)
    (               reduce using rule 125 (int -> INT .)
    >               reduce using rule 125 (int -> INT .)
    <               reduce using rule 125 (int -> INT .)
    &               reduce using rule 125 (int -> INT .)
    |               reduce using rule 125 (int -> INT .)
    EQ_GREATER      reduce using rule 125 (int -> INT .)
    EQ_LESS         reduce using rule 125 (int -> INT .)
    NOT_EQEQ        reduce using rule 125 (int -> INT .)
    EQEQ            reduce using rule 125 (int -> INT .)
    %               reduce using rule 125 (int -> INT .)
    *               reduce using rule 125 (int -> INT .)
    /               reduce using rule 125 (int -> INT .)
    -               reduce using rule 125 (int -> INT .)
    +               reduce using rule 125 (int -> INT .)
    :               reduce using rule 125 (int -> INT .)
    ,               reduce using rule 125 (int -> INT .)
    }               reduce using rule 125 (int -> INT .)
    ;               reduce using rule 125 (int -> INT .)
    IN              reduce using rule 125 (int -> INT .)
    )               reduce using rule 125 (int -> INT .)
    ]               reduce using rule 125 (int -> INT .)
    EQ_DIV          reduce using rule 125 (int -> INT .)
    EQ_MOD          reduce using rule 125 (int -> INT .)
    EQ_MUL          reduce using rule 125 (int -> INT .)
    EQ_SUB          reduce using rule 125 (int -> INT .)
    EQ_ADD          reduce using rule 125 (int -> INT .)
    =               reduce using rule 125 (int -> INT .)
    ?               reduce using rule 125 (int -> INT .)
    {               reduce using rule 125 (int -> INT .)
    SANDBOX         reduce using rule 125 (int -> INT .)
    LIMPORT         reduce using rule 125 (int -> INT .)
    .               reduce using rule 125 (int -> INT .)
    IMPORT          reduce using rule 125 (int -> INT .)
    ID              reduce using rule 125 (int -> INT .)
    RETURN          reduce using rule 125 (int -> INT .)
    DEL             reduce using rule 125 (int -> INT .)
    FOR             reduce using rule 125 (int -> INT .)
    SKIP            reduce using rule 125 (int -> INT .)
    BREAK           reduce using rule 125 (int -> INT .)
    LET             reduce using rule 125 (int -> INT .)
    WHILE           reduce using rule 125 (int -> INT .)
    NAMESPACE       reduce using rule 125 (int -> INT .)
    CLASS           reduce using rule 125 (int -> INT .)
    FUNC            reduce using rule 125 (int -> INT .)
    PYTHON_CODE_EXEC reduce using rule 125 (int -> INT .)
    PYTHON_CODE     reduce using rule 125 (int -> INT .)
    IF              reduce using rule 125 (int -> INT .)
    #               reduce using rule 125 (int -> INT .)
    !               reduce using rule 125 (int -> INT .)
    STRING          reduce using rule 125 (int -> INT .)
    FALSE           reduce using rule 125 (int -> INT .)
    TRUE            reduce using rule 125 (int -> INT .)
    FLOAT           reduce using rule 125 (int -> INT .)
    INT             reduce using rule 125 (int -> INT .)
    NULL            reduce using rule 125 (int -> INT .)
    $end            reduce using rule 125 (int -> INT .)


state 68

    (111) null -> NULL .
    ^               reduce using rule 111 (null -> NULL .)
    [               reduce using rule 111 (null -> NULL .)
    COLON_COLON     reduce using rule 111 (null -> NULL .)
    (               reduce using rule 111 (null -> NULL .)
    >               reduce using rule 111 (null -> NULL .)
    <               reduce using rule 111 (null -> NULL .)
    &               reduce using rule 111 (null -> NULL .)
    |               reduce using rule 111 (null -> NULL .)
    EQ_GREATER      reduce using rule 111 (null -> NULL .)
    EQ_LESS         reduce using rule 111 (null -> NULL .)
    NOT_EQEQ        reduce using rule 111 (null -> NULL .)
    EQEQ            reduce using rule 111 (null -> NULL .)
    %               reduce using rule 111 (null -> NULL .)
    *               reduce using rule 111 (null -> NULL .)
    /               reduce using rule 111 (null -> NULL .)
    -               reduce using rule 111 (null -> NULL .)
    +               reduce using rule 111 (null -> NULL .)
    :               reduce using rule 111 (null -> NULL .)
    ,               reduce using rule 111 (null -> NULL .)
    }               reduce using rule 111 (null -> NULL .)
    ;               reduce using rule 111 (null -> NULL .)
    IN              reduce using rule 111 (null -> NULL .)
    )               reduce using rule 111 (null -> NULL .)
    ]               reduce using rule 111 (null -> NULL .)
    EQ_DIV          reduce using rule 111 (null -> NULL .)
    EQ_MOD          reduce using rule 111 (null -> NULL .)
    EQ_MUL          reduce using rule 111 (null -> NULL .)
    EQ_SUB          reduce using rule 111 (null -> NULL .)
    EQ_ADD          reduce using rule 111 (null -> NULL .)
    =               reduce using rule 111 (null -> NULL .)
    ?               reduce using rule 111 (null -> NULL .)
    {               reduce using rule 111 (null -> NULL .)
    SANDBOX         reduce using rule 111 (null -> NULL .)
    LIMPORT         reduce using rule 111 (null -> NULL .)
    .               reduce using rule 111 (null -> NULL .)
    IMPORT          reduce using rule 111 (null -> NULL .)
    ID              reduce using rule 111 (null -> NULL .)
    RETURN          reduce using rule 111 (null -> NULL .)
    DEL             reduce using rule 111 (null -> NULL .)
    FOR             reduce using rule 111 (null -> NULL .)
    SKIP            reduce using rule 111 (null -> NULL .)
    BREAK           reduce using rule 111 (null -> NULL .)
    LET             reduce using rule 111 (null -> NULL .)
    WHILE           reduce using rule 111 (null -> NULL .)
    NAMESPACE       reduce using rule 111 (null -> NULL .)
    CLASS           reduce using rule 111 (null -> NULL .)
    FUNC            reduce using rule 111 (null -> NULL .)
    PYTHON_CODE_EXEC reduce using rule 111 (null -> NULL .)
    PYTHON_CODE     reduce using rule 111 (null -> NULL .)
    IF              reduce using rule 111 (null -> NULL .)
    #               reduce using rule 111 (null -> NULL .)
    !               reduce using rule 111 (null -> NULL .)
    STRING          reduce using rule 111 (null -> NULL .)
    FALSE           reduce using rule 111 (null -> NULL .)
    TRUE            reduce using rule 111 (null -> NULL .)
    FLOAT           reduce using rule 111 (null -> NULL .)
    INT             reduce using rule 111 (null -> NULL .)
    NULL            reduce using rule 111 (null -> NULL .)
    $end            reduce using rule 111 (null -> NULL .)


state 69

    (3) program -> program statement .
    SANDBOX         reduce using rule 3 (program -> program statement .)
    LIMPORT         reduce using rule 3 (program -> program statement .)
    .               reduce using rule 3 (program -> program statement .)
    IMPORT          reduce using rule 3 (program -> program statement .)
    ID              reduce using rule 3 (program -> program statement .)
    RETURN          reduce using rule 3 (program -> program statement .)
    DEL             reduce using rule 3 (program -> program statement .)
    FOR             reduce using rule 3 (program -> program statement .)
    SKIP            reduce using rule 3 (program -> program statement .)
    BREAK           reduce using rule 3 (program -> program statement .)
    LET             reduce using rule 3 (program -> program statement .)
    WHILE           reduce using rule 3 (program -> program statement .)
    NAMESPACE       reduce using rule 3 (program -> program statement .)
    CLASS           reduce using rule 3 (program -> program statement .)
    FUNC            reduce using rule 3 (program -> program statement .)
    PYTHON_CODE_EXEC reduce using rule 3 (program -> program statement .)
    PYTHON_CODE     reduce using rule 3 (program -> program statement .)
    IF              reduce using rule 3 (program -> program statement .)
    {               reduce using rule 3 (program -> program statement .)
    <               reduce using rule 3 (program -> program statement .)
    #               reduce using rule 3 (program -> program statement .)
    (               reduce using rule 3 (program -> program statement .)
    !               reduce using rule 3 (program -> program statement .)
    +               reduce using rule 3 (program -> program statement .)
    -               reduce using rule 3 (program -> program statement .)
    *               reduce using rule 3 (program -> program statement .)
    &               reduce using rule 3 (program -> program statement .)
    [               reduce using rule 3 (program -> program statement .)
    STRING          reduce using rule 3 (program -> program statement .)
    FALSE           reduce using rule 3 (program -> program statement .)
    TRUE            reduce using rule 3 (program -> program statement .)
    FLOAT           reduce using rule 3 (program -> program statement .)
    INT             reduce using rule 3 (program -> program statement .)
    NULL            reduce using rule 3 (program -> program statement .)
    $end            reduce using rule 3 (program -> program statement .)
    }               reduce using rule 3 (program -> program statement .)


state 70

    (19) sandbox -> SANDBOX { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               reduce using rule 137 (empty -> .)
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    <               shift and go to state 46
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59

    program                        shift and go to state 152
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 71

    (132) assoc_array -> { . assoc_array_items }
    (114) _tuple -> { . positional_args , }
    (115) _tuple -> { . positional_args }
    (26) function_call -> { . program }
    (133) assoc_array_items -> . expression : expression
    (134) assoc_array_items -> . assoc_array_items , expression : expression
    (47) positional_args -> . expression
    (48) positional_args -> . positional_args , expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (69) if_statement -> . IF ( expression ) { program }
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    }               reduce using rule 137 (empty -> .)
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    <               shift and go to state 46

    assoc_array_items              shift and go to state 73
    positional_args                shift and go to state 74
    program                        shift and go to state 72
    expression                     shift and go to state 75
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 76
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 77
    function_call                  shift and go to state 78
    python_code                    shift and go to state 79
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    if_statement                   shift and go to state 36

state 72

    (26) function_call -> { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               shift and go to state 154
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    SKIP            shift and go to state 30
    BREAK           shift and go to state 31
    LET             shift and go to state 32
    WHILE           shift and go to state 34
    NAMESPACE       shift and go to state 39
    CLASS           shift and go to state 40
    FUNC            shift and go to state 41
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44
    IF              shift and go to state 45
    {               shift and go to state 20
    <               shift and go to state 46
    #               shift and go to state 47
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68

    statement                      shift and go to state 69
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 73

    (132) assoc_array -> { assoc_array_items . }
    (134) assoc_array_items -> assoc_array_items . , expression : expression
    }               shift and go to state 155
    ,               shift and go to state 156


state 74

    (114) _tuple -> { positional_args . , }
    (115) _tuple -> { positional_args . }
    (48) positional_args -> positional_args . , expression
    ,               shift and go to state 157
    }               shift and go to state 158


state 75

    (133) assoc_array_items -> expression . : expression
    (47) positional_args -> expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    :               shift and go to state 159
    ,               reduce using rule 47 (positional_args -> expression .)
    }               reduce using rule 47 (positional_args -> expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 76

    (81) expression -> class_attribute .
    (64) class_attribute_assignment -> class_attribute . = expression ;
    :               reduce using rule 81 (expression -> class_attribute .)
    >               reduce using rule 81 (expression -> class_attribute .)
    <               reduce using rule 81 (expression -> class_attribute .)
    &               reduce using rule 81 (expression -> class_attribute .)
    |               reduce using rule 81 (expression -> class_attribute .)
    EQ_GREATER      reduce using rule 81 (expression -> class_attribute .)
    EQ_LESS         reduce using rule 81 (expression -> class_attribute .)
    NOT_EQEQ        reduce using rule 81 (expression -> class_attribute .)
    EQEQ            reduce using rule 81 (expression -> class_attribute .)
    %               reduce using rule 81 (expression -> class_attribute .)
    *               reduce using rule 81 (expression -> class_attribute .)
    /               reduce using rule 81 (expression -> class_attribute .)
    -               reduce using rule 81 (expression -> class_attribute .)
    +               reduce using rule 81 (expression -> class_attribute .)
    COLON_COLON     reduce using rule 81 (expression -> class_attribute .)
    ^               reduce using rule 81 (expression -> class_attribute .)
    [               reduce using rule 81 (expression -> class_attribute .)
    (               reduce using rule 81 (expression -> class_attribute .)
    ,               reduce using rule 81 (expression -> class_attribute .)
    }               reduce using rule 81 (expression -> class_attribute .)
    =               shift and go to state 136


state 77

    (88) expression -> get_index .
    (54) variable_operation -> get_index . EQ_DIV expression ;
    (56) variable_operation -> get_index . EQ_MOD expression ;
    (58) variable_operation -> get_index . EQ_MUL expression ;
    (60) variable_operation -> get_index . EQ_SUB expression ;
    (62) variable_operation -> get_index . EQ_ADD expression ;
    :               reduce using rule 88 (expression -> get_index .)
    >               reduce using rule 88 (expression -> get_index .)
    <               reduce using rule 88 (expression -> get_index .)
    &               reduce using rule 88 (expression -> get_index .)
    |               reduce using rule 88 (expression -> get_index .)
    EQ_GREATER      reduce using rule 88 (expression -> get_index .)
    EQ_LESS         reduce using rule 88 (expression -> get_index .)
    NOT_EQEQ        reduce using rule 88 (expression -> get_index .)
    EQEQ            reduce using rule 88 (expression -> get_index .)
    %               reduce using rule 88 (expression -> get_index .)
    *               reduce using rule 88 (expression -> get_index .)
    /               reduce using rule 88 (expression -> get_index .)
    -               reduce using rule 88 (expression -> get_index .)
    +               reduce using rule 88 (expression -> get_index .)
    COLON_COLON     reduce using rule 88 (expression -> get_index .)
    ^               reduce using rule 88 (expression -> get_index .)
    [               reduce using rule 88 (expression -> get_index .)
    (               reduce using rule 88 (expression -> get_index .)
    ,               reduce using rule 88 (expression -> get_index .)
    }               reduce using rule 88 (expression -> get_index .)
    EQ_DIV          shift and go to state 106
    EQ_MOD          shift and go to state 107
    EQ_MUL          shift and go to state 108
    EQ_SUB          shift and go to state 109
    EQ_ADD          shift and go to state 110


state 78

    (89) expression -> function_call .
    (21) function_call_statement -> function_call . ;
    :               reduce using rule 89 (expression -> function_call .)
    >               reduce using rule 89 (expression -> function_call .)
    <               reduce using rule 89 (expression -> function_call .)
    &               reduce using rule 89 (expression -> function_call .)
    |               reduce using rule 89 (expression -> function_call .)
    EQ_GREATER      reduce using rule 89 (expression -> function_call .)
    EQ_LESS         reduce using rule 89 (expression -> function_call .)
    NOT_EQEQ        reduce using rule 89 (expression -> function_call .)
    EQEQ            reduce using rule 89 (expression -> function_call .)
    %               reduce using rule 89 (expression -> function_call .)
    *               reduce using rule 89 (expression -> function_call .)
    /               reduce using rule 89 (expression -> function_call .)
    -               reduce using rule 89 (expression -> function_call .)
    +               reduce using rule 89 (expression -> function_call .)
    COLON_COLON     reduce using rule 89 (expression -> function_call .)
    ^               reduce using rule 89 (expression -> function_call .)
    [               reduce using rule 89 (expression -> function_call .)
    (               reduce using rule 89 (expression -> function_call .)
    ,               reduce using rule 89 (expression -> function_call .)
    }               reduce using rule 89 (expression -> function_call .)
    ;               shift and go to state 137


state 79

    (90) expression -> python_code .
    (22) python_code_statement -> python_code . ;
    :               reduce using rule 90 (expression -> python_code .)
    >               reduce using rule 90 (expression -> python_code .)
    <               reduce using rule 90 (expression -> python_code .)
    &               reduce using rule 90 (expression -> python_code .)
    |               reduce using rule 90 (expression -> python_code .)
    EQ_GREATER      reduce using rule 90 (expression -> python_code .)
    EQ_LESS         reduce using rule 90 (expression -> python_code .)
    NOT_EQEQ        reduce using rule 90 (expression -> python_code .)
    EQEQ            reduce using rule 90 (expression -> python_code .)
    %               reduce using rule 90 (expression -> python_code .)
    *               reduce using rule 90 (expression -> python_code .)
    /               reduce using rule 90 (expression -> python_code .)
    -               reduce using rule 90 (expression -> python_code .)
    +               reduce using rule 90 (expression -> python_code .)
    COLON_COLON     reduce using rule 90 (expression -> python_code .)
    ^               reduce using rule 90 (expression -> python_code .)
    [               reduce using rule 90 (expression -> python_code .)
    (               reduce using rule 90 (expression -> python_code .)
    ,               reduce using rule 90 (expression -> python_code .)
    }               reduce using rule 90 (expression -> python_code .)
    ;               shift and go to state 126


state 80

    (110) expression -> ID . OF ID
    (55) variable_operation -> ID . EQ_DIV expression ;
    (57) variable_operation -> ID . EQ_MOD expression ;
    (59) variable_operation -> ID . EQ_MUL expression ;
    (61) variable_operation -> ID . EQ_SUB expression ;
    (63) variable_operation -> ID . EQ_ADD expression ;
    (131) id -> ID .
    (29) function_call -> ID . TARROW ID
    OF              shift and go to state 117
    EQ_DIV          shift and go to state 111
    EQ_MOD          shift and go to state 112
    EQ_MUL          shift and go to state 113
    EQ_SUB          shift and go to state 114
    EQ_ADD          shift and go to state 115
    :               reduce using rule 131 (id -> ID .)
    >               reduce using rule 131 (id -> ID .)
    <               reduce using rule 131 (id -> ID .)
    &               reduce using rule 131 (id -> ID .)
    |               reduce using rule 131 (id -> ID .)
    EQ_GREATER      reduce using rule 131 (id -> ID .)
    EQ_LESS         reduce using rule 131 (id -> ID .)
    NOT_EQEQ        reduce using rule 131 (id -> ID .)
    EQEQ            reduce using rule 131 (id -> ID .)
    %               reduce using rule 131 (id -> ID .)
    *               reduce using rule 131 (id -> ID .)
    /               reduce using rule 131 (id -> ID .)
    -               reduce using rule 131 (id -> ID .)
    +               reduce using rule 131 (id -> ID .)
    COLON_COLON     reduce using rule 131 (id -> ID .)
    ^               reduce using rule 131 (id -> ID .)
    [               reduce using rule 131 (id -> ID .)
    (               reduce using rule 131 (id -> ID .)
    ,               reduce using rule 131 (id -> ID .)
    }               reduce using rule 131 (id -> ID .)
    TARROW          shift and go to state 116


state 81

    (20) sandbox -> LIMPORT expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 160
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 82

    (81) expression -> class_attribute .
    ;               reduce using rule 81 (expression -> class_attribute .)
    >               reduce using rule 81 (expression -> class_attribute .)
    <               reduce using rule 81 (expression -> class_attribute .)
    &               reduce using rule 81 (expression -> class_attribute .)
    |               reduce using rule 81 (expression -> class_attribute .)
    EQ_GREATER      reduce using rule 81 (expression -> class_attribute .)
    EQ_LESS         reduce using rule 81 (expression -> class_attribute .)
    NOT_EQEQ        reduce using rule 81 (expression -> class_attribute .)
    EQEQ            reduce using rule 81 (expression -> class_attribute .)
    %               reduce using rule 81 (expression -> class_attribute .)
    *               reduce using rule 81 (expression -> class_attribute .)
    /               reduce using rule 81 (expression -> class_attribute .)
    -               reduce using rule 81 (expression -> class_attribute .)
    +               reduce using rule 81 (expression -> class_attribute .)
    COLON_COLON     reduce using rule 81 (expression -> class_attribute .)
    ^               reduce using rule 81 (expression -> class_attribute .)
    [               reduce using rule 81 (expression -> class_attribute .)
    (               reduce using rule 81 (expression -> class_attribute .)
    IN              reduce using rule 81 (expression -> class_attribute .)
    )               reduce using rule 81 (expression -> class_attribute .)
    ,               reduce using rule 81 (expression -> class_attribute .)
    ]               reduce using rule 81 (expression -> class_attribute .)
    :               reduce using rule 81 (expression -> class_attribute .)
    }               reduce using rule 81 (expression -> class_attribute .)
    EQ_DIV          reduce using rule 81 (expression -> class_attribute .)
    EQ_MOD          reduce using rule 81 (expression -> class_attribute .)
    EQ_MUL          reduce using rule 81 (expression -> class_attribute .)
    EQ_SUB          reduce using rule 81 (expression -> class_attribute .)
    EQ_ADD          reduce using rule 81 (expression -> class_attribute .)
    =               reduce using rule 81 (expression -> class_attribute .)
    ?               reduce using rule 81 (expression -> class_attribute .)
    {               reduce using rule 81 (expression -> class_attribute .)
    SANDBOX         reduce using rule 81 (expression -> class_attribute .)
    LIMPORT         reduce using rule 81 (expression -> class_attribute .)
    .               reduce using rule 81 (expression -> class_attribute .)
    IMPORT          reduce using rule 81 (expression -> class_attribute .)
    ID              reduce using rule 81 (expression -> class_attribute .)
    RETURN          reduce using rule 81 (expression -> class_attribute .)
    DEL             reduce using rule 81 (expression -> class_attribute .)
    FOR             reduce using rule 81 (expression -> class_attribute .)
    SKIP            reduce using rule 81 (expression -> class_attribute .)
    BREAK           reduce using rule 81 (expression -> class_attribute .)
    LET             reduce using rule 81 (expression -> class_attribute .)
    WHILE           reduce using rule 81 (expression -> class_attribute .)
    NAMESPACE       reduce using rule 81 (expression -> class_attribute .)
    CLASS           reduce using rule 81 (expression -> class_attribute .)
    FUNC            reduce using rule 81 (expression -> class_attribute .)
    PYTHON_CODE_EXEC reduce using rule 81 (expression -> class_attribute .)
    PYTHON_CODE     reduce using rule 81 (expression -> class_attribute .)
    IF              reduce using rule 81 (expression -> class_attribute .)
    #               reduce using rule 81 (expression -> class_attribute .)
    !               reduce using rule 81 (expression -> class_attribute .)
    STRING          reduce using rule 81 (expression -> class_attribute .)
    FALSE           reduce using rule 81 (expression -> class_attribute .)
    TRUE            reduce using rule 81 (expression -> class_attribute .)
    FLOAT           reduce using rule 81 (expression -> class_attribute .)
    INT             reduce using rule 81 (expression -> class_attribute .)
    NULL            reduce using rule 81 (expression -> class_attribute .)
    $end            reduce using rule 81 (expression -> class_attribute .)


state 83

    (88) expression -> get_index .
    ;               reduce using rule 88 (expression -> get_index .)
    >               reduce using rule 88 (expression -> get_index .)
    <               reduce using rule 88 (expression -> get_index .)
    &               reduce using rule 88 (expression -> get_index .)
    |               reduce using rule 88 (expression -> get_index .)
    EQ_GREATER      reduce using rule 88 (expression -> get_index .)
    EQ_LESS         reduce using rule 88 (expression -> get_index .)
    NOT_EQEQ        reduce using rule 88 (expression -> get_index .)
    EQEQ            reduce using rule 88 (expression -> get_index .)
    %               reduce using rule 88 (expression -> get_index .)
    *               reduce using rule 88 (expression -> get_index .)
    /               reduce using rule 88 (expression -> get_index .)
    -               reduce using rule 88 (expression -> get_index .)
    +               reduce using rule 88 (expression -> get_index .)
    COLON_COLON     reduce using rule 88 (expression -> get_index .)
    ^               reduce using rule 88 (expression -> get_index .)
    [               reduce using rule 88 (expression -> get_index .)
    (               reduce using rule 88 (expression -> get_index .)
    IN              reduce using rule 88 (expression -> get_index .)
    )               reduce using rule 88 (expression -> get_index .)
    ,               reduce using rule 88 (expression -> get_index .)
    ]               reduce using rule 88 (expression -> get_index .)
    :               reduce using rule 88 (expression -> get_index .)
    }               reduce using rule 88 (expression -> get_index .)
    EQ_DIV          reduce using rule 88 (expression -> get_index .)
    EQ_MOD          reduce using rule 88 (expression -> get_index .)
    EQ_MUL          reduce using rule 88 (expression -> get_index .)
    EQ_SUB          reduce using rule 88 (expression -> get_index .)
    EQ_ADD          reduce using rule 88 (expression -> get_index .)
    =               reduce using rule 88 (expression -> get_index .)
    ?               reduce using rule 88 (expression -> get_index .)
    {               reduce using rule 88 (expression -> get_index .)
    SANDBOX         reduce using rule 88 (expression -> get_index .)
    LIMPORT         reduce using rule 88 (expression -> get_index .)
    .               reduce using rule 88 (expression -> get_index .)
    IMPORT          reduce using rule 88 (expression -> get_index .)
    ID              reduce using rule 88 (expression -> get_index .)
    RETURN          reduce using rule 88 (expression -> get_index .)
    DEL             reduce using rule 88 (expression -> get_index .)
    FOR             reduce using rule 88 (expression -> get_index .)
    SKIP            reduce using rule 88 (expression -> get_index .)
    BREAK           reduce using rule 88 (expression -> get_index .)
    LET             reduce using rule 88 (expression -> get_index .)
    WHILE           reduce using rule 88 (expression -> get_index .)
    NAMESPACE       reduce using rule 88 (expression -> get_index .)
    CLASS           reduce using rule 88 (expression -> get_index .)
    FUNC            reduce using rule 88 (expression -> get_index .)
    PYTHON_CODE_EXEC reduce using rule 88 (expression -> get_index .)
    PYTHON_CODE     reduce using rule 88 (expression -> get_index .)
    IF              reduce using rule 88 (expression -> get_index .)
    #               reduce using rule 88 (expression -> get_index .)
    !               reduce using rule 88 (expression -> get_index .)
    STRING          reduce using rule 88 (expression -> get_index .)
    FALSE           reduce using rule 88 (expression -> get_index .)
    TRUE            reduce using rule 88 (expression -> get_index .)
    FLOAT           reduce using rule 88 (expression -> get_index .)
    INT             reduce using rule 88 (expression -> get_index .)
    NULL            reduce using rule 88 (expression -> get_index .)
    $end            reduce using rule 88 (expression -> get_index .)


state 84

    (89) expression -> function_call .
    ;               reduce using rule 89 (expression -> function_call .)
    >               reduce using rule 89 (expression -> function_call .)
    <               reduce using rule 89 (expression -> function_call .)
    &               reduce using rule 89 (expression -> function_call .)
    |               reduce using rule 89 (expression -> function_call .)
    EQ_GREATER      reduce using rule 89 (expression -> function_call .)
    EQ_LESS         reduce using rule 89 (expression -> function_call .)
    NOT_EQEQ        reduce using rule 89 (expression -> function_call .)
    EQEQ            reduce using rule 89 (expression -> function_call .)
    %               reduce using rule 89 (expression -> function_call .)
    *               reduce using rule 89 (expression -> function_call .)
    /               reduce using rule 89 (expression -> function_call .)
    -               reduce using rule 89 (expression -> function_call .)
    +               reduce using rule 89 (expression -> function_call .)
    COLON_COLON     reduce using rule 89 (expression -> function_call .)
    ^               reduce using rule 89 (expression -> function_call .)
    [               reduce using rule 89 (expression -> function_call .)
    (               reduce using rule 89 (expression -> function_call .)
    IN              reduce using rule 89 (expression -> function_call .)
    )               reduce using rule 89 (expression -> function_call .)
    ,               reduce using rule 89 (expression -> function_call .)
    ]               reduce using rule 89 (expression -> function_call .)
    :               reduce using rule 89 (expression -> function_call .)
    }               reduce using rule 89 (expression -> function_call .)
    EQ_DIV          reduce using rule 89 (expression -> function_call .)
    EQ_MOD          reduce using rule 89 (expression -> function_call .)
    EQ_MUL          reduce using rule 89 (expression -> function_call .)
    EQ_SUB          reduce using rule 89 (expression -> function_call .)
    EQ_ADD          reduce using rule 89 (expression -> function_call .)
    =               reduce using rule 89 (expression -> function_call .)
    ?               reduce using rule 89 (expression -> function_call .)
    {               reduce using rule 89 (expression -> function_call .)
    SANDBOX         reduce using rule 89 (expression -> function_call .)
    LIMPORT         reduce using rule 89 (expression -> function_call .)
    .               reduce using rule 89 (expression -> function_call .)
    IMPORT          reduce using rule 89 (expression -> function_call .)
    ID              reduce using rule 89 (expression -> function_call .)
    RETURN          reduce using rule 89 (expression -> function_call .)
    DEL             reduce using rule 89 (expression -> function_call .)
    FOR             reduce using rule 89 (expression -> function_call .)
    SKIP            reduce using rule 89 (expression -> function_call .)
    BREAK           reduce using rule 89 (expression -> function_call .)
    LET             reduce using rule 89 (expression -> function_call .)
    WHILE           reduce using rule 89 (expression -> function_call .)
    NAMESPACE       reduce using rule 89 (expression -> function_call .)
    CLASS           reduce using rule 89 (expression -> function_call .)
    FUNC            reduce using rule 89 (expression -> function_call .)
    PYTHON_CODE_EXEC reduce using rule 89 (expression -> function_call .)
    PYTHON_CODE     reduce using rule 89 (expression -> function_call .)
    IF              reduce using rule 89 (expression -> function_call .)
    #               reduce using rule 89 (expression -> function_call .)
    !               reduce using rule 89 (expression -> function_call .)
    STRING          reduce using rule 89 (expression -> function_call .)
    FALSE           reduce using rule 89 (expression -> function_call .)
    TRUE            reduce using rule 89 (expression -> function_call .)
    FLOAT           reduce using rule 89 (expression -> function_call .)
    INT             reduce using rule 89 (expression -> function_call .)
    NULL            reduce using rule 89 (expression -> function_call .)
    $end            reduce using rule 89 (expression -> function_call .)


state 85

    (90) expression -> python_code .
    ;               reduce using rule 90 (expression -> python_code .)
    >               reduce using rule 90 (expression -> python_code .)
    <               reduce using rule 90 (expression -> python_code .)
    &               reduce using rule 90 (expression -> python_code .)
    |               reduce using rule 90 (expression -> python_code .)
    EQ_GREATER      reduce using rule 90 (expression -> python_code .)
    EQ_LESS         reduce using rule 90 (expression -> python_code .)
    NOT_EQEQ        reduce using rule 90 (expression -> python_code .)
    EQEQ            reduce using rule 90 (expression -> python_code .)
    %               reduce using rule 90 (expression -> python_code .)
    *               reduce using rule 90 (expression -> python_code .)
    /               reduce using rule 90 (expression -> python_code .)
    -               reduce using rule 90 (expression -> python_code .)
    +               reduce using rule 90 (expression -> python_code .)
    COLON_COLON     reduce using rule 90 (expression -> python_code .)
    ^               reduce using rule 90 (expression -> python_code .)
    [               reduce using rule 90 (expression -> python_code .)
    (               reduce using rule 90 (expression -> python_code .)
    IN              reduce using rule 90 (expression -> python_code .)
    )               reduce using rule 90 (expression -> python_code .)
    ,               reduce using rule 90 (expression -> python_code .)
    ]               reduce using rule 90 (expression -> python_code .)
    :               reduce using rule 90 (expression -> python_code .)
    }               reduce using rule 90 (expression -> python_code .)
    EQ_DIV          reduce using rule 90 (expression -> python_code .)
    EQ_MOD          reduce using rule 90 (expression -> python_code .)
    EQ_MUL          reduce using rule 90 (expression -> python_code .)
    EQ_SUB          reduce using rule 90 (expression -> python_code .)
    EQ_ADD          reduce using rule 90 (expression -> python_code .)
    =               reduce using rule 90 (expression -> python_code .)
    ?               reduce using rule 90 (expression -> python_code .)
    {               reduce using rule 90 (expression -> python_code .)
    SANDBOX         reduce using rule 90 (expression -> python_code .)
    LIMPORT         reduce using rule 90 (expression -> python_code .)
    .               reduce using rule 90 (expression -> python_code .)
    IMPORT          reduce using rule 90 (expression -> python_code .)
    ID              reduce using rule 90 (expression -> python_code .)
    RETURN          reduce using rule 90 (expression -> python_code .)
    DEL             reduce using rule 90 (expression -> python_code .)
    FOR             reduce using rule 90 (expression -> python_code .)
    SKIP            reduce using rule 90 (expression -> python_code .)
    BREAK           reduce using rule 90 (expression -> python_code .)
    LET             reduce using rule 90 (expression -> python_code .)
    WHILE           reduce using rule 90 (expression -> python_code .)
    NAMESPACE       reduce using rule 90 (expression -> python_code .)
    CLASS           reduce using rule 90 (expression -> python_code .)
    FUNC            reduce using rule 90 (expression -> python_code .)
    PYTHON_CODE_EXEC reduce using rule 90 (expression -> python_code .)
    PYTHON_CODE     reduce using rule 90 (expression -> python_code .)
    IF              reduce using rule 90 (expression -> python_code .)
    #               reduce using rule 90 (expression -> python_code .)
    !               reduce using rule 90 (expression -> python_code .)
    STRING          reduce using rule 90 (expression -> python_code .)
    FALSE           reduce using rule 90 (expression -> python_code .)
    TRUE            reduce using rule 90 (expression -> python_code .)
    FLOAT           reduce using rule 90 (expression -> python_code .)
    INT             reduce using rule 90 (expression -> python_code .)
    NULL            reduce using rule 90 (expression -> python_code .)
    $end            reduce using rule 90 (expression -> python_code .)


state 86

    (110) expression -> ID . OF ID
    (131) id -> ID .
    (29) function_call -> ID . TARROW ID
    OF              shift and go to state 117
    ;               reduce using rule 131 (id -> ID .)
    >               reduce using rule 131 (id -> ID .)
    <               reduce using rule 131 (id -> ID .)
    &               reduce using rule 131 (id -> ID .)
    |               reduce using rule 131 (id -> ID .)
    EQ_GREATER      reduce using rule 131 (id -> ID .)
    EQ_LESS         reduce using rule 131 (id -> ID .)
    NOT_EQEQ        reduce using rule 131 (id -> ID .)
    EQEQ            reduce using rule 131 (id -> ID .)
    %               reduce using rule 131 (id -> ID .)
    *               reduce using rule 131 (id -> ID .)
    /               reduce using rule 131 (id -> ID .)
    -               reduce using rule 131 (id -> ID .)
    +               reduce using rule 131 (id -> ID .)
    COLON_COLON     reduce using rule 131 (id -> ID .)
    ^               reduce using rule 131 (id -> ID .)
    [               reduce using rule 131 (id -> ID .)
    (               reduce using rule 131 (id -> ID .)
    IN              reduce using rule 131 (id -> ID .)
    )               reduce using rule 131 (id -> ID .)
    ,               reduce using rule 131 (id -> ID .)
    ]               reduce using rule 131 (id -> ID .)
    :               reduce using rule 131 (id -> ID .)
    }               reduce using rule 131 (id -> ID .)
    EQ_DIV          reduce using rule 131 (id -> ID .)
    EQ_MOD          reduce using rule 131 (id -> ID .)
    EQ_MUL          reduce using rule 131 (id -> ID .)
    EQ_SUB          reduce using rule 131 (id -> ID .)
    EQ_ADD          reduce using rule 131 (id -> ID .)
    =               reduce using rule 131 (id -> ID .)
    ?               reduce using rule 131 (id -> ID .)
    {               reduce using rule 131 (id -> ID .)
    SANDBOX         reduce using rule 131 (id -> ID .)
    LIMPORT         reduce using rule 131 (id -> ID .)
    .               reduce using rule 131 (id -> ID .)
    IMPORT          reduce using rule 131 (id -> ID .)
    ID              reduce using rule 131 (id -> ID .)
    RETURN          reduce using rule 131 (id -> ID .)
    DEL             reduce using rule 131 (id -> ID .)
    FOR             reduce using rule 131 (id -> ID .)
    SKIP            reduce using rule 131 (id -> ID .)
    BREAK           reduce using rule 131 (id -> ID .)
    LET             reduce using rule 131 (id -> ID .)
    WHILE           reduce using rule 131 (id -> ID .)
    NAMESPACE       reduce using rule 131 (id -> ID .)
    CLASS           reduce using rule 131 (id -> ID .)
    FUNC            reduce using rule 131 (id -> ID .)
    PYTHON_CODE_EXEC reduce using rule 131 (id -> ID .)
    PYTHON_CODE     reduce using rule 131 (id -> ID .)
    IF              reduce using rule 131 (id -> ID .)
    #               reduce using rule 131 (id -> ID .)
    !               reduce using rule 131 (id -> ID .)
    STRING          reduce using rule 131 (id -> ID .)
    FALSE           reduce using rule 131 (id -> ID .)
    TRUE            reduce using rule 131 (id -> ID .)
    FLOAT           reduce using rule 131 (id -> ID .)
    INT             reduce using rule 131 (id -> ID .)
    NULL            reduce using rule 131 (id -> ID .)
    $end            reduce using rule 131 (id -> ID .)
    TARROW          shift and go to state 116


state 87

    (112) get_index -> expression ^ . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 161
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 88

    (113) get_index -> expression [ . expression ]
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 162
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 89

    (130) class_attribute -> expression COLON_COLON . ID
    ID              shift and go to state 163


state 90

    (27) function_call -> expression ( . empty ) FARROW { program }
    (32) function_call -> expression ( . empty )
    (33) function_call -> expression ( . function_arguments ) FARROW { program }
    (34) function_call -> expression ( . function_arguments )
    (137) empty -> .
    (40) function_arguments -> . kwargs
    (41) function_arguments -> . positional_args , kwargs
    (42) function_arguments -> . positional_args
    (49) kwargs -> . ID = expression
    (50) kwargs -> . kwargs , id = expression
    (47) positional_args -> . expression
    (48) positional_args -> . positional_args , expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    )               reduce using rule 137 (empty -> .)
    ID              shift and go to state 168
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 142
    empty                          shift and go to state 164
    function_arguments             shift and go to state 165
    kwargs                         shift and go to state 166
    positional_args                shift and go to state 167
    id                             shift and go to state 52
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 91

    (92) expression -> expression > . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 169
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 92

    (93) expression -> expression < . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 170
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 93

    (95) expression -> expression & . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 171
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 94

    (96) expression -> expression | . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 172
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 95

    (97) expression -> expression EQ_GREATER . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 173
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 96

    (98) expression -> expression EQ_LESS . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 174
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 97

    (99) expression -> expression NOT_EQEQ . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 175
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 98

    (100) expression -> expression EQEQ . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 176
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 99

    (101) expression -> expression % . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 177
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 100

    (102) expression -> expression * . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 178
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 101

    (103) expression -> expression / . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 179
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 102

    (104) expression -> expression - . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 180
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 103

    (105) expression -> expression + . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 181
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 104

    (75) import_statement -> . GLOBAL . ;
    ;               shift and go to state 182


state 105

    (76) import_statement -> IMPORT expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 183
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 106

    (54) variable_operation -> get_index EQ_DIV . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    get_index                      shift and go to state 83
    expression                     shift and go to state 184
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 107

    (56) variable_operation -> get_index EQ_MOD . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    get_index                      shift and go to state 83
    expression                     shift and go to state 185
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 108

    (58) variable_operation -> get_index EQ_MUL . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    get_index                      shift and go to state 83
    expression                     shift and go to state 186
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 109

    (60) variable_operation -> get_index EQ_SUB . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    get_index                      shift and go to state 83
    expression                     shift and go to state 187
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 110

    (62) variable_operation -> get_index EQ_ADD . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    get_index                      shift and go to state 83
    expression                     shift and go to state 188
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 111

    (55) variable_operation -> ID EQ_DIV . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 189
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 112

    (57) variable_operation -> ID EQ_MOD . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 190
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 113

    (59) variable_operation -> ID EQ_MUL . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 191
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 114

    (61) variable_operation -> ID EQ_SUB . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 192
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 115

    (63) variable_operation -> ID EQ_ADD . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 193
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 116

    (29) function_call -> ID TARROW . ID
    ID              shift and go to state 194


state 117

    (110) expression -> ID OF . ID
    ID              shift and go to state 195


state 118

    (25) return_statement -> RETURN expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 196
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 119

    (74) delete_statement -> DEL ID . ;
    ;               shift and go to state 197


state 120

    (45) for_loop -> FOR expression . IN expression { program }
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    IN              shift and go to state 198
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 121

    (23) break_statement -> SKIP ; .
    SANDBOX         reduce using rule 23 (break_statement -> SKIP ; .)
    LIMPORT         reduce using rule 23 (break_statement -> SKIP ; .)
    .               reduce using rule 23 (break_statement -> SKIP ; .)
    IMPORT          reduce using rule 23 (break_statement -> SKIP ; .)
    ID              reduce using rule 23 (break_statement -> SKIP ; .)
    RETURN          reduce using rule 23 (break_statement -> SKIP ; .)
    DEL             reduce using rule 23 (break_statement -> SKIP ; .)
    FOR             reduce using rule 23 (break_statement -> SKIP ; .)
    SKIP            reduce using rule 23 (break_statement -> SKIP ; .)
    BREAK           reduce using rule 23 (break_statement -> SKIP ; .)
    LET             reduce using rule 23 (break_statement -> SKIP ; .)
    WHILE           reduce using rule 23 (break_statement -> SKIP ; .)
    NAMESPACE       reduce using rule 23 (break_statement -> SKIP ; .)
    CLASS           reduce using rule 23 (break_statement -> SKIP ; .)
    FUNC            reduce using rule 23 (break_statement -> SKIP ; .)
    PYTHON_CODE_EXEC reduce using rule 23 (break_statement -> SKIP ; .)
    PYTHON_CODE     reduce using rule 23 (break_statement -> SKIP ; .)
    IF              reduce using rule 23 (break_statement -> SKIP ; .)
    {               reduce using rule 23 (break_statement -> SKIP ; .)
    <               reduce using rule 23 (break_statement -> SKIP ; .)
    #               reduce using rule 23 (break_statement -> SKIP ; .)
    (               reduce using rule 23 (break_statement -> SKIP ; .)
    !               reduce using rule 23 (break_statement -> SKIP ; .)
    +               reduce using rule 23 (break_statement -> SKIP ; .)
    -               reduce using rule 23 (break_statement -> SKIP ; .)
    *               reduce using rule 23 (break_statement -> SKIP ; .)
    &               reduce using rule 23 (break_statement -> SKIP ; .)
    [               reduce using rule 23 (break_statement -> SKIP ; .)
    STRING          reduce using rule 23 (break_statement -> SKIP ; .)
    FALSE           reduce using rule 23 (break_statement -> SKIP ; .)
    TRUE            reduce using rule 23 (break_statement -> SKIP ; .)
    FLOAT           reduce using rule 23 (break_statement -> SKIP ; .)
    INT             reduce using rule 23 (break_statement -> SKIP ; .)
    NULL            reduce using rule 23 (break_statement -> SKIP ; .)
    $end            reduce using rule 23 (break_statement -> SKIP ; .)
    }               reduce using rule 23 (break_statement -> SKIP ; .)


state 122

    (24) break_statement -> BREAK ; .
    SANDBOX         reduce using rule 24 (break_statement -> BREAK ; .)
    LIMPORT         reduce using rule 24 (break_statement -> BREAK ; .)
    .               reduce using rule 24 (break_statement -> BREAK ; .)
    IMPORT          reduce using rule 24 (break_statement -> BREAK ; .)
    ID              reduce using rule 24 (break_statement -> BREAK ; .)
    RETURN          reduce using rule 24 (break_statement -> BREAK ; .)
    DEL             reduce using rule 24 (break_statement -> BREAK ; .)
    FOR             reduce using rule 24 (break_statement -> BREAK ; .)
    SKIP            reduce using rule 24 (break_statement -> BREAK ; .)
    BREAK           reduce using rule 24 (break_statement -> BREAK ; .)
    LET             reduce using rule 24 (break_statement -> BREAK ; .)
    WHILE           reduce using rule 24 (break_statement -> BREAK ; .)
    NAMESPACE       reduce using rule 24 (break_statement -> BREAK ; .)
    CLASS           reduce using rule 24 (break_statement -> BREAK ; .)
    FUNC            reduce using rule 24 (break_statement -> BREAK ; .)
    PYTHON_CODE_EXEC reduce using rule 24 (break_statement -> BREAK ; .)
    PYTHON_CODE     reduce using rule 24 (break_statement -> BREAK ; .)
    IF              reduce using rule 24 (break_statement -> BREAK ; .)
    {               reduce using rule 24 (break_statement -> BREAK ; .)
    <               reduce using rule 24 (break_statement -> BREAK ; .)
    #               reduce using rule 24 (break_statement -> BREAK ; .)
    (               reduce using rule 24 (break_statement -> BREAK ; .)
    !               reduce using rule 24 (break_statement -> BREAK ; .)
    +               reduce using rule 24 (break_statement -> BREAK ; .)
    -               reduce using rule 24 (break_statement -> BREAK ; .)
    *               reduce using rule 24 (break_statement -> BREAK ; .)
    &               reduce using rule 24 (break_statement -> BREAK ; .)
    [               reduce using rule 24 (break_statement -> BREAK ; .)
    STRING          reduce using rule 24 (break_statement -> BREAK ; .)
    FALSE           reduce using rule 24 (break_statement -> BREAK ; .)
    TRUE            reduce using rule 24 (break_statement -> BREAK ; .)
    FLOAT           reduce using rule 24 (break_statement -> BREAK ; .)
    INT             reduce using rule 24 (break_statement -> BREAK ; .)
    NULL            reduce using rule 24 (break_statement -> BREAK ; .)
    $end            reduce using rule 24 (break_statement -> BREAK ; .)
    }               reduce using rule 24 (break_statement -> BREAK ; .)


state 123

    (51) variable_assignment -> LET get_index . = expression ;
    (88) expression -> get_index .
    =               shift and go to state 199
    ^               reduce using rule 88 (expression -> get_index .)
    [               reduce using rule 88 (expression -> get_index .)
    >               reduce using rule 88 (expression -> get_index .)
    <               reduce using rule 88 (expression -> get_index .)
    &               reduce using rule 88 (expression -> get_index .)
    |               reduce using rule 88 (expression -> get_index .)
    EQ_GREATER      reduce using rule 88 (expression -> get_index .)
    EQ_LESS         reduce using rule 88 (expression -> get_index .)
    NOT_EQEQ        reduce using rule 88 (expression -> get_index .)
    EQEQ            reduce using rule 88 (expression -> get_index .)
    %               reduce using rule 88 (expression -> get_index .)
    *               reduce using rule 88 (expression -> get_index .)
    /               reduce using rule 88 (expression -> get_index .)
    -               reduce using rule 88 (expression -> get_index .)
    +               reduce using rule 88 (expression -> get_index .)
    COLON_COLON     reduce using rule 88 (expression -> get_index .)
    (               reduce using rule 88 (expression -> get_index .)


state 124

    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               shift and go to state 87
    [               shift and go to state 88
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    (               shift and go to state 90


state 125

    (52) variable_assignment -> LET ID . : ID = expression ;
    (53) variable_assignment -> LET ID . = expression ;
    (110) expression -> ID . OF ID
    (131) id -> ID .
    (29) function_call -> ID . TARROW ID
    :               shift and go to state 200
    =               shift and go to state 201
    OF              shift and go to state 117
    ^               reduce using rule 131 (id -> ID .)
    [               reduce using rule 131 (id -> ID .)
    >               reduce using rule 131 (id -> ID .)
    <               reduce using rule 131 (id -> ID .)
    &               reduce using rule 131 (id -> ID .)
    |               reduce using rule 131 (id -> ID .)
    EQ_GREATER      reduce using rule 131 (id -> ID .)
    EQ_LESS         reduce using rule 131 (id -> ID .)
    NOT_EQEQ        reduce using rule 131 (id -> ID .)
    EQEQ            reduce using rule 131 (id -> ID .)
    %               reduce using rule 131 (id -> ID .)
    *               reduce using rule 131 (id -> ID .)
    /               reduce using rule 131 (id -> ID .)
    -               reduce using rule 131 (id -> ID .)
    +               reduce using rule 131 (id -> ID .)
    COLON_COLON     reduce using rule 131 (id -> ID .)
    (               reduce using rule 131 (id -> ID .)
    TARROW          shift and go to state 116


state 126

    (22) python_code_statement -> python_code ; .
    SANDBOX         reduce using rule 22 (python_code_statement -> python_code ; .)
    LIMPORT         reduce using rule 22 (python_code_statement -> python_code ; .)
    .               reduce using rule 22 (python_code_statement -> python_code ; .)
    IMPORT          reduce using rule 22 (python_code_statement -> python_code ; .)
    ID              reduce using rule 22 (python_code_statement -> python_code ; .)
    RETURN          reduce using rule 22 (python_code_statement -> python_code ; .)
    DEL             reduce using rule 22 (python_code_statement -> python_code ; .)
    FOR             reduce using rule 22 (python_code_statement -> python_code ; .)
    SKIP            reduce using rule 22 (python_code_statement -> python_code ; .)
    BREAK           reduce using rule 22 (python_code_statement -> python_code ; .)
    LET             reduce using rule 22 (python_code_statement -> python_code ; .)
    WHILE           reduce using rule 22 (python_code_statement -> python_code ; .)
    NAMESPACE       reduce using rule 22 (python_code_statement -> python_code ; .)
    CLASS           reduce using rule 22 (python_code_statement -> python_code ; .)
    FUNC            reduce using rule 22 (python_code_statement -> python_code ; .)
    PYTHON_CODE_EXEC reduce using rule 22 (python_code_statement -> python_code ; .)
    PYTHON_CODE     reduce using rule 22 (python_code_statement -> python_code ; .)
    IF              reduce using rule 22 (python_code_statement -> python_code ; .)
    {               reduce using rule 22 (python_code_statement -> python_code ; .)
    <               reduce using rule 22 (python_code_statement -> python_code ; .)
    #               reduce using rule 22 (python_code_statement -> python_code ; .)
    (               reduce using rule 22 (python_code_statement -> python_code ; .)
    !               reduce using rule 22 (python_code_statement -> python_code ; .)
    +               reduce using rule 22 (python_code_statement -> python_code ; .)
    -               reduce using rule 22 (python_code_statement -> python_code ; .)
    *               reduce using rule 22 (python_code_statement -> python_code ; .)
    &               reduce using rule 22 (python_code_statement -> python_code ; .)
    [               reduce using rule 22 (python_code_statement -> python_code ; .)
    STRING          reduce using rule 22 (python_code_statement -> python_code ; .)
    FALSE           reduce using rule 22 (python_code_statement -> python_code ; .)
    TRUE            reduce using rule 22 (python_code_statement -> python_code ; .)
    FLOAT           reduce using rule 22 (python_code_statement -> python_code ; .)
    INT             reduce using rule 22 (python_code_statement -> python_code ; .)
    NULL            reduce using rule 22 (python_code_statement -> python_code ; .)
    $end            reduce using rule 22 (python_code_statement -> python_code ; .)
    }               reduce using rule 22 (python_code_statement -> python_code ; .)


state 127

    (46) while_loop -> WHILE ( . expression ) { program }
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 202
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 128

    (91) expression -> ( expression . )
    (120) _numpy -> ( expression . , )
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (123) items -> expression . , expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    )               shift and go to state 203
    ,               shift and go to state 204
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 129

    (119) _numpy -> ( ) .
    ^               reduce using rule 119 (_numpy -> ( ) .)
    [               reduce using rule 119 (_numpy -> ( ) .)
    COLON_COLON     reduce using rule 119 (_numpy -> ( ) .)
    (               reduce using rule 119 (_numpy -> ( ) .)
    >               reduce using rule 119 (_numpy -> ( ) .)
    <               reduce using rule 119 (_numpy -> ( ) .)
    &               reduce using rule 119 (_numpy -> ( ) .)
    |               reduce using rule 119 (_numpy -> ( ) .)
    EQ_GREATER      reduce using rule 119 (_numpy -> ( ) .)
    EQ_LESS         reduce using rule 119 (_numpy -> ( ) .)
    NOT_EQEQ        reduce using rule 119 (_numpy -> ( ) .)
    EQEQ            reduce using rule 119 (_numpy -> ( ) .)
    %               reduce using rule 119 (_numpy -> ( ) .)
    *               reduce using rule 119 (_numpy -> ( ) .)
    /               reduce using rule 119 (_numpy -> ( ) .)
    -               reduce using rule 119 (_numpy -> ( ) .)
    +               reduce using rule 119 (_numpy -> ( ) .)
    :               reduce using rule 119 (_numpy -> ( ) .)
    ,               reduce using rule 119 (_numpy -> ( ) .)
    }               reduce using rule 119 (_numpy -> ( ) .)
    ;               reduce using rule 119 (_numpy -> ( ) .)
    IN              reduce using rule 119 (_numpy -> ( ) .)
    )               reduce using rule 119 (_numpy -> ( ) .)
    ]               reduce using rule 119 (_numpy -> ( ) .)
    EQ_DIV          reduce using rule 119 (_numpy -> ( ) .)
    EQ_MOD          reduce using rule 119 (_numpy -> ( ) .)
    EQ_MUL          reduce using rule 119 (_numpy -> ( ) .)
    EQ_SUB          reduce using rule 119 (_numpy -> ( ) .)
    EQ_ADD          reduce using rule 119 (_numpy -> ( ) .)
    =               reduce using rule 119 (_numpy -> ( ) .)
    ?               reduce using rule 119 (_numpy -> ( ) .)
    {               reduce using rule 119 (_numpy -> ( ) .)
    SANDBOX         reduce using rule 119 (_numpy -> ( ) .)
    LIMPORT         reduce using rule 119 (_numpy -> ( ) .)
    .               reduce using rule 119 (_numpy -> ( ) .)
    IMPORT          reduce using rule 119 (_numpy -> ( ) .)
    ID              reduce using rule 119 (_numpy -> ( ) .)
    RETURN          reduce using rule 119 (_numpy -> ( ) .)
    DEL             reduce using rule 119 (_numpy -> ( ) .)
    FOR             reduce using rule 119 (_numpy -> ( ) .)
    SKIP            reduce using rule 119 (_numpy -> ( ) .)
    BREAK           reduce using rule 119 (_numpy -> ( ) .)
    LET             reduce using rule 119 (_numpy -> ( ) .)
    WHILE           reduce using rule 119 (_numpy -> ( ) .)
    NAMESPACE       reduce using rule 119 (_numpy -> ( ) .)
    CLASS           reduce using rule 119 (_numpy -> ( ) .)
    FUNC            reduce using rule 119 (_numpy -> ( ) .)
    PYTHON_CODE_EXEC reduce using rule 119 (_numpy -> ( ) .)
    PYTHON_CODE     reduce using rule 119 (_numpy -> ( ) .)
    IF              reduce using rule 119 (_numpy -> ( ) .)
    #               reduce using rule 119 (_numpy -> ( ) .)
    !               reduce using rule 119 (_numpy -> ( ) .)
    STRING          reduce using rule 119 (_numpy -> ( ) .)
    FALSE           reduce using rule 119 (_numpy -> ( ) .)
    TRUE            reduce using rule 119 (_numpy -> ( ) .)
    FLOAT           reduce using rule 119 (_numpy -> ( ) .)
    INT             reduce using rule 119 (_numpy -> ( ) .)
    NULL            reduce using rule 119 (_numpy -> ( ) .)
    $end            reduce using rule 119 (_numpy -> ( ) .)


state 130

    (118) _numpy -> ( , . )
    )               shift and go to state 205


state 131

    (121) _numpy -> ( items . , )
    (122) _numpy -> ( items . )
    (124) items -> items . , expression
    ,               shift and go to state 206
    )               shift and go to state 207


state 132

    (65) conditional -> if_statement else_statement .
    SANDBOX         reduce using rule 65 (conditional -> if_statement else_statement .)
    LIMPORT         reduce using rule 65 (conditional -> if_statement else_statement .)
    .               reduce using rule 65 (conditional -> if_statement else_statement .)
    IMPORT          reduce using rule 65 (conditional -> if_statement else_statement .)
    ID              reduce using rule 65 (conditional -> if_statement else_statement .)
    RETURN          reduce using rule 65 (conditional -> if_statement else_statement .)
    DEL             reduce using rule 65 (conditional -> if_statement else_statement .)
    FOR             reduce using rule 65 (conditional -> if_statement else_statement .)
    SKIP            reduce using rule 65 (conditional -> if_statement else_statement .)
    BREAK           reduce using rule 65 (conditional -> if_statement else_statement .)
    LET             reduce using rule 65 (conditional -> if_statement else_statement .)
    WHILE           reduce using rule 65 (conditional -> if_statement else_statement .)
    NAMESPACE       reduce using rule 65 (conditional -> if_statement else_statement .)
    CLASS           reduce using rule 65 (conditional -> if_statement else_statement .)
    FUNC            reduce using rule 65 (conditional -> if_statement else_statement .)
    PYTHON_CODE_EXEC reduce using rule 65 (conditional -> if_statement else_statement .)
    PYTHON_CODE     reduce using rule 65 (conditional -> if_statement else_statement .)
    IF              reduce using rule 65 (conditional -> if_statement else_statement .)
    {               reduce using rule 65 (conditional -> if_statement else_statement .)
    <               reduce using rule 65 (conditional -> if_statement else_statement .)
    #               reduce using rule 65 (conditional -> if_statement else_statement .)
    (               reduce using rule 65 (conditional -> if_statement else_statement .)
    !               reduce using rule 65 (conditional -> if_statement else_statement .)
    +               reduce using rule 65 (conditional -> if_statement else_statement .)
    -               reduce using rule 65 (conditional -> if_statement else_statement .)
    *               reduce using rule 65 (conditional -> if_statement else_statement .)
    &               reduce using rule 65 (conditional -> if_statement else_statement .)
    [               reduce using rule 65 (conditional -> if_statement else_statement .)
    STRING          reduce using rule 65 (conditional -> if_statement else_statement .)
    FALSE           reduce using rule 65 (conditional -> if_statement else_statement .)
    TRUE            reduce using rule 65 (conditional -> if_statement else_statement .)
    FLOAT           reduce using rule 65 (conditional -> if_statement else_statement .)
    INT             reduce using rule 65 (conditional -> if_statement else_statement .)
    NULL            reduce using rule 65 (conditional -> if_statement else_statement .)
    $end            reduce using rule 65 (conditional -> if_statement else_statement .)
    }               reduce using rule 65 (conditional -> if_statement else_statement .)


state 133

    (66) conditional -> if_statement else_if_loop . else_statement
    (67) conditional -> if_statement else_if_loop .
    (71) else_if_loop -> else_if_loop . else_if_statement
    (73) else_statement -> . ELSE { program }
    (72) else_if_statement -> . ELSE IF ( expression ) { program }
    SANDBOX         reduce using rule 67 (conditional -> if_statement else_if_loop .)
    LIMPORT         reduce using rule 67 (conditional -> if_statement else_if_loop .)
    .               reduce using rule 67 (conditional -> if_statement else_if_loop .)
    IMPORT          reduce using rule 67 (conditional -> if_statement else_if_loop .)
    ID              reduce using rule 67 (conditional -> if_statement else_if_loop .)
    RETURN          reduce using rule 67 (conditional -> if_statement else_if_loop .)
    DEL             reduce using rule 67 (conditional -> if_statement else_if_loop .)
    FOR             reduce using rule 67 (conditional -> if_statement else_if_loop .)
    SKIP            reduce using rule 67 (conditional -> if_statement else_if_loop .)
    BREAK           reduce using rule 67 (conditional -> if_statement else_if_loop .)
    LET             reduce using rule 67 (conditional -> if_statement else_if_loop .)
    WHILE           reduce using rule 67 (conditional -> if_statement else_if_loop .)
    NAMESPACE       reduce using rule 67 (conditional -> if_statement else_if_loop .)
    CLASS           reduce using rule 67 (conditional -> if_statement else_if_loop .)
    FUNC            reduce using rule 67 (conditional -> if_statement else_if_loop .)
    PYTHON_CODE_EXEC reduce using rule 67 (conditional -> if_statement else_if_loop .)
    PYTHON_CODE     reduce using rule 67 (conditional -> if_statement else_if_loop .)
    IF              reduce using rule 67 (conditional -> if_statement else_if_loop .)
    {               reduce using rule 67 (conditional -> if_statement else_if_loop .)
    <               reduce using rule 67 (conditional -> if_statement else_if_loop .)
    #               reduce using rule 67 (conditional -> if_statement else_if_loop .)
    (               reduce using rule 67 (conditional -> if_statement else_if_loop .)
    !               reduce using rule 67 (conditional -> if_statement else_if_loop .)
    +               reduce using rule 67 (conditional -> if_statement else_if_loop .)
    -               reduce using rule 67 (conditional -> if_statement else_if_loop .)
    *               reduce using rule 67 (conditional -> if_statement else_if_loop .)
    &               reduce using rule 67 (conditional -> if_statement else_if_loop .)
    [               reduce using rule 67 (conditional -> if_statement else_if_loop .)
    STRING          reduce using rule 67 (conditional -> if_statement else_if_loop .)
    FALSE           reduce using rule 67 (conditional -> if_statement else_if_loop .)
    TRUE            reduce using rule 67 (conditional -> if_statement else_if_loop .)
    FLOAT           reduce using rule 67 (conditional -> if_statement else_if_loop .)
    INT             reduce using rule 67 (conditional -> if_statement else_if_loop .)
    NULL            reduce using rule 67 (conditional -> if_statement else_if_loop .)
    $end            reduce using rule 67 (conditional -> if_statement else_if_loop .)
    }               reduce using rule 67 (conditional -> if_statement else_if_loop .)
    ELSE            shift and go to state 134

    else_statement                 shift and go to state 208
    else_if_statement              shift and go to state 209

state 134

    (73) else_statement -> ELSE . { program }
    (72) else_if_statement -> ELSE . IF ( expression ) { program }
    {               shift and go to state 210
    IF              shift and go to state 211


state 135

    (70) else_if_loop -> else_if_statement .
    ELSE            reduce using rule 70 (else_if_loop -> else_if_statement .)
    SANDBOX         reduce using rule 70 (else_if_loop -> else_if_statement .)
    LIMPORT         reduce using rule 70 (else_if_loop -> else_if_statement .)
    .               reduce using rule 70 (else_if_loop -> else_if_statement .)
    IMPORT          reduce using rule 70 (else_if_loop -> else_if_statement .)
    ID              reduce using rule 70 (else_if_loop -> else_if_statement .)
    RETURN          reduce using rule 70 (else_if_loop -> else_if_statement .)
    DEL             reduce using rule 70 (else_if_loop -> else_if_statement .)
    FOR             reduce using rule 70 (else_if_loop -> else_if_statement .)
    SKIP            reduce using rule 70 (else_if_loop -> else_if_statement .)
    BREAK           reduce using rule 70 (else_if_loop -> else_if_statement .)
    LET             reduce using rule 70 (else_if_loop -> else_if_statement .)
    WHILE           reduce using rule 70 (else_if_loop -> else_if_statement .)
    NAMESPACE       reduce using rule 70 (else_if_loop -> else_if_statement .)
    CLASS           reduce using rule 70 (else_if_loop -> else_if_statement .)
    FUNC            reduce using rule 70 (else_if_loop -> else_if_statement .)
    PYTHON_CODE_EXEC reduce using rule 70 (else_if_loop -> else_if_statement .)
    PYTHON_CODE     reduce using rule 70 (else_if_loop -> else_if_statement .)
    IF              reduce using rule 70 (else_if_loop -> else_if_statement .)
    {               reduce using rule 70 (else_if_loop -> else_if_statement .)
    <               reduce using rule 70 (else_if_loop -> else_if_statement .)
    #               reduce using rule 70 (else_if_loop -> else_if_statement .)
    (               reduce using rule 70 (else_if_loop -> else_if_statement .)
    !               reduce using rule 70 (else_if_loop -> else_if_statement .)
    +               reduce using rule 70 (else_if_loop -> else_if_statement .)
    -               reduce using rule 70 (else_if_loop -> else_if_statement .)
    *               reduce using rule 70 (else_if_loop -> else_if_statement .)
    &               reduce using rule 70 (else_if_loop -> else_if_statement .)
    [               reduce using rule 70 (else_if_loop -> else_if_statement .)
    STRING          reduce using rule 70 (else_if_loop -> else_if_statement .)
    FALSE           reduce using rule 70 (else_if_loop -> else_if_statement .)
    TRUE            reduce using rule 70 (else_if_loop -> else_if_statement .)
    FLOAT           reduce using rule 70 (else_if_loop -> else_if_statement .)
    INT             reduce using rule 70 (else_if_loop -> else_if_statement .)
    NULL            reduce using rule 70 (else_if_loop -> else_if_statement .)
    $end            reduce using rule 70 (else_if_loop -> else_if_statement .)
    }               reduce using rule 70 (else_if_loop -> else_if_statement .)


state 136

    (64) class_attribute_assignment -> class_attribute = . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    class_attribute                shift and go to state 82
    expression                     shift and go to state 212
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 137

    (21) function_call_statement -> function_call ; .
    SANDBOX         reduce using rule 21 (function_call_statement -> function_call ; .)
    LIMPORT         reduce using rule 21 (function_call_statement -> function_call ; .)
    .               reduce using rule 21 (function_call_statement -> function_call ; .)
    IMPORT          reduce using rule 21 (function_call_statement -> function_call ; .)
    ID              reduce using rule 21 (function_call_statement -> function_call ; .)
    RETURN          reduce using rule 21 (function_call_statement -> function_call ; .)
    DEL             reduce using rule 21 (function_call_statement -> function_call ; .)
    FOR             reduce using rule 21 (function_call_statement -> function_call ; .)
    SKIP            reduce using rule 21 (function_call_statement -> function_call ; .)
    BREAK           reduce using rule 21 (function_call_statement -> function_call ; .)
    LET             reduce using rule 21 (function_call_statement -> function_call ; .)
    WHILE           reduce using rule 21 (function_call_statement -> function_call ; .)
    NAMESPACE       reduce using rule 21 (function_call_statement -> function_call ; .)
    CLASS           reduce using rule 21 (function_call_statement -> function_call ; .)
    FUNC            reduce using rule 21 (function_call_statement -> function_call ; .)
    PYTHON_CODE_EXEC reduce using rule 21 (function_call_statement -> function_call ; .)
    PYTHON_CODE     reduce using rule 21 (function_call_statement -> function_call ; .)
    IF              reduce using rule 21 (function_call_statement -> function_call ; .)
    {               reduce using rule 21 (function_call_statement -> function_call ; .)
    <               reduce using rule 21 (function_call_statement -> function_call ; .)
    #               reduce using rule 21 (function_call_statement -> function_call ; .)
    (               reduce using rule 21 (function_call_statement -> function_call ; .)
    !               reduce using rule 21 (function_call_statement -> function_call ; .)
    +               reduce using rule 21 (function_call_statement -> function_call ; .)
    -               reduce using rule 21 (function_call_statement -> function_call ; .)
    *               reduce using rule 21 (function_call_statement -> function_call ; .)
    &               reduce using rule 21 (function_call_statement -> function_call ; .)
    [               reduce using rule 21 (function_call_statement -> function_call ; .)
    STRING          reduce using rule 21 (function_call_statement -> function_call ; .)
    FALSE           reduce using rule 21 (function_call_statement -> function_call ; .)
    TRUE            reduce using rule 21 (function_call_statement -> function_call ; .)
    FLOAT           reduce using rule 21 (function_call_statement -> function_call ; .)
    INT             reduce using rule 21 (function_call_statement -> function_call ; .)
    NULL            reduce using rule 21 (function_call_statement -> function_call ; .)
    $end            reduce using rule 21 (function_call_statement -> function_call ; .)
    }               reduce using rule 21 (function_call_statement -> function_call ; .)


state 138

    (43) class_declaration -> NAMESPACE ID . { program }
    {               shift and go to state 213


state 139

    (44) class_declaration -> CLASS ID . { program }
    {               shift and go to state 214


state 140

    (36) function_declaration -> FUNC ID . ( empty ) { program } TARROW expression
    (37) function_declaration -> FUNC ID . COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> FUNC ID . COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> FUNC ID . ( function_arguments ) { program } TARROW expression
    (               shift and go to state 215
    COLON_COLON     shift and go to state 216


state 141

    (116) _list -> [ positional_args . , ]
    (117) _list -> [ positional_args . ]
    (48) positional_args -> positional_args . , expression
    ,               shift and go to state 217
    ]               shift and go to state 218


state 142

    (47) positional_args -> expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ,               reduce using rule 47 (positional_args -> expression .)
    ]               reduce using rule 47 (positional_args -> expression .)
    )               reduce using rule 47 (positional_args -> expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 143

    (69) if_statement -> IF ( . expression ) { program }
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 219
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 144

    (28) function_call -> < ID . > expression
    >               shift and go to state 220


state 145

    (30) function_call -> # DEPENDS . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 221
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 146

    (31) function_call -> # DEFINE . expression ? ID
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 222
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 147

    (94) expression -> ! expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               reduce using rule 94 (expression -> ! expression .)
    [               reduce using rule 94 (expression -> ! expression .)
    (               reduce using rule 94 (expression -> ! expression .)
    >               reduce using rule 94 (expression -> ! expression .)
    <               reduce using rule 94 (expression -> ! expression .)
    &               reduce using rule 94 (expression -> ! expression .)
    |               reduce using rule 94 (expression -> ! expression .)
    EQ_GREATER      reduce using rule 94 (expression -> ! expression .)
    EQ_LESS         reduce using rule 94 (expression -> ! expression .)
    NOT_EQEQ        reduce using rule 94 (expression -> ! expression .)
    EQEQ            reduce using rule 94 (expression -> ! expression .)
    %               reduce using rule 94 (expression -> ! expression .)
    *               reduce using rule 94 (expression -> ! expression .)
    /               reduce using rule 94 (expression -> ! expression .)
    -               reduce using rule 94 (expression -> ! expression .)
    +               reduce using rule 94 (expression -> ! expression .)
    :               reduce using rule 94 (expression -> ! expression .)
    ,               reduce using rule 94 (expression -> ! expression .)
    }               reduce using rule 94 (expression -> ! expression .)
    ;               reduce using rule 94 (expression -> ! expression .)
    IN              reduce using rule 94 (expression -> ! expression .)
    )               reduce using rule 94 (expression -> ! expression .)
    ]               reduce using rule 94 (expression -> ! expression .)
    EQ_DIV          reduce using rule 94 (expression -> ! expression .)
    EQ_MOD          reduce using rule 94 (expression -> ! expression .)
    EQ_MUL          reduce using rule 94 (expression -> ! expression .)
    EQ_SUB          reduce using rule 94 (expression -> ! expression .)
    EQ_ADD          reduce using rule 94 (expression -> ! expression .)
    =               reduce using rule 94 (expression -> ! expression .)
    ?               reduce using rule 94 (expression -> ! expression .)
    {               reduce using rule 94 (expression -> ! expression .)
    SANDBOX         reduce using rule 94 (expression -> ! expression .)
    LIMPORT         reduce using rule 94 (expression -> ! expression .)
    .               reduce using rule 94 (expression -> ! expression .)
    IMPORT          reduce using rule 94 (expression -> ! expression .)
    ID              reduce using rule 94 (expression -> ! expression .)
    RETURN          reduce using rule 94 (expression -> ! expression .)
    DEL             reduce using rule 94 (expression -> ! expression .)
    FOR             reduce using rule 94 (expression -> ! expression .)
    SKIP            reduce using rule 94 (expression -> ! expression .)
    BREAK           reduce using rule 94 (expression -> ! expression .)
    LET             reduce using rule 94 (expression -> ! expression .)
    WHILE           reduce using rule 94 (expression -> ! expression .)
    NAMESPACE       reduce using rule 94 (expression -> ! expression .)
    CLASS           reduce using rule 94 (expression -> ! expression .)
    FUNC            reduce using rule 94 (expression -> ! expression .)
    PYTHON_CODE_EXEC reduce using rule 94 (expression -> ! expression .)
    PYTHON_CODE     reduce using rule 94 (expression -> ! expression .)
    IF              reduce using rule 94 (expression -> ! expression .)
    #               reduce using rule 94 (expression -> ! expression .)
    !               reduce using rule 94 (expression -> ! expression .)
    STRING          reduce using rule 94 (expression -> ! expression .)
    FALSE           reduce using rule 94 (expression -> ! expression .)
    TRUE            reduce using rule 94 (expression -> ! expression .)
    FLOAT           reduce using rule 94 (expression -> ! expression .)
    INT             reduce using rule 94 (expression -> ! expression .)
    NULL            reduce using rule 94 (expression -> ! expression .)
    $end            reduce using rule 94 (expression -> ! expression .)
    COLON_COLON     shift and go to state 89


state 148

    (109) expression -> & ID .
    ^               reduce using rule 109 (expression -> & ID .)
    [               reduce using rule 109 (expression -> & ID .)
    COLON_COLON     reduce using rule 109 (expression -> & ID .)
    (               reduce using rule 109 (expression -> & ID .)
    >               reduce using rule 109 (expression -> & ID .)
    <               reduce using rule 109 (expression -> & ID .)
    &               reduce using rule 109 (expression -> & ID .)
    |               reduce using rule 109 (expression -> & ID .)
    EQ_GREATER      reduce using rule 109 (expression -> & ID .)
    EQ_LESS         reduce using rule 109 (expression -> & ID .)
    NOT_EQEQ        reduce using rule 109 (expression -> & ID .)
    EQEQ            reduce using rule 109 (expression -> & ID .)
    %               reduce using rule 109 (expression -> & ID .)
    *               reduce using rule 109 (expression -> & ID .)
    /               reduce using rule 109 (expression -> & ID .)
    -               reduce using rule 109 (expression -> & ID .)
    +               reduce using rule 109 (expression -> & ID .)
    :               reduce using rule 109 (expression -> & ID .)
    ,               reduce using rule 109 (expression -> & ID .)
    }               reduce using rule 109 (expression -> & ID .)
    ;               reduce using rule 109 (expression -> & ID .)
    IN              reduce using rule 109 (expression -> & ID .)
    )               reduce using rule 109 (expression -> & ID .)
    ]               reduce using rule 109 (expression -> & ID .)
    EQ_DIV          reduce using rule 109 (expression -> & ID .)
    EQ_MOD          reduce using rule 109 (expression -> & ID .)
    EQ_MUL          reduce using rule 109 (expression -> & ID .)
    EQ_SUB          reduce using rule 109 (expression -> & ID .)
    EQ_ADD          reduce using rule 109 (expression -> & ID .)
    =               reduce using rule 109 (expression -> & ID .)
    ?               reduce using rule 109 (expression -> & ID .)
    {               reduce using rule 109 (expression -> & ID .)
    SANDBOX         reduce using rule 109 (expression -> & ID .)
    LIMPORT         reduce using rule 109 (expression -> & ID .)
    .               reduce using rule 109 (expression -> & ID .)
    IMPORT          reduce using rule 109 (expression -> & ID .)
    ID              reduce using rule 109 (expression -> & ID .)
    RETURN          reduce using rule 109 (expression -> & ID .)
    DEL             reduce using rule 109 (expression -> & ID .)
    FOR             reduce using rule 109 (expression -> & ID .)
    SKIP            reduce using rule 109 (expression -> & ID .)
    BREAK           reduce using rule 109 (expression -> & ID .)
    LET             reduce using rule 109 (expression -> & ID .)
    WHILE           reduce using rule 109 (expression -> & ID .)
    NAMESPACE       reduce using rule 109 (expression -> & ID .)
    CLASS           reduce using rule 109 (expression -> & ID .)
    FUNC            reduce using rule 109 (expression -> & ID .)
    PYTHON_CODE_EXEC reduce using rule 109 (expression -> & ID .)
    PYTHON_CODE     reduce using rule 109 (expression -> & ID .)
    IF              reduce using rule 109 (expression -> & ID .)
    #               reduce using rule 109 (expression -> & ID .)
    !               reduce using rule 109 (expression -> & ID .)
    STRING          reduce using rule 109 (expression -> & ID .)
    FALSE           reduce using rule 109 (expression -> & ID .)
    TRUE            reduce using rule 109 (expression -> & ID .)
    FLOAT           reduce using rule 109 (expression -> & ID .)
    INT             reduce using rule 109 (expression -> & ID .)
    NULL            reduce using rule 109 (expression -> & ID .)
    $end            reduce using rule 109 (expression -> & ID .)


state 149

    (108) expression -> * ID .
    ^               reduce using rule 108 (expression -> * ID .)
    [               reduce using rule 108 (expression -> * ID .)
    COLON_COLON     reduce using rule 108 (expression -> * ID .)
    (               reduce using rule 108 (expression -> * ID .)
    >               reduce using rule 108 (expression -> * ID .)
    <               reduce using rule 108 (expression -> * ID .)
    &               reduce using rule 108 (expression -> * ID .)
    |               reduce using rule 108 (expression -> * ID .)
    EQ_GREATER      reduce using rule 108 (expression -> * ID .)
    EQ_LESS         reduce using rule 108 (expression -> * ID .)
    NOT_EQEQ        reduce using rule 108 (expression -> * ID .)
    EQEQ            reduce using rule 108 (expression -> * ID .)
    %               reduce using rule 108 (expression -> * ID .)
    *               reduce using rule 108 (expression -> * ID .)
    /               reduce using rule 108 (expression -> * ID .)
    -               reduce using rule 108 (expression -> * ID .)
    +               reduce using rule 108 (expression -> * ID .)
    :               reduce using rule 108 (expression -> * ID .)
    ,               reduce using rule 108 (expression -> * ID .)
    }               reduce using rule 108 (expression -> * ID .)
    ;               reduce using rule 108 (expression -> * ID .)
    IN              reduce using rule 108 (expression -> * ID .)
    )               reduce using rule 108 (expression -> * ID .)
    ]               reduce using rule 108 (expression -> * ID .)
    EQ_DIV          reduce using rule 108 (expression -> * ID .)
    EQ_MOD          reduce using rule 108 (expression -> * ID .)
    EQ_MUL          reduce using rule 108 (expression -> * ID .)
    EQ_SUB          reduce using rule 108 (expression -> * ID .)
    EQ_ADD          reduce using rule 108 (expression -> * ID .)
    =               reduce using rule 108 (expression -> * ID .)
    ?               reduce using rule 108 (expression -> * ID .)
    {               reduce using rule 108 (expression -> * ID .)
    SANDBOX         reduce using rule 108 (expression -> * ID .)
    LIMPORT         reduce using rule 108 (expression -> * ID .)
    .               reduce using rule 108 (expression -> * ID .)
    IMPORT          reduce using rule 108 (expression -> * ID .)
    ID              reduce using rule 108 (expression -> * ID .)
    RETURN          reduce using rule 108 (expression -> * ID .)
    DEL             reduce using rule 108 (expression -> * ID .)
    FOR             reduce using rule 108 (expression -> * ID .)
    SKIP            reduce using rule 108 (expression -> * ID .)
    BREAK           reduce using rule 108 (expression -> * ID .)
    LET             reduce using rule 108 (expression -> * ID .)
    WHILE           reduce using rule 108 (expression -> * ID .)
    NAMESPACE       reduce using rule 108 (expression -> * ID .)
    CLASS           reduce using rule 108 (expression -> * ID .)
    FUNC            reduce using rule 108 (expression -> * ID .)
    PYTHON_CODE_EXEC reduce using rule 108 (expression -> * ID .)
    PYTHON_CODE     reduce using rule 108 (expression -> * ID .)
    IF              reduce using rule 108 (expression -> * ID .)
    #               reduce using rule 108 (expression -> * ID .)
    !               reduce using rule 108 (expression -> * ID .)
    STRING          reduce using rule 108 (expression -> * ID .)
    FALSE           reduce using rule 108 (expression -> * ID .)
    TRUE            reduce using rule 108 (expression -> * ID .)
    FLOAT           reduce using rule 108 (expression -> * ID .)
    INT             reduce using rule 108 (expression -> * ID .)
    NULL            reduce using rule 108 (expression -> * ID .)
    $end            reduce using rule 108 (expression -> * ID .)


state 150

    (107) expression -> - expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               reduce using rule 107 (expression -> - expression .)
    [               reduce using rule 107 (expression -> - expression .)
    (               reduce using rule 107 (expression -> - expression .)
    >               reduce using rule 107 (expression -> - expression .)
    <               reduce using rule 107 (expression -> - expression .)
    &               reduce using rule 107 (expression -> - expression .)
    |               reduce using rule 107 (expression -> - expression .)
    EQ_GREATER      reduce using rule 107 (expression -> - expression .)
    EQ_LESS         reduce using rule 107 (expression -> - expression .)
    NOT_EQEQ        reduce using rule 107 (expression -> - expression .)
    EQEQ            reduce using rule 107 (expression -> - expression .)
    %               reduce using rule 107 (expression -> - expression .)
    *               reduce using rule 107 (expression -> - expression .)
    /               reduce using rule 107 (expression -> - expression .)
    -               reduce using rule 107 (expression -> - expression .)
    +               reduce using rule 107 (expression -> - expression .)
    :               reduce using rule 107 (expression -> - expression .)
    ,               reduce using rule 107 (expression -> - expression .)
    }               reduce using rule 107 (expression -> - expression .)
    ;               reduce using rule 107 (expression -> - expression .)
    IN              reduce using rule 107 (expression -> - expression .)
    )               reduce using rule 107 (expression -> - expression .)
    ]               reduce using rule 107 (expression -> - expression .)
    EQ_DIV          reduce using rule 107 (expression -> - expression .)
    EQ_MOD          reduce using rule 107 (expression -> - expression .)
    EQ_MUL          reduce using rule 107 (expression -> - expression .)
    EQ_SUB          reduce using rule 107 (expression -> - expression .)
    EQ_ADD          reduce using rule 107 (expression -> - expression .)
    =               reduce using rule 107 (expression -> - expression .)
    ?               reduce using rule 107 (expression -> - expression .)
    {               reduce using rule 107 (expression -> - expression .)
    SANDBOX         reduce using rule 107 (expression -> - expression .)
    LIMPORT         reduce using rule 107 (expression -> - expression .)
    .               reduce using rule 107 (expression -> - expression .)
    IMPORT          reduce using rule 107 (expression -> - expression .)
    ID              reduce using rule 107 (expression -> - expression .)
    RETURN          reduce using rule 107 (expression -> - expression .)
    DEL             reduce using rule 107 (expression -> - expression .)
    FOR             reduce using rule 107 (expression -> - expression .)
    SKIP            reduce using rule 107 (expression -> - expression .)
    BREAK           reduce using rule 107 (expression -> - expression .)
    LET             reduce using rule 107 (expression -> - expression .)
    WHILE           reduce using rule 107 (expression -> - expression .)
    NAMESPACE       reduce using rule 107 (expression -> - expression .)
    CLASS           reduce using rule 107 (expression -> - expression .)
    FUNC            reduce using rule 107 (expression -> - expression .)
    PYTHON_CODE_EXEC reduce using rule 107 (expression -> - expression .)
    PYTHON_CODE     reduce using rule 107 (expression -> - expression .)
    IF              reduce using rule 107 (expression -> - expression .)
    #               reduce using rule 107 (expression -> - expression .)
    !               reduce using rule 107 (expression -> - expression .)
    STRING          reduce using rule 107 (expression -> - expression .)
    FALSE           reduce using rule 107 (expression -> - expression .)
    TRUE            reduce using rule 107 (expression -> - expression .)
    FLOAT           reduce using rule 107 (expression -> - expression .)
    INT             reduce using rule 107 (expression -> - expression .)
    NULL            reduce using rule 107 (expression -> - expression .)
    $end            reduce using rule 107 (expression -> - expression .)
    COLON_COLON     shift and go to state 89


state 151

    (106) expression -> + expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               reduce using rule 106 (expression -> + expression .)
    [               reduce using rule 106 (expression -> + expression .)
    (               reduce using rule 106 (expression -> + expression .)
    >               reduce using rule 106 (expression -> + expression .)
    <               reduce using rule 106 (expression -> + expression .)
    &               reduce using rule 106 (expression -> + expression .)
    |               reduce using rule 106 (expression -> + expression .)
    EQ_GREATER      reduce using rule 106 (expression -> + expression .)
    EQ_LESS         reduce using rule 106 (expression -> + expression .)
    NOT_EQEQ        reduce using rule 106 (expression -> + expression .)
    EQEQ            reduce using rule 106 (expression -> + expression .)
    %               reduce using rule 106 (expression -> + expression .)
    *               reduce using rule 106 (expression -> + expression .)
    /               reduce using rule 106 (expression -> + expression .)
    -               reduce using rule 106 (expression -> + expression .)
    +               reduce using rule 106 (expression -> + expression .)
    :               reduce using rule 106 (expression -> + expression .)
    ,               reduce using rule 106 (expression -> + expression .)
    }               reduce using rule 106 (expression -> + expression .)
    ;               reduce using rule 106 (expression -> + expression .)
    IN              reduce using rule 106 (expression -> + expression .)
    )               reduce using rule 106 (expression -> + expression .)
    ]               reduce using rule 106 (expression -> + expression .)
    EQ_DIV          reduce using rule 106 (expression -> + expression .)
    EQ_MOD          reduce using rule 106 (expression -> + expression .)
    EQ_MUL          reduce using rule 106 (expression -> + expression .)
    EQ_SUB          reduce using rule 106 (expression -> + expression .)
    EQ_ADD          reduce using rule 106 (expression -> + expression .)
    =               reduce using rule 106 (expression -> + expression .)
    ?               reduce using rule 106 (expression -> + expression .)
    {               reduce using rule 106 (expression -> + expression .)
    SANDBOX         reduce using rule 106 (expression -> + expression .)
    LIMPORT         reduce using rule 106 (expression -> + expression .)
    .               reduce using rule 106 (expression -> + expression .)
    IMPORT          reduce using rule 106 (expression -> + expression .)
    ID              reduce using rule 106 (expression -> + expression .)
    RETURN          reduce using rule 106 (expression -> + expression .)
    DEL             reduce using rule 106 (expression -> + expression .)
    FOR             reduce using rule 106 (expression -> + expression .)
    SKIP            reduce using rule 106 (expression -> + expression .)
    BREAK           reduce using rule 106 (expression -> + expression .)
    LET             reduce using rule 106 (expression -> + expression .)
    WHILE           reduce using rule 106 (expression -> + expression .)
    NAMESPACE       reduce using rule 106 (expression -> + expression .)
    CLASS           reduce using rule 106 (expression -> + expression .)
    FUNC            reduce using rule 106 (expression -> + expression .)
    PYTHON_CODE_EXEC reduce using rule 106 (expression -> + expression .)
    PYTHON_CODE     reduce using rule 106 (expression -> + expression .)
    IF              reduce using rule 106 (expression -> + expression .)
    #               reduce using rule 106 (expression -> + expression .)
    !               reduce using rule 106 (expression -> + expression .)
    STRING          reduce using rule 106 (expression -> + expression .)
    FALSE           reduce using rule 106 (expression -> + expression .)
    TRUE            reduce using rule 106 (expression -> + expression .)
    FLOAT           reduce using rule 106 (expression -> + expression .)
    INT             reduce using rule 106 (expression -> + expression .)
    NULL            reduce using rule 106 (expression -> + expression .)
    $end            reduce using rule 106 (expression -> + expression .)
    COLON_COLON     shift and go to state 89


state 152

    (19) sandbox -> SANDBOX { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               shift and go to state 223
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    SKIP            shift and go to state 30
    BREAK           shift and go to state 31
    LET             shift and go to state 32
    WHILE           shift and go to state 34
    NAMESPACE       shift and go to state 39
    CLASS           shift and go to state 40
    FUNC            shift and go to state 41
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44
    IF              shift and go to state 45
    {               shift and go to state 20
    <               shift and go to state 46
    #               shift and go to state 47
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68

    statement                      shift and go to state 69
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 153

    (110) expression -> ID . OF ID
    (131) id -> ID .
    (29) function_call -> ID . TARROW ID
    (55) variable_operation -> ID . EQ_DIV expression ;
    (57) variable_operation -> ID . EQ_MOD expression ;
    (59) variable_operation -> ID . EQ_MUL expression ;
    (61) variable_operation -> ID . EQ_SUB expression ;
    (63) variable_operation -> ID . EQ_ADD expression ;
    OF              shift and go to state 117
    :               reduce using rule 131 (id -> ID .)
    >               reduce using rule 131 (id -> ID .)
    <               reduce using rule 131 (id -> ID .)
    &               reduce using rule 131 (id -> ID .)
    |               reduce using rule 131 (id -> ID .)
    EQ_GREATER      reduce using rule 131 (id -> ID .)
    EQ_LESS         reduce using rule 131 (id -> ID .)
    NOT_EQEQ        reduce using rule 131 (id -> ID .)
    EQEQ            reduce using rule 131 (id -> ID .)
    %               reduce using rule 131 (id -> ID .)
    *               reduce using rule 131 (id -> ID .)
    /               reduce using rule 131 (id -> ID .)
    -               reduce using rule 131 (id -> ID .)
    +               reduce using rule 131 (id -> ID .)
    COLON_COLON     reduce using rule 131 (id -> ID .)
    ^               reduce using rule 131 (id -> ID .)
    [               reduce using rule 131 (id -> ID .)
    (               reduce using rule 131 (id -> ID .)
    ,               reduce using rule 131 (id -> ID .)
    }               reduce using rule 131 (id -> ID .)
    TARROW          shift and go to state 116
    EQ_DIV          shift and go to state 111
    EQ_MOD          shift and go to state 112
    EQ_MUL          shift and go to state 113
    EQ_SUB          shift and go to state 114
    EQ_ADD          shift and go to state 115


state 154

    (26) function_call -> { program } .
    ;               reduce using rule 26 (function_call -> { program } .)
    ^               reduce using rule 26 (function_call -> { program } .)
    [               reduce using rule 26 (function_call -> { program } .)
    COLON_COLON     reduce using rule 26 (function_call -> { program } .)
    (               reduce using rule 26 (function_call -> { program } .)
    >               reduce using rule 26 (function_call -> { program } .)
    <               reduce using rule 26 (function_call -> { program } .)
    &               reduce using rule 26 (function_call -> { program } .)
    |               reduce using rule 26 (function_call -> { program } .)
    EQ_GREATER      reduce using rule 26 (function_call -> { program } .)
    EQ_LESS         reduce using rule 26 (function_call -> { program } .)
    NOT_EQEQ        reduce using rule 26 (function_call -> { program } .)
    EQEQ            reduce using rule 26 (function_call -> { program } .)
    %               reduce using rule 26 (function_call -> { program } .)
    *               reduce using rule 26 (function_call -> { program } .)
    /               reduce using rule 26 (function_call -> { program } .)
    -               reduce using rule 26 (function_call -> { program } .)
    +               reduce using rule 26 (function_call -> { program } .)
    :               reduce using rule 26 (function_call -> { program } .)
    ,               reduce using rule 26 (function_call -> { program } .)
    }               reduce using rule 26 (function_call -> { program } .)
    IN              reduce using rule 26 (function_call -> { program } .)
    )               reduce using rule 26 (function_call -> { program } .)
    ]               reduce using rule 26 (function_call -> { program } .)
    EQ_DIV          reduce using rule 26 (function_call -> { program } .)
    EQ_MOD          reduce using rule 26 (function_call -> { program } .)
    EQ_MUL          reduce using rule 26 (function_call -> { program } .)
    EQ_SUB          reduce using rule 26 (function_call -> { program } .)
    EQ_ADD          reduce using rule 26 (function_call -> { program } .)
    =               reduce using rule 26 (function_call -> { program } .)
    ?               reduce using rule 26 (function_call -> { program } .)
    {               reduce using rule 26 (function_call -> { program } .)
    SANDBOX         reduce using rule 26 (function_call -> { program } .)
    LIMPORT         reduce using rule 26 (function_call -> { program } .)
    .               reduce using rule 26 (function_call -> { program } .)
    IMPORT          reduce using rule 26 (function_call -> { program } .)
    ID              reduce using rule 26 (function_call -> { program } .)
    RETURN          reduce using rule 26 (function_call -> { program } .)
    DEL             reduce using rule 26 (function_call -> { program } .)
    FOR             reduce using rule 26 (function_call -> { program } .)
    SKIP            reduce using rule 26 (function_call -> { program } .)
    BREAK           reduce using rule 26 (function_call -> { program } .)
    LET             reduce using rule 26 (function_call -> { program } .)
    WHILE           reduce using rule 26 (function_call -> { program } .)
    NAMESPACE       reduce using rule 26 (function_call -> { program } .)
    CLASS           reduce using rule 26 (function_call -> { program } .)
    FUNC            reduce using rule 26 (function_call -> { program } .)
    PYTHON_CODE_EXEC reduce using rule 26 (function_call -> { program } .)
    PYTHON_CODE     reduce using rule 26 (function_call -> { program } .)
    IF              reduce using rule 26 (function_call -> { program } .)
    #               reduce using rule 26 (function_call -> { program } .)
    !               reduce using rule 26 (function_call -> { program } .)
    STRING          reduce using rule 26 (function_call -> { program } .)
    FALSE           reduce using rule 26 (function_call -> { program } .)
    TRUE            reduce using rule 26 (function_call -> { program } .)
    FLOAT           reduce using rule 26 (function_call -> { program } .)
    INT             reduce using rule 26 (function_call -> { program } .)
    NULL            reduce using rule 26 (function_call -> { program } .)
    $end            reduce using rule 26 (function_call -> { program } .)


state 155

    (132) assoc_array -> { assoc_array_items } .
    ^               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    [               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    COLON_COLON     reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    (               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    >               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    <               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    &               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    |               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    EQ_GREATER      reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    EQ_LESS         reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    NOT_EQEQ        reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    EQEQ            reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    %               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    *               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    /               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    -               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    +               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    :               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    ,               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    }               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    ;               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    IN              reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    )               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    ]               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    EQ_DIV          reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    EQ_MOD          reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    EQ_MUL          reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    EQ_SUB          reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    EQ_ADD          reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    =               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    ?               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    {               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    SANDBOX         reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    LIMPORT         reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    .               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    IMPORT          reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    ID              reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    RETURN          reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    DEL             reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    FOR             reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    SKIP            reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    BREAK           reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    LET             reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    WHILE           reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    NAMESPACE       reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    CLASS           reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    FUNC            reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    PYTHON_CODE_EXEC reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    PYTHON_CODE     reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    IF              reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    #               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    !               reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    STRING          reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    FALSE           reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    TRUE            reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    FLOAT           reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    INT             reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    NULL            reduce using rule 132 (assoc_array -> { assoc_array_items } .)
    $end            reduce using rule 132 (assoc_array -> { assoc_array_items } .)


state 156

    (134) assoc_array_items -> assoc_array_items , . expression : expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 224
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 157

    (114) _tuple -> { positional_args , . }
    (48) positional_args -> positional_args , . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    }               shift and go to state 225
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 226
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 158

    (115) _tuple -> { positional_args } .
    ^               reduce using rule 115 (_tuple -> { positional_args } .)
    [               reduce using rule 115 (_tuple -> { positional_args } .)
    COLON_COLON     reduce using rule 115 (_tuple -> { positional_args } .)
    (               reduce using rule 115 (_tuple -> { positional_args } .)
    >               reduce using rule 115 (_tuple -> { positional_args } .)
    <               reduce using rule 115 (_tuple -> { positional_args } .)
    &               reduce using rule 115 (_tuple -> { positional_args } .)
    |               reduce using rule 115 (_tuple -> { positional_args } .)
    EQ_GREATER      reduce using rule 115 (_tuple -> { positional_args } .)
    EQ_LESS         reduce using rule 115 (_tuple -> { positional_args } .)
    NOT_EQEQ        reduce using rule 115 (_tuple -> { positional_args } .)
    EQEQ            reduce using rule 115 (_tuple -> { positional_args } .)
    %               reduce using rule 115 (_tuple -> { positional_args } .)
    *               reduce using rule 115 (_tuple -> { positional_args } .)
    /               reduce using rule 115 (_tuple -> { positional_args } .)
    -               reduce using rule 115 (_tuple -> { positional_args } .)
    +               reduce using rule 115 (_tuple -> { positional_args } .)
    :               reduce using rule 115 (_tuple -> { positional_args } .)
    ,               reduce using rule 115 (_tuple -> { positional_args } .)
    }               reduce using rule 115 (_tuple -> { positional_args } .)
    ;               reduce using rule 115 (_tuple -> { positional_args } .)
    IN              reduce using rule 115 (_tuple -> { positional_args } .)
    )               reduce using rule 115 (_tuple -> { positional_args } .)
    ]               reduce using rule 115 (_tuple -> { positional_args } .)
    EQ_DIV          reduce using rule 115 (_tuple -> { positional_args } .)
    EQ_MOD          reduce using rule 115 (_tuple -> { positional_args } .)
    EQ_MUL          reduce using rule 115 (_tuple -> { positional_args } .)
    EQ_SUB          reduce using rule 115 (_tuple -> { positional_args } .)
    EQ_ADD          reduce using rule 115 (_tuple -> { positional_args } .)
    =               reduce using rule 115 (_tuple -> { positional_args } .)
    ?               reduce using rule 115 (_tuple -> { positional_args } .)
    {               reduce using rule 115 (_tuple -> { positional_args } .)
    SANDBOX         reduce using rule 115 (_tuple -> { positional_args } .)
    LIMPORT         reduce using rule 115 (_tuple -> { positional_args } .)
    .               reduce using rule 115 (_tuple -> { positional_args } .)
    IMPORT          reduce using rule 115 (_tuple -> { positional_args } .)
    ID              reduce using rule 115 (_tuple -> { positional_args } .)
    RETURN          reduce using rule 115 (_tuple -> { positional_args } .)
    DEL             reduce using rule 115 (_tuple -> { positional_args } .)
    FOR             reduce using rule 115 (_tuple -> { positional_args } .)
    SKIP            reduce using rule 115 (_tuple -> { positional_args } .)
    BREAK           reduce using rule 115 (_tuple -> { positional_args } .)
    LET             reduce using rule 115 (_tuple -> { positional_args } .)
    WHILE           reduce using rule 115 (_tuple -> { positional_args } .)
    NAMESPACE       reduce using rule 115 (_tuple -> { positional_args } .)
    CLASS           reduce using rule 115 (_tuple -> { positional_args } .)
    FUNC            reduce using rule 115 (_tuple -> { positional_args } .)
    PYTHON_CODE_EXEC reduce using rule 115 (_tuple -> { positional_args } .)
    PYTHON_CODE     reduce using rule 115 (_tuple -> { positional_args } .)
    IF              reduce using rule 115 (_tuple -> { positional_args } .)
    #               reduce using rule 115 (_tuple -> { positional_args } .)
    !               reduce using rule 115 (_tuple -> { positional_args } .)
    STRING          reduce using rule 115 (_tuple -> { positional_args } .)
    FALSE           reduce using rule 115 (_tuple -> { positional_args } .)
    TRUE            reduce using rule 115 (_tuple -> { positional_args } .)
    FLOAT           reduce using rule 115 (_tuple -> { positional_args } .)
    INT             reduce using rule 115 (_tuple -> { positional_args } .)
    NULL            reduce using rule 115 (_tuple -> { positional_args } .)
    $end            reduce using rule 115 (_tuple -> { positional_args } .)


state 159

    (133) assoc_array_items -> expression : . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 227
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 160

    (20) sandbox -> LIMPORT expression ; .
    SANDBOX         reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    LIMPORT         reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    .               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    IMPORT          reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    ID              reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    RETURN          reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    DEL             reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    FOR             reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    SKIP            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    BREAK           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    LET             reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    WHILE           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    NAMESPACE       reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    CLASS           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    FUNC            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    PYTHON_CODE_EXEC reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    PYTHON_CODE     reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    IF              reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    {               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    <               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    #               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    (               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    !               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    +               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    -               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    *               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    &               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    [               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    STRING          reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    FALSE           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    TRUE            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    FLOAT           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    INT             reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    NULL            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    $end            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    }               reduce using rule 20 (sandbox -> LIMPORT expression ; .)


state 161

    (112) get_index -> expression ^ expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    EQ_DIV          reduce using rule 112 (get_index -> expression ^ expression .)
    EQ_MOD          reduce using rule 112 (get_index -> expression ^ expression .)
    EQ_MUL          reduce using rule 112 (get_index -> expression ^ expression .)
    EQ_SUB          reduce using rule 112 (get_index -> expression ^ expression .)
    EQ_ADD          reduce using rule 112 (get_index -> expression ^ expression .)
    :               reduce using rule 112 (get_index -> expression ^ expression .)
    ,               reduce using rule 112 (get_index -> expression ^ expression .)
    }               reduce using rule 112 (get_index -> expression ^ expression .)
    ;               reduce using rule 112 (get_index -> expression ^ expression .)
    IN              reduce using rule 112 (get_index -> expression ^ expression .)
    =               reduce using rule 112 (get_index -> expression ^ expression .)
    )               reduce using rule 112 (get_index -> expression ^ expression .)
    ]               reduce using rule 112 (get_index -> expression ^ expression .)
    ?               reduce using rule 112 (get_index -> expression ^ expression .)
    {               reduce using rule 112 (get_index -> expression ^ expression .)
    SANDBOX         reduce using rule 112 (get_index -> expression ^ expression .)
    LIMPORT         reduce using rule 112 (get_index -> expression ^ expression .)
    .               reduce using rule 112 (get_index -> expression ^ expression .)
    IMPORT          reduce using rule 112 (get_index -> expression ^ expression .)
    ID              reduce using rule 112 (get_index -> expression ^ expression .)
    RETURN          reduce using rule 112 (get_index -> expression ^ expression .)
    DEL             reduce using rule 112 (get_index -> expression ^ expression .)
    FOR             reduce using rule 112 (get_index -> expression ^ expression .)
    SKIP            reduce using rule 112 (get_index -> expression ^ expression .)
    BREAK           reduce using rule 112 (get_index -> expression ^ expression .)
    LET             reduce using rule 112 (get_index -> expression ^ expression .)
    WHILE           reduce using rule 112 (get_index -> expression ^ expression .)
    NAMESPACE       reduce using rule 112 (get_index -> expression ^ expression .)
    CLASS           reduce using rule 112 (get_index -> expression ^ expression .)
    FUNC            reduce using rule 112 (get_index -> expression ^ expression .)
    PYTHON_CODE_EXEC reduce using rule 112 (get_index -> expression ^ expression .)
    PYTHON_CODE     reduce using rule 112 (get_index -> expression ^ expression .)
    IF              reduce using rule 112 (get_index -> expression ^ expression .)
    #               reduce using rule 112 (get_index -> expression ^ expression .)
    !               reduce using rule 112 (get_index -> expression ^ expression .)
    STRING          reduce using rule 112 (get_index -> expression ^ expression .)
    FALSE           reduce using rule 112 (get_index -> expression ^ expression .)
    TRUE            reduce using rule 112 (get_index -> expression ^ expression .)
    FLOAT           reduce using rule 112 (get_index -> expression ^ expression .)
    INT             reduce using rule 112 (get_index -> expression ^ expression .)
    NULL            reduce using rule 112 (get_index -> expression ^ expression .)
    $end            reduce using rule 112 (get_index -> expression ^ expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 162

    (113) get_index -> expression [ expression . ]
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ]               shift and go to state 228
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 163

    (130) class_attribute -> expression COLON_COLON ID .
    =               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    ^               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    [               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    COLON_COLON     reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    (               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    >               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    <               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    &               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    |               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    EQ_GREATER      reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    EQ_LESS         reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    NOT_EQEQ        reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    EQEQ            reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    %               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    *               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    /               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    -               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    +               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    :               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    ,               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    }               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    ;               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    IN              reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    )               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    ]               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    EQ_DIV          reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    EQ_MOD          reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    EQ_MUL          reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    EQ_SUB          reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    EQ_ADD          reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    ?               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    {               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    SANDBOX         reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    LIMPORT         reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    .               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    IMPORT          reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    ID              reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    RETURN          reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    DEL             reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    FOR             reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    SKIP            reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    BREAK           reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    LET             reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    WHILE           reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    NAMESPACE       reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    CLASS           reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    FUNC            reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    PYTHON_CODE_EXEC reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    PYTHON_CODE     reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    IF              reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    #               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    !               reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    STRING          reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    FALSE           reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    TRUE            reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    FLOAT           reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    INT             reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    NULL            reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)
    $end            reduce using rule 130 (class_attribute -> expression COLON_COLON ID .)


state 164

    (27) function_call -> expression ( empty . ) FARROW { program }
    (32) function_call -> expression ( empty . )
    )               shift and go to state 229


state 165

    (33) function_call -> expression ( function_arguments . ) FARROW { program }
    (34) function_call -> expression ( function_arguments . )
    )               shift and go to state 230


state 166

    (40) function_arguments -> kwargs .
    (50) kwargs -> kwargs . , id = expression
    )               reduce using rule 40 (function_arguments -> kwargs .)
    ,               shift and go to state 231


state 167

    (41) function_arguments -> positional_args . , kwargs
    (42) function_arguments -> positional_args .
    (48) positional_args -> positional_args . , expression
    ,               shift and go to state 232
    )               reduce using rule 42 (function_arguments -> positional_args .)


state 168

    (49) kwargs -> ID . = expression
    (110) expression -> ID . OF ID
    (131) id -> ID .
    (29) function_call -> ID . TARROW ID
    =               shift and go to state 233
    OF              shift and go to state 117
    >               reduce using rule 131 (id -> ID .)
    <               reduce using rule 131 (id -> ID .)
    &               reduce using rule 131 (id -> ID .)
    |               reduce using rule 131 (id -> ID .)
    EQ_GREATER      reduce using rule 131 (id -> ID .)
    EQ_LESS         reduce using rule 131 (id -> ID .)
    NOT_EQEQ        reduce using rule 131 (id -> ID .)
    EQEQ            reduce using rule 131 (id -> ID .)
    %               reduce using rule 131 (id -> ID .)
    *               reduce using rule 131 (id -> ID .)
    /               reduce using rule 131 (id -> ID .)
    -               reduce using rule 131 (id -> ID .)
    +               reduce using rule 131 (id -> ID .)
    COLON_COLON     reduce using rule 131 (id -> ID .)
    ^               reduce using rule 131 (id -> ID .)
    [               reduce using rule 131 (id -> ID .)
    (               reduce using rule 131 (id -> ID .)
    ,               reduce using rule 131 (id -> ID .)
    )               reduce using rule 131 (id -> ID .)
    TARROW          shift and go to state 116


state 169

    (92) expression -> expression > expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               reduce using rule 92 (expression -> expression > expression .)
    [               reduce using rule 92 (expression -> expression > expression .)
    (               reduce using rule 92 (expression -> expression > expression .)
    >               reduce using rule 92 (expression -> expression > expression .)
    <               reduce using rule 92 (expression -> expression > expression .)
    &               reduce using rule 92 (expression -> expression > expression .)
    |               reduce using rule 92 (expression -> expression > expression .)
    EQ_GREATER      reduce using rule 92 (expression -> expression > expression .)
    EQ_LESS         reduce using rule 92 (expression -> expression > expression .)
    NOT_EQEQ        reduce using rule 92 (expression -> expression > expression .)
    EQEQ            reduce using rule 92 (expression -> expression > expression .)
    :               reduce using rule 92 (expression -> expression > expression .)
    ,               reduce using rule 92 (expression -> expression > expression .)
    }               reduce using rule 92 (expression -> expression > expression .)
    ;               reduce using rule 92 (expression -> expression > expression .)
    IN              reduce using rule 92 (expression -> expression > expression .)
    )               reduce using rule 92 (expression -> expression > expression .)
    ]               reduce using rule 92 (expression -> expression > expression .)
    EQ_DIV          reduce using rule 92 (expression -> expression > expression .)
    EQ_MOD          reduce using rule 92 (expression -> expression > expression .)
    EQ_MUL          reduce using rule 92 (expression -> expression > expression .)
    EQ_SUB          reduce using rule 92 (expression -> expression > expression .)
    EQ_ADD          reduce using rule 92 (expression -> expression > expression .)
    =               reduce using rule 92 (expression -> expression > expression .)
    ?               reduce using rule 92 (expression -> expression > expression .)
    {               reduce using rule 92 (expression -> expression > expression .)
    SANDBOX         reduce using rule 92 (expression -> expression > expression .)
    LIMPORT         reduce using rule 92 (expression -> expression > expression .)
    .               reduce using rule 92 (expression -> expression > expression .)
    IMPORT          reduce using rule 92 (expression -> expression > expression .)
    ID              reduce using rule 92 (expression -> expression > expression .)
    RETURN          reduce using rule 92 (expression -> expression > expression .)
    DEL             reduce using rule 92 (expression -> expression > expression .)
    FOR             reduce using rule 92 (expression -> expression > expression .)
    SKIP            reduce using rule 92 (expression -> expression > expression .)
    BREAK           reduce using rule 92 (expression -> expression > expression .)
    LET             reduce using rule 92 (expression -> expression > expression .)
    WHILE           reduce using rule 92 (expression -> expression > expression .)
    NAMESPACE       reduce using rule 92 (expression -> expression > expression .)
    CLASS           reduce using rule 92 (expression -> expression > expression .)
    FUNC            reduce using rule 92 (expression -> expression > expression .)
    PYTHON_CODE_EXEC reduce using rule 92 (expression -> expression > expression .)
    PYTHON_CODE     reduce using rule 92 (expression -> expression > expression .)
    IF              reduce using rule 92 (expression -> expression > expression .)
    #               reduce using rule 92 (expression -> expression > expression .)
    !               reduce using rule 92 (expression -> expression > expression .)
    STRING          reduce using rule 92 (expression -> expression > expression .)
    FALSE           reduce using rule 92 (expression -> expression > expression .)
    TRUE            reduce using rule 92 (expression -> expression > expression .)
    FLOAT           reduce using rule 92 (expression -> expression > expression .)
    INT             reduce using rule 92 (expression -> expression > expression .)
    NULL            reduce using rule 92 (expression -> expression > expression .)
    $end            reduce using rule 92 (expression -> expression > expression .)
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89


state 170

    (93) expression -> expression < expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               reduce using rule 93 (expression -> expression < expression .)
    [               reduce using rule 93 (expression -> expression < expression .)
    (               reduce using rule 93 (expression -> expression < expression .)
    >               reduce using rule 93 (expression -> expression < expression .)
    <               reduce using rule 93 (expression -> expression < expression .)
    &               reduce using rule 93 (expression -> expression < expression .)
    |               reduce using rule 93 (expression -> expression < expression .)
    EQ_GREATER      reduce using rule 93 (expression -> expression < expression .)
    EQ_LESS         reduce using rule 93 (expression -> expression < expression .)
    NOT_EQEQ        reduce using rule 93 (expression -> expression < expression .)
    EQEQ            reduce using rule 93 (expression -> expression < expression .)
    :               reduce using rule 93 (expression -> expression < expression .)
    ,               reduce using rule 93 (expression -> expression < expression .)
    }               reduce using rule 93 (expression -> expression < expression .)
    ;               reduce using rule 93 (expression -> expression < expression .)
    IN              reduce using rule 93 (expression -> expression < expression .)
    )               reduce using rule 93 (expression -> expression < expression .)
    ]               reduce using rule 93 (expression -> expression < expression .)
    EQ_DIV          reduce using rule 93 (expression -> expression < expression .)
    EQ_MOD          reduce using rule 93 (expression -> expression < expression .)
    EQ_MUL          reduce using rule 93 (expression -> expression < expression .)
    EQ_SUB          reduce using rule 93 (expression -> expression < expression .)
    EQ_ADD          reduce using rule 93 (expression -> expression < expression .)
    =               reduce using rule 93 (expression -> expression < expression .)
    ?               reduce using rule 93 (expression -> expression < expression .)
    {               reduce using rule 93 (expression -> expression < expression .)
    SANDBOX         reduce using rule 93 (expression -> expression < expression .)
    LIMPORT         reduce using rule 93 (expression -> expression < expression .)
    .               reduce using rule 93 (expression -> expression < expression .)
    IMPORT          reduce using rule 93 (expression -> expression < expression .)
    ID              reduce using rule 93 (expression -> expression < expression .)
    RETURN          reduce using rule 93 (expression -> expression < expression .)
    DEL             reduce using rule 93 (expression -> expression < expression .)
    FOR             reduce using rule 93 (expression -> expression < expression .)
    SKIP            reduce using rule 93 (expression -> expression < expression .)
    BREAK           reduce using rule 93 (expression -> expression < expression .)
    LET             reduce using rule 93 (expression -> expression < expression .)
    WHILE           reduce using rule 93 (expression -> expression < expression .)
    NAMESPACE       reduce using rule 93 (expression -> expression < expression .)
    CLASS           reduce using rule 93 (expression -> expression < expression .)
    FUNC            reduce using rule 93 (expression -> expression < expression .)
    PYTHON_CODE_EXEC reduce using rule 93 (expression -> expression < expression .)
    PYTHON_CODE     reduce using rule 93 (expression -> expression < expression .)
    IF              reduce using rule 93 (expression -> expression < expression .)
    #               reduce using rule 93 (expression -> expression < expression .)
    !               reduce using rule 93 (expression -> expression < expression .)
    STRING          reduce using rule 93 (expression -> expression < expression .)
    FALSE           reduce using rule 93 (expression -> expression < expression .)
    TRUE            reduce using rule 93 (expression -> expression < expression .)
    FLOAT           reduce using rule 93 (expression -> expression < expression .)
    INT             reduce using rule 93 (expression -> expression < expression .)
    NULL            reduce using rule 93 (expression -> expression < expression .)
    $end            reduce using rule 93 (expression -> expression < expression .)
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89


state 171

    (95) expression -> expression & expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               reduce using rule 95 (expression -> expression & expression .)
    [               reduce using rule 95 (expression -> expression & expression .)
    (               reduce using rule 95 (expression -> expression & expression .)
    &               reduce using rule 95 (expression -> expression & expression .)
    |               reduce using rule 95 (expression -> expression & expression .)
    :               reduce using rule 95 (expression -> expression & expression .)
    ,               reduce using rule 95 (expression -> expression & expression .)
    }               reduce using rule 95 (expression -> expression & expression .)
    ;               reduce using rule 95 (expression -> expression & expression .)
    IN              reduce using rule 95 (expression -> expression & expression .)
    )               reduce using rule 95 (expression -> expression & expression .)
    ]               reduce using rule 95 (expression -> expression & expression .)
    EQ_DIV          reduce using rule 95 (expression -> expression & expression .)
    EQ_MOD          reduce using rule 95 (expression -> expression & expression .)
    EQ_MUL          reduce using rule 95 (expression -> expression & expression .)
    EQ_SUB          reduce using rule 95 (expression -> expression & expression .)
    EQ_ADD          reduce using rule 95 (expression -> expression & expression .)
    =               reduce using rule 95 (expression -> expression & expression .)
    ?               reduce using rule 95 (expression -> expression & expression .)
    {               reduce using rule 95 (expression -> expression & expression .)
    SANDBOX         reduce using rule 95 (expression -> expression & expression .)
    LIMPORT         reduce using rule 95 (expression -> expression & expression .)
    .               reduce using rule 95 (expression -> expression & expression .)
    IMPORT          reduce using rule 95 (expression -> expression & expression .)
    ID              reduce using rule 95 (expression -> expression & expression .)
    RETURN          reduce using rule 95 (expression -> expression & expression .)
    DEL             reduce using rule 95 (expression -> expression & expression .)
    FOR             reduce using rule 95 (expression -> expression & expression .)
    SKIP            reduce using rule 95 (expression -> expression & expression .)
    BREAK           reduce using rule 95 (expression -> expression & expression .)
    LET             reduce using rule 95 (expression -> expression & expression .)
    WHILE           reduce using rule 95 (expression -> expression & expression .)
    NAMESPACE       reduce using rule 95 (expression -> expression & expression .)
    CLASS           reduce using rule 95 (expression -> expression & expression .)
    FUNC            reduce using rule 95 (expression -> expression & expression .)
    PYTHON_CODE_EXEC reduce using rule 95 (expression -> expression & expression .)
    PYTHON_CODE     reduce using rule 95 (expression -> expression & expression .)
    IF              reduce using rule 95 (expression -> expression & expression .)
    #               reduce using rule 95 (expression -> expression & expression .)
    !               reduce using rule 95 (expression -> expression & expression .)
    STRING          reduce using rule 95 (expression -> expression & expression .)
    FALSE           reduce using rule 95 (expression -> expression & expression .)
    TRUE            reduce using rule 95 (expression -> expression & expression .)
    FLOAT           reduce using rule 95 (expression -> expression & expression .)
    INT             reduce using rule 95 (expression -> expression & expression .)
    NULL            reduce using rule 95 (expression -> expression & expression .)
    $end            reduce using rule 95 (expression -> expression & expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89


state 172

    (96) expression -> expression | expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               reduce using rule 96 (expression -> expression | expression .)
    [               reduce using rule 96 (expression -> expression | expression .)
    (               reduce using rule 96 (expression -> expression | expression .)
    |               reduce using rule 96 (expression -> expression | expression .)
    :               reduce using rule 96 (expression -> expression | expression .)
    ,               reduce using rule 96 (expression -> expression | expression .)
    }               reduce using rule 96 (expression -> expression | expression .)
    ;               reduce using rule 96 (expression -> expression | expression .)
    IN              reduce using rule 96 (expression -> expression | expression .)
    )               reduce using rule 96 (expression -> expression | expression .)
    ]               reduce using rule 96 (expression -> expression | expression .)
    EQ_DIV          reduce using rule 96 (expression -> expression | expression .)
    EQ_MOD          reduce using rule 96 (expression -> expression | expression .)
    EQ_MUL          reduce using rule 96 (expression -> expression | expression .)
    EQ_SUB          reduce using rule 96 (expression -> expression | expression .)
    EQ_ADD          reduce using rule 96 (expression -> expression | expression .)
    =               reduce using rule 96 (expression -> expression | expression .)
    ?               reduce using rule 96 (expression -> expression | expression .)
    {               reduce using rule 96 (expression -> expression | expression .)
    SANDBOX         reduce using rule 96 (expression -> expression | expression .)
    LIMPORT         reduce using rule 96 (expression -> expression | expression .)
    .               reduce using rule 96 (expression -> expression | expression .)
    IMPORT          reduce using rule 96 (expression -> expression | expression .)
    ID              reduce using rule 96 (expression -> expression | expression .)
    RETURN          reduce using rule 96 (expression -> expression | expression .)
    DEL             reduce using rule 96 (expression -> expression | expression .)
    FOR             reduce using rule 96 (expression -> expression | expression .)
    SKIP            reduce using rule 96 (expression -> expression | expression .)
    BREAK           reduce using rule 96 (expression -> expression | expression .)
    LET             reduce using rule 96 (expression -> expression | expression .)
    WHILE           reduce using rule 96 (expression -> expression | expression .)
    NAMESPACE       reduce using rule 96 (expression -> expression | expression .)
    CLASS           reduce using rule 96 (expression -> expression | expression .)
    FUNC            reduce using rule 96 (expression -> expression | expression .)
    PYTHON_CODE_EXEC reduce using rule 96 (expression -> expression | expression .)
    PYTHON_CODE     reduce using rule 96 (expression -> expression | expression .)
    IF              reduce using rule 96 (expression -> expression | expression .)
    #               reduce using rule 96 (expression -> expression | expression .)
    !               reduce using rule 96 (expression -> expression | expression .)
    STRING          reduce using rule 96 (expression -> expression | expression .)
    FALSE           reduce using rule 96 (expression -> expression | expression .)
    TRUE            reduce using rule 96 (expression -> expression | expression .)
    FLOAT           reduce using rule 96 (expression -> expression | expression .)
    INT             reduce using rule 96 (expression -> expression | expression .)
    NULL            reduce using rule 96 (expression -> expression | expression .)
    $end            reduce using rule 96 (expression -> expression | expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89


state 173

    (97) expression -> expression EQ_GREATER expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    [               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    (               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    >               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    <               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    &               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    |               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    EQ_GREATER      reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    EQ_LESS         reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    NOT_EQEQ        reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    EQEQ            reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    :               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    ,               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    }               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    ;               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    IN              reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    )               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    ]               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    EQ_DIV          reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    EQ_MOD          reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    EQ_MUL          reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    EQ_SUB          reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    EQ_ADD          reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    =               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    ?               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    {               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    SANDBOX         reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    LIMPORT         reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    .               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    IMPORT          reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    ID              reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    RETURN          reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    DEL             reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    FOR             reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    SKIP            reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    BREAK           reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    LET             reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    WHILE           reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    NAMESPACE       reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    CLASS           reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    FUNC            reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    PYTHON_CODE_EXEC reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    PYTHON_CODE     reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    IF              reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    #               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    !               reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    STRING          reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    FALSE           reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    TRUE            reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    FLOAT           reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    INT             reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    NULL            reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    $end            reduce using rule 97 (expression -> expression EQ_GREATER expression .)
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89


state 174

    (98) expression -> expression EQ_LESS expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    [               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    (               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    >               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    <               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    &               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    |               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    EQ_GREATER      reduce using rule 98 (expression -> expression EQ_LESS expression .)
    EQ_LESS         reduce using rule 98 (expression -> expression EQ_LESS expression .)
    NOT_EQEQ        reduce using rule 98 (expression -> expression EQ_LESS expression .)
    EQEQ            reduce using rule 98 (expression -> expression EQ_LESS expression .)
    :               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    ,               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    }               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    ;               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    IN              reduce using rule 98 (expression -> expression EQ_LESS expression .)
    )               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    ]               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    EQ_DIV          reduce using rule 98 (expression -> expression EQ_LESS expression .)
    EQ_MOD          reduce using rule 98 (expression -> expression EQ_LESS expression .)
    EQ_MUL          reduce using rule 98 (expression -> expression EQ_LESS expression .)
    EQ_SUB          reduce using rule 98 (expression -> expression EQ_LESS expression .)
    EQ_ADD          reduce using rule 98 (expression -> expression EQ_LESS expression .)
    =               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    ?               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    {               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    SANDBOX         reduce using rule 98 (expression -> expression EQ_LESS expression .)
    LIMPORT         reduce using rule 98 (expression -> expression EQ_LESS expression .)
    .               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    IMPORT          reduce using rule 98 (expression -> expression EQ_LESS expression .)
    ID              reduce using rule 98 (expression -> expression EQ_LESS expression .)
    RETURN          reduce using rule 98 (expression -> expression EQ_LESS expression .)
    DEL             reduce using rule 98 (expression -> expression EQ_LESS expression .)
    FOR             reduce using rule 98 (expression -> expression EQ_LESS expression .)
    SKIP            reduce using rule 98 (expression -> expression EQ_LESS expression .)
    BREAK           reduce using rule 98 (expression -> expression EQ_LESS expression .)
    LET             reduce using rule 98 (expression -> expression EQ_LESS expression .)
    WHILE           reduce using rule 98 (expression -> expression EQ_LESS expression .)
    NAMESPACE       reduce using rule 98 (expression -> expression EQ_LESS expression .)
    CLASS           reduce using rule 98 (expression -> expression EQ_LESS expression .)
    FUNC            reduce using rule 98 (expression -> expression EQ_LESS expression .)
    PYTHON_CODE_EXEC reduce using rule 98 (expression -> expression EQ_LESS expression .)
    PYTHON_CODE     reduce using rule 98 (expression -> expression EQ_LESS expression .)
    IF              reduce using rule 98 (expression -> expression EQ_LESS expression .)
    #               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    !               reduce using rule 98 (expression -> expression EQ_LESS expression .)
    STRING          reduce using rule 98 (expression -> expression EQ_LESS expression .)
    FALSE           reduce using rule 98 (expression -> expression EQ_LESS expression .)
    TRUE            reduce using rule 98 (expression -> expression EQ_LESS expression .)
    FLOAT           reduce using rule 98 (expression -> expression EQ_LESS expression .)
    INT             reduce using rule 98 (expression -> expression EQ_LESS expression .)
    NULL            reduce using rule 98 (expression -> expression EQ_LESS expression .)
    $end            reduce using rule 98 (expression -> expression EQ_LESS expression .)
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89


state 175

    (99) expression -> expression NOT_EQEQ expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    [               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    (               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    &               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    |               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    NOT_EQEQ        reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    EQEQ            reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    :               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    ,               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    }               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    ;               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    IN              reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    )               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    ]               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    EQ_DIV          reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    EQ_MOD          reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    EQ_MUL          reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    EQ_SUB          reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    EQ_ADD          reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    =               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    ?               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    {               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    SANDBOX         reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    LIMPORT         reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    .               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    IMPORT          reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    ID              reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    RETURN          reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    DEL             reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    FOR             reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    SKIP            reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    BREAK           reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    LET             reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    WHILE           reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    NAMESPACE       reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    CLASS           reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    FUNC            reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    PYTHON_CODE_EXEC reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    PYTHON_CODE     reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    IF              reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    #               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    !               reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    STRING          reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    FALSE           reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    TRUE            reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    FLOAT           reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    INT             reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    NULL            reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    $end            reduce using rule 99 (expression -> expression NOT_EQEQ expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89


state 176

    (100) expression -> expression EQEQ expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               reduce using rule 100 (expression -> expression EQEQ expression .)
    [               reduce using rule 100 (expression -> expression EQEQ expression .)
    (               reduce using rule 100 (expression -> expression EQEQ expression .)
    &               reduce using rule 100 (expression -> expression EQEQ expression .)
    |               reduce using rule 100 (expression -> expression EQEQ expression .)
    NOT_EQEQ        reduce using rule 100 (expression -> expression EQEQ expression .)
    EQEQ            reduce using rule 100 (expression -> expression EQEQ expression .)
    :               reduce using rule 100 (expression -> expression EQEQ expression .)
    ,               reduce using rule 100 (expression -> expression EQEQ expression .)
    }               reduce using rule 100 (expression -> expression EQEQ expression .)
    ;               reduce using rule 100 (expression -> expression EQEQ expression .)
    IN              reduce using rule 100 (expression -> expression EQEQ expression .)
    )               reduce using rule 100 (expression -> expression EQEQ expression .)
    ]               reduce using rule 100 (expression -> expression EQEQ expression .)
    EQ_DIV          reduce using rule 100 (expression -> expression EQEQ expression .)
    EQ_MOD          reduce using rule 100 (expression -> expression EQEQ expression .)
    EQ_MUL          reduce using rule 100 (expression -> expression EQEQ expression .)
    EQ_SUB          reduce using rule 100 (expression -> expression EQEQ expression .)
    EQ_ADD          reduce using rule 100 (expression -> expression EQEQ expression .)
    =               reduce using rule 100 (expression -> expression EQEQ expression .)
    ?               reduce using rule 100 (expression -> expression EQEQ expression .)
    {               reduce using rule 100 (expression -> expression EQEQ expression .)
    SANDBOX         reduce using rule 100 (expression -> expression EQEQ expression .)
    LIMPORT         reduce using rule 100 (expression -> expression EQEQ expression .)
    .               reduce using rule 100 (expression -> expression EQEQ expression .)
    IMPORT          reduce using rule 100 (expression -> expression EQEQ expression .)
    ID              reduce using rule 100 (expression -> expression EQEQ expression .)
    RETURN          reduce using rule 100 (expression -> expression EQEQ expression .)
    DEL             reduce using rule 100 (expression -> expression EQEQ expression .)
    FOR             reduce using rule 100 (expression -> expression EQEQ expression .)
    SKIP            reduce using rule 100 (expression -> expression EQEQ expression .)
    BREAK           reduce using rule 100 (expression -> expression EQEQ expression .)
    LET             reduce using rule 100 (expression -> expression EQEQ expression .)
    WHILE           reduce using rule 100 (expression -> expression EQEQ expression .)
    NAMESPACE       reduce using rule 100 (expression -> expression EQEQ expression .)
    CLASS           reduce using rule 100 (expression -> expression EQEQ expression .)
    FUNC            reduce using rule 100 (expression -> expression EQEQ expression .)
    PYTHON_CODE_EXEC reduce using rule 100 (expression -> expression EQEQ expression .)
    PYTHON_CODE     reduce using rule 100 (expression -> expression EQEQ expression .)
    IF              reduce using rule 100 (expression -> expression EQEQ expression .)
    #               reduce using rule 100 (expression -> expression EQEQ expression .)
    !               reduce using rule 100 (expression -> expression EQEQ expression .)
    STRING          reduce using rule 100 (expression -> expression EQEQ expression .)
    FALSE           reduce using rule 100 (expression -> expression EQEQ expression .)
    TRUE            reduce using rule 100 (expression -> expression EQEQ expression .)
    FLOAT           reduce using rule 100 (expression -> expression EQEQ expression .)
    INT             reduce using rule 100 (expression -> expression EQEQ expression .)
    NULL            reduce using rule 100 (expression -> expression EQEQ expression .)
    $end            reduce using rule 100 (expression -> expression EQEQ expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89


state 177

    (101) expression -> expression % expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               reduce using rule 101 (expression -> expression % expression .)
    [               reduce using rule 101 (expression -> expression % expression .)
    (               reduce using rule 101 (expression -> expression % expression .)
    >               reduce using rule 101 (expression -> expression % expression .)
    <               reduce using rule 101 (expression -> expression % expression .)
    &               reduce using rule 101 (expression -> expression % expression .)
    |               reduce using rule 101 (expression -> expression % expression .)
    EQ_GREATER      reduce using rule 101 (expression -> expression % expression .)
    EQ_LESS         reduce using rule 101 (expression -> expression % expression .)
    NOT_EQEQ        reduce using rule 101 (expression -> expression % expression .)
    EQEQ            reduce using rule 101 (expression -> expression % expression .)
    %               reduce using rule 101 (expression -> expression % expression .)
    *               reduce using rule 101 (expression -> expression % expression .)
    /               reduce using rule 101 (expression -> expression % expression .)
    -               reduce using rule 101 (expression -> expression % expression .)
    +               reduce using rule 101 (expression -> expression % expression .)
    :               reduce using rule 101 (expression -> expression % expression .)
    ,               reduce using rule 101 (expression -> expression % expression .)
    }               reduce using rule 101 (expression -> expression % expression .)
    ;               reduce using rule 101 (expression -> expression % expression .)
    IN              reduce using rule 101 (expression -> expression % expression .)
    )               reduce using rule 101 (expression -> expression % expression .)
    ]               reduce using rule 101 (expression -> expression % expression .)
    EQ_DIV          reduce using rule 101 (expression -> expression % expression .)
    EQ_MOD          reduce using rule 101 (expression -> expression % expression .)
    EQ_MUL          reduce using rule 101 (expression -> expression % expression .)
    EQ_SUB          reduce using rule 101 (expression -> expression % expression .)
    EQ_ADD          reduce using rule 101 (expression -> expression % expression .)
    =               reduce using rule 101 (expression -> expression % expression .)
    ?               reduce using rule 101 (expression -> expression % expression .)
    {               reduce using rule 101 (expression -> expression % expression .)
    SANDBOX         reduce using rule 101 (expression -> expression % expression .)
    LIMPORT         reduce using rule 101 (expression -> expression % expression .)
    .               reduce using rule 101 (expression -> expression % expression .)
    IMPORT          reduce using rule 101 (expression -> expression % expression .)
    ID              reduce using rule 101 (expression -> expression % expression .)
    RETURN          reduce using rule 101 (expression -> expression % expression .)
    DEL             reduce using rule 101 (expression -> expression % expression .)
    FOR             reduce using rule 101 (expression -> expression % expression .)
    SKIP            reduce using rule 101 (expression -> expression % expression .)
    BREAK           reduce using rule 101 (expression -> expression % expression .)
    LET             reduce using rule 101 (expression -> expression % expression .)
    WHILE           reduce using rule 101 (expression -> expression % expression .)
    NAMESPACE       reduce using rule 101 (expression -> expression % expression .)
    CLASS           reduce using rule 101 (expression -> expression % expression .)
    FUNC            reduce using rule 101 (expression -> expression % expression .)
    PYTHON_CODE_EXEC reduce using rule 101 (expression -> expression % expression .)
    PYTHON_CODE     reduce using rule 101 (expression -> expression % expression .)
    IF              reduce using rule 101 (expression -> expression % expression .)
    #               reduce using rule 101 (expression -> expression % expression .)
    !               reduce using rule 101 (expression -> expression % expression .)
    STRING          reduce using rule 101 (expression -> expression % expression .)
    FALSE           reduce using rule 101 (expression -> expression % expression .)
    TRUE            reduce using rule 101 (expression -> expression % expression .)
    FLOAT           reduce using rule 101 (expression -> expression % expression .)
    INT             reduce using rule 101 (expression -> expression % expression .)
    NULL            reduce using rule 101 (expression -> expression % expression .)
    $end            reduce using rule 101 (expression -> expression % expression .)
    COLON_COLON     shift and go to state 89


state 178

    (102) expression -> expression * expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               reduce using rule 102 (expression -> expression * expression .)
    [               reduce using rule 102 (expression -> expression * expression .)
    (               reduce using rule 102 (expression -> expression * expression .)
    >               reduce using rule 102 (expression -> expression * expression .)
    <               reduce using rule 102 (expression -> expression * expression .)
    &               reduce using rule 102 (expression -> expression * expression .)
    |               reduce using rule 102 (expression -> expression * expression .)
    EQ_GREATER      reduce using rule 102 (expression -> expression * expression .)
    EQ_LESS         reduce using rule 102 (expression -> expression * expression .)
    NOT_EQEQ        reduce using rule 102 (expression -> expression * expression .)
    EQEQ            reduce using rule 102 (expression -> expression * expression .)
    %               reduce using rule 102 (expression -> expression * expression .)
    *               reduce using rule 102 (expression -> expression * expression .)
    /               reduce using rule 102 (expression -> expression * expression .)
    -               reduce using rule 102 (expression -> expression * expression .)
    +               reduce using rule 102 (expression -> expression * expression .)
    :               reduce using rule 102 (expression -> expression * expression .)
    ,               reduce using rule 102 (expression -> expression * expression .)
    }               reduce using rule 102 (expression -> expression * expression .)
    ;               reduce using rule 102 (expression -> expression * expression .)
    IN              reduce using rule 102 (expression -> expression * expression .)
    )               reduce using rule 102 (expression -> expression * expression .)
    ]               reduce using rule 102 (expression -> expression * expression .)
    EQ_DIV          reduce using rule 102 (expression -> expression * expression .)
    EQ_MOD          reduce using rule 102 (expression -> expression * expression .)
    EQ_MUL          reduce using rule 102 (expression -> expression * expression .)
    EQ_SUB          reduce using rule 102 (expression -> expression * expression .)
    EQ_ADD          reduce using rule 102 (expression -> expression * expression .)
    =               reduce using rule 102 (expression -> expression * expression .)
    ?               reduce using rule 102 (expression -> expression * expression .)
    {               reduce using rule 102 (expression -> expression * expression .)
    SANDBOX         reduce using rule 102 (expression -> expression * expression .)
    LIMPORT         reduce using rule 102 (expression -> expression * expression .)
    .               reduce using rule 102 (expression -> expression * expression .)
    IMPORT          reduce using rule 102 (expression -> expression * expression .)
    ID              reduce using rule 102 (expression -> expression * expression .)
    RETURN          reduce using rule 102 (expression -> expression * expression .)
    DEL             reduce using rule 102 (expression -> expression * expression .)
    FOR             reduce using rule 102 (expression -> expression * expression .)
    SKIP            reduce using rule 102 (expression -> expression * expression .)
    BREAK           reduce using rule 102 (expression -> expression * expression .)
    LET             reduce using rule 102 (expression -> expression * expression .)
    WHILE           reduce using rule 102 (expression -> expression * expression .)
    NAMESPACE       reduce using rule 102 (expression -> expression * expression .)
    CLASS           reduce using rule 102 (expression -> expression * expression .)
    FUNC            reduce using rule 102 (expression -> expression * expression .)
    PYTHON_CODE_EXEC reduce using rule 102 (expression -> expression * expression .)
    PYTHON_CODE     reduce using rule 102 (expression -> expression * expression .)
    IF              reduce using rule 102 (expression -> expression * expression .)
    #               reduce using rule 102 (expression -> expression * expression .)
    !               reduce using rule 102 (expression -> expression * expression .)
    STRING          reduce using rule 102 (expression -> expression * expression .)
    FALSE           reduce using rule 102 (expression -> expression * expression .)
    TRUE            reduce using rule 102 (expression -> expression * expression .)
    FLOAT           reduce using rule 102 (expression -> expression * expression .)
    INT             reduce using rule 102 (expression -> expression * expression .)
    NULL            reduce using rule 102 (expression -> expression * expression .)
    $end            reduce using rule 102 (expression -> expression * expression .)
    COLON_COLON     shift and go to state 89


state 179

    (103) expression -> expression / expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               reduce using rule 103 (expression -> expression / expression .)
    [               reduce using rule 103 (expression -> expression / expression .)
    (               reduce using rule 103 (expression -> expression / expression .)
    >               reduce using rule 103 (expression -> expression / expression .)
    <               reduce using rule 103 (expression -> expression / expression .)
    &               reduce using rule 103 (expression -> expression / expression .)
    |               reduce using rule 103 (expression -> expression / expression .)
    EQ_GREATER      reduce using rule 103 (expression -> expression / expression .)
    EQ_LESS         reduce using rule 103 (expression -> expression / expression .)
    NOT_EQEQ        reduce using rule 103 (expression -> expression / expression .)
    EQEQ            reduce using rule 103 (expression -> expression / expression .)
    %               reduce using rule 103 (expression -> expression / expression .)
    *               reduce using rule 103 (expression -> expression / expression .)
    /               reduce using rule 103 (expression -> expression / expression .)
    -               reduce using rule 103 (expression -> expression / expression .)
    +               reduce using rule 103 (expression -> expression / expression .)
    :               reduce using rule 103 (expression -> expression / expression .)
    ,               reduce using rule 103 (expression -> expression / expression .)
    }               reduce using rule 103 (expression -> expression / expression .)
    ;               reduce using rule 103 (expression -> expression / expression .)
    IN              reduce using rule 103 (expression -> expression / expression .)
    )               reduce using rule 103 (expression -> expression / expression .)
    ]               reduce using rule 103 (expression -> expression / expression .)
    EQ_DIV          reduce using rule 103 (expression -> expression / expression .)
    EQ_MOD          reduce using rule 103 (expression -> expression / expression .)
    EQ_MUL          reduce using rule 103 (expression -> expression / expression .)
    EQ_SUB          reduce using rule 103 (expression -> expression / expression .)
    EQ_ADD          reduce using rule 103 (expression -> expression / expression .)
    =               reduce using rule 103 (expression -> expression / expression .)
    ?               reduce using rule 103 (expression -> expression / expression .)
    {               reduce using rule 103 (expression -> expression / expression .)
    SANDBOX         reduce using rule 103 (expression -> expression / expression .)
    LIMPORT         reduce using rule 103 (expression -> expression / expression .)
    .               reduce using rule 103 (expression -> expression / expression .)
    IMPORT          reduce using rule 103 (expression -> expression / expression .)
    ID              reduce using rule 103 (expression -> expression / expression .)
    RETURN          reduce using rule 103 (expression -> expression / expression .)
    DEL             reduce using rule 103 (expression -> expression / expression .)
    FOR             reduce using rule 103 (expression -> expression / expression .)
    SKIP            reduce using rule 103 (expression -> expression / expression .)
    BREAK           reduce using rule 103 (expression -> expression / expression .)
    LET             reduce using rule 103 (expression -> expression / expression .)
    WHILE           reduce using rule 103 (expression -> expression / expression .)
    NAMESPACE       reduce using rule 103 (expression -> expression / expression .)
    CLASS           reduce using rule 103 (expression -> expression / expression .)
    FUNC            reduce using rule 103 (expression -> expression / expression .)
    PYTHON_CODE_EXEC reduce using rule 103 (expression -> expression / expression .)
    PYTHON_CODE     reduce using rule 103 (expression -> expression / expression .)
    IF              reduce using rule 103 (expression -> expression / expression .)
    #               reduce using rule 103 (expression -> expression / expression .)
    !               reduce using rule 103 (expression -> expression / expression .)
    STRING          reduce using rule 103 (expression -> expression / expression .)
    FALSE           reduce using rule 103 (expression -> expression / expression .)
    TRUE            reduce using rule 103 (expression -> expression / expression .)
    FLOAT           reduce using rule 103 (expression -> expression / expression .)
    INT             reduce using rule 103 (expression -> expression / expression .)
    NULL            reduce using rule 103 (expression -> expression / expression .)
    $end            reduce using rule 103 (expression -> expression / expression .)
    COLON_COLON     shift and go to state 89


state 180

    (104) expression -> expression - expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               reduce using rule 104 (expression -> expression - expression .)
    [               reduce using rule 104 (expression -> expression - expression .)
    (               reduce using rule 104 (expression -> expression - expression .)
    >               reduce using rule 104 (expression -> expression - expression .)
    <               reduce using rule 104 (expression -> expression - expression .)
    &               reduce using rule 104 (expression -> expression - expression .)
    |               reduce using rule 104 (expression -> expression - expression .)
    EQ_GREATER      reduce using rule 104 (expression -> expression - expression .)
    EQ_LESS         reduce using rule 104 (expression -> expression - expression .)
    NOT_EQEQ        reduce using rule 104 (expression -> expression - expression .)
    EQEQ            reduce using rule 104 (expression -> expression - expression .)
    -               reduce using rule 104 (expression -> expression - expression .)
    +               reduce using rule 104 (expression -> expression - expression .)
    :               reduce using rule 104 (expression -> expression - expression .)
    ,               reduce using rule 104 (expression -> expression - expression .)
    }               reduce using rule 104 (expression -> expression - expression .)
    ;               reduce using rule 104 (expression -> expression - expression .)
    IN              reduce using rule 104 (expression -> expression - expression .)
    )               reduce using rule 104 (expression -> expression - expression .)
    ]               reduce using rule 104 (expression -> expression - expression .)
    EQ_DIV          reduce using rule 104 (expression -> expression - expression .)
    EQ_MOD          reduce using rule 104 (expression -> expression - expression .)
    EQ_MUL          reduce using rule 104 (expression -> expression - expression .)
    EQ_SUB          reduce using rule 104 (expression -> expression - expression .)
    EQ_ADD          reduce using rule 104 (expression -> expression - expression .)
    =               reduce using rule 104 (expression -> expression - expression .)
    ?               reduce using rule 104 (expression -> expression - expression .)
    {               reduce using rule 104 (expression -> expression - expression .)
    SANDBOX         reduce using rule 104 (expression -> expression - expression .)
    LIMPORT         reduce using rule 104 (expression -> expression - expression .)
    .               reduce using rule 104 (expression -> expression - expression .)
    IMPORT          reduce using rule 104 (expression -> expression - expression .)
    ID              reduce using rule 104 (expression -> expression - expression .)
    RETURN          reduce using rule 104 (expression -> expression - expression .)
    DEL             reduce using rule 104 (expression -> expression - expression .)
    FOR             reduce using rule 104 (expression -> expression - expression .)
    SKIP            reduce using rule 104 (expression -> expression - expression .)
    BREAK           reduce using rule 104 (expression -> expression - expression .)
    LET             reduce using rule 104 (expression -> expression - expression .)
    WHILE           reduce using rule 104 (expression -> expression - expression .)
    NAMESPACE       reduce using rule 104 (expression -> expression - expression .)
    CLASS           reduce using rule 104 (expression -> expression - expression .)
    FUNC            reduce using rule 104 (expression -> expression - expression .)
    PYTHON_CODE_EXEC reduce using rule 104 (expression -> expression - expression .)
    PYTHON_CODE     reduce using rule 104 (expression -> expression - expression .)
    IF              reduce using rule 104 (expression -> expression - expression .)
    #               reduce using rule 104 (expression -> expression - expression .)
    !               reduce using rule 104 (expression -> expression - expression .)
    STRING          reduce using rule 104 (expression -> expression - expression .)
    FALSE           reduce using rule 104 (expression -> expression - expression .)
    TRUE            reduce using rule 104 (expression -> expression - expression .)
    FLOAT           reduce using rule 104 (expression -> expression - expression .)
    INT             reduce using rule 104 (expression -> expression - expression .)
    NULL            reduce using rule 104 (expression -> expression - expression .)
    $end            reduce using rule 104 (expression -> expression - expression .)
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    COLON_COLON     shift and go to state 89


state 181

    (105) expression -> expression + expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ^               reduce using rule 105 (expression -> expression + expression .)
    [               reduce using rule 105 (expression -> expression + expression .)
    (               reduce using rule 105 (expression -> expression + expression .)
    >               reduce using rule 105 (expression -> expression + expression .)
    <               reduce using rule 105 (expression -> expression + expression .)
    &               reduce using rule 105 (expression -> expression + expression .)
    |               reduce using rule 105 (expression -> expression + expression .)
    EQ_GREATER      reduce using rule 105 (expression -> expression + expression .)
    EQ_LESS         reduce using rule 105 (expression -> expression + expression .)
    NOT_EQEQ        reduce using rule 105 (expression -> expression + expression .)
    EQEQ            reduce using rule 105 (expression -> expression + expression .)
    -               reduce using rule 105 (expression -> expression + expression .)
    +               reduce using rule 105 (expression -> expression + expression .)
    :               reduce using rule 105 (expression -> expression + expression .)
    ,               reduce using rule 105 (expression -> expression + expression .)
    }               reduce using rule 105 (expression -> expression + expression .)
    ;               reduce using rule 105 (expression -> expression + expression .)
    IN              reduce using rule 105 (expression -> expression + expression .)
    )               reduce using rule 105 (expression -> expression + expression .)
    ]               reduce using rule 105 (expression -> expression + expression .)
    EQ_DIV          reduce using rule 105 (expression -> expression + expression .)
    EQ_MOD          reduce using rule 105 (expression -> expression + expression .)
    EQ_MUL          reduce using rule 105 (expression -> expression + expression .)
    EQ_SUB          reduce using rule 105 (expression -> expression + expression .)
    EQ_ADD          reduce using rule 105 (expression -> expression + expression .)
    =               reduce using rule 105 (expression -> expression + expression .)
    ?               reduce using rule 105 (expression -> expression + expression .)
    {               reduce using rule 105 (expression -> expression + expression .)
    SANDBOX         reduce using rule 105 (expression -> expression + expression .)
    LIMPORT         reduce using rule 105 (expression -> expression + expression .)
    .               reduce using rule 105 (expression -> expression + expression .)
    IMPORT          reduce using rule 105 (expression -> expression + expression .)
    ID              reduce using rule 105 (expression -> expression + expression .)
    RETURN          reduce using rule 105 (expression -> expression + expression .)
    DEL             reduce using rule 105 (expression -> expression + expression .)
    FOR             reduce using rule 105 (expression -> expression + expression .)
    SKIP            reduce using rule 105 (expression -> expression + expression .)
    BREAK           reduce using rule 105 (expression -> expression + expression .)
    LET             reduce using rule 105 (expression -> expression + expression .)
    WHILE           reduce using rule 105 (expression -> expression + expression .)
    NAMESPACE       reduce using rule 105 (expression -> expression + expression .)
    CLASS           reduce using rule 105 (expression -> expression + expression .)
    FUNC            reduce using rule 105 (expression -> expression + expression .)
    PYTHON_CODE_EXEC reduce using rule 105 (expression -> expression + expression .)
    PYTHON_CODE     reduce using rule 105 (expression -> expression + expression .)
    IF              reduce using rule 105 (expression -> expression + expression .)
    #               reduce using rule 105 (expression -> expression + expression .)
    !               reduce using rule 105 (expression -> expression + expression .)
    STRING          reduce using rule 105 (expression -> expression + expression .)
    FALSE           reduce using rule 105 (expression -> expression + expression .)
    TRUE            reduce using rule 105 (expression -> expression + expression .)
    FLOAT           reduce using rule 105 (expression -> expression + expression .)
    INT             reduce using rule 105 (expression -> expression + expression .)
    NULL            reduce using rule 105 (expression -> expression + expression .)
    $end            reduce using rule 105 (expression -> expression + expression .)
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    COLON_COLON     shift and go to state 89


state 182

    (75) import_statement -> . GLOBAL ; .
    SANDBOX         reduce using rule 75 (import_statement -> . GLOBAL ; .)
    LIMPORT         reduce using rule 75 (import_statement -> . GLOBAL ; .)
    .               reduce using rule 75 (import_statement -> . GLOBAL ; .)
    IMPORT          reduce using rule 75 (import_statement -> . GLOBAL ; .)
    ID              reduce using rule 75 (import_statement -> . GLOBAL ; .)
    RETURN          reduce using rule 75 (import_statement -> . GLOBAL ; .)
    DEL             reduce using rule 75 (import_statement -> . GLOBAL ; .)
    FOR             reduce using rule 75 (import_statement -> . GLOBAL ; .)
    SKIP            reduce using rule 75 (import_statement -> . GLOBAL ; .)
    BREAK           reduce using rule 75 (import_statement -> . GLOBAL ; .)
    LET             reduce using rule 75 (import_statement -> . GLOBAL ; .)
    WHILE           reduce using rule 75 (import_statement -> . GLOBAL ; .)
    NAMESPACE       reduce using rule 75 (import_statement -> . GLOBAL ; .)
    CLASS           reduce using rule 75 (import_statement -> . GLOBAL ; .)
    FUNC            reduce using rule 75 (import_statement -> . GLOBAL ; .)
    PYTHON_CODE_EXEC reduce using rule 75 (import_statement -> . GLOBAL ; .)
    PYTHON_CODE     reduce using rule 75 (import_statement -> . GLOBAL ; .)
    IF              reduce using rule 75 (import_statement -> . GLOBAL ; .)
    {               reduce using rule 75 (import_statement -> . GLOBAL ; .)
    <               reduce using rule 75 (import_statement -> . GLOBAL ; .)
    #               reduce using rule 75 (import_statement -> . GLOBAL ; .)
    (               reduce using rule 75 (import_statement -> . GLOBAL ; .)
    !               reduce using rule 75 (import_statement -> . GLOBAL ; .)
    +               reduce using rule 75 (import_statement -> . GLOBAL ; .)
    -               reduce using rule 75 (import_statement -> . GLOBAL ; .)
    *               reduce using rule 75 (import_statement -> . GLOBAL ; .)
    &               reduce using rule 75 (import_statement -> . GLOBAL ; .)
    [               reduce using rule 75 (import_statement -> . GLOBAL ; .)
    STRING          reduce using rule 75 (import_statement -> . GLOBAL ; .)
    FALSE           reduce using rule 75 (import_statement -> . GLOBAL ; .)
    TRUE            reduce using rule 75 (import_statement -> . GLOBAL ; .)
    FLOAT           reduce using rule 75 (import_statement -> . GLOBAL ; .)
    INT             reduce using rule 75 (import_statement -> . GLOBAL ; .)
    NULL            reduce using rule 75 (import_statement -> . GLOBAL ; .)
    $end            reduce using rule 75 (import_statement -> . GLOBAL ; .)
    }               reduce using rule 75 (import_statement -> . GLOBAL ; .)


state 183

    (76) import_statement -> IMPORT expression ; .
    SANDBOX         reduce using rule 76 (import_statement -> IMPORT expression ; .)
    LIMPORT         reduce using rule 76 (import_statement -> IMPORT expression ; .)
    .               reduce using rule 76 (import_statement -> IMPORT expression ; .)
    IMPORT          reduce using rule 76 (import_statement -> IMPORT expression ; .)
    ID              reduce using rule 76 (import_statement -> IMPORT expression ; .)
    RETURN          reduce using rule 76 (import_statement -> IMPORT expression ; .)
    DEL             reduce using rule 76 (import_statement -> IMPORT expression ; .)
    FOR             reduce using rule 76 (import_statement -> IMPORT expression ; .)
    SKIP            reduce using rule 76 (import_statement -> IMPORT expression ; .)
    BREAK           reduce using rule 76 (import_statement -> IMPORT expression ; .)
    LET             reduce using rule 76 (import_statement -> IMPORT expression ; .)
    WHILE           reduce using rule 76 (import_statement -> IMPORT expression ; .)
    NAMESPACE       reduce using rule 76 (import_statement -> IMPORT expression ; .)
    CLASS           reduce using rule 76 (import_statement -> IMPORT expression ; .)
    FUNC            reduce using rule 76 (import_statement -> IMPORT expression ; .)
    PYTHON_CODE_EXEC reduce using rule 76 (import_statement -> IMPORT expression ; .)
    PYTHON_CODE     reduce using rule 76 (import_statement -> IMPORT expression ; .)
    IF              reduce using rule 76 (import_statement -> IMPORT expression ; .)
    {               reduce using rule 76 (import_statement -> IMPORT expression ; .)
    <               reduce using rule 76 (import_statement -> IMPORT expression ; .)
    #               reduce using rule 76 (import_statement -> IMPORT expression ; .)
    (               reduce using rule 76 (import_statement -> IMPORT expression ; .)
    !               reduce using rule 76 (import_statement -> IMPORT expression ; .)
    +               reduce using rule 76 (import_statement -> IMPORT expression ; .)
    -               reduce using rule 76 (import_statement -> IMPORT expression ; .)
    *               reduce using rule 76 (import_statement -> IMPORT expression ; .)
    &               reduce using rule 76 (import_statement -> IMPORT expression ; .)
    [               reduce using rule 76 (import_statement -> IMPORT expression ; .)
    STRING          reduce using rule 76 (import_statement -> IMPORT expression ; .)
    FALSE           reduce using rule 76 (import_statement -> IMPORT expression ; .)
    TRUE            reduce using rule 76 (import_statement -> IMPORT expression ; .)
    FLOAT           reduce using rule 76 (import_statement -> IMPORT expression ; .)
    INT             reduce using rule 76 (import_statement -> IMPORT expression ; .)
    NULL            reduce using rule 76 (import_statement -> IMPORT expression ; .)
    $end            reduce using rule 76 (import_statement -> IMPORT expression ; .)
    }               reduce using rule 76 (import_statement -> IMPORT expression ; .)


state 184

    (54) variable_operation -> get_index EQ_DIV expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 234
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 185

    (56) variable_operation -> get_index EQ_MOD expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 235
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 186

    (58) variable_operation -> get_index EQ_MUL expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 236
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 187

    (60) variable_operation -> get_index EQ_SUB expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 237
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 188

    (62) variable_operation -> get_index EQ_ADD expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 238
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 189

    (55) variable_operation -> ID EQ_DIV expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 239
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 190

    (57) variable_operation -> ID EQ_MOD expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 240
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 191

    (59) variable_operation -> ID EQ_MUL expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 241
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 192

    (61) variable_operation -> ID EQ_SUB expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 242
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 193

    (63) variable_operation -> ID EQ_ADD expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 243
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 194

    (29) function_call -> ID TARROW ID .
    ;               reduce using rule 29 (function_call -> ID TARROW ID .)
    ^               reduce using rule 29 (function_call -> ID TARROW ID .)
    [               reduce using rule 29 (function_call -> ID TARROW ID .)
    COLON_COLON     reduce using rule 29 (function_call -> ID TARROW ID .)
    (               reduce using rule 29 (function_call -> ID TARROW ID .)
    >               reduce using rule 29 (function_call -> ID TARROW ID .)
    <               reduce using rule 29 (function_call -> ID TARROW ID .)
    &               reduce using rule 29 (function_call -> ID TARROW ID .)
    |               reduce using rule 29 (function_call -> ID TARROW ID .)
    EQ_GREATER      reduce using rule 29 (function_call -> ID TARROW ID .)
    EQ_LESS         reduce using rule 29 (function_call -> ID TARROW ID .)
    NOT_EQEQ        reduce using rule 29 (function_call -> ID TARROW ID .)
    EQEQ            reduce using rule 29 (function_call -> ID TARROW ID .)
    %               reduce using rule 29 (function_call -> ID TARROW ID .)
    *               reduce using rule 29 (function_call -> ID TARROW ID .)
    /               reduce using rule 29 (function_call -> ID TARROW ID .)
    -               reduce using rule 29 (function_call -> ID TARROW ID .)
    +               reduce using rule 29 (function_call -> ID TARROW ID .)
    :               reduce using rule 29 (function_call -> ID TARROW ID .)
    ,               reduce using rule 29 (function_call -> ID TARROW ID .)
    }               reduce using rule 29 (function_call -> ID TARROW ID .)
    IN              reduce using rule 29 (function_call -> ID TARROW ID .)
    )               reduce using rule 29 (function_call -> ID TARROW ID .)
    ]               reduce using rule 29 (function_call -> ID TARROW ID .)
    EQ_DIV          reduce using rule 29 (function_call -> ID TARROW ID .)
    EQ_MOD          reduce using rule 29 (function_call -> ID TARROW ID .)
    EQ_MUL          reduce using rule 29 (function_call -> ID TARROW ID .)
    EQ_SUB          reduce using rule 29 (function_call -> ID TARROW ID .)
    EQ_ADD          reduce using rule 29 (function_call -> ID TARROW ID .)
    =               reduce using rule 29 (function_call -> ID TARROW ID .)
    ?               reduce using rule 29 (function_call -> ID TARROW ID .)
    {               reduce using rule 29 (function_call -> ID TARROW ID .)
    SANDBOX         reduce using rule 29 (function_call -> ID TARROW ID .)
    LIMPORT         reduce using rule 29 (function_call -> ID TARROW ID .)
    .               reduce using rule 29 (function_call -> ID TARROW ID .)
    IMPORT          reduce using rule 29 (function_call -> ID TARROW ID .)
    ID              reduce using rule 29 (function_call -> ID TARROW ID .)
    RETURN          reduce using rule 29 (function_call -> ID TARROW ID .)
    DEL             reduce using rule 29 (function_call -> ID TARROW ID .)
    FOR             reduce using rule 29 (function_call -> ID TARROW ID .)
    SKIP            reduce using rule 29 (function_call -> ID TARROW ID .)
    BREAK           reduce using rule 29 (function_call -> ID TARROW ID .)
    LET             reduce using rule 29 (function_call -> ID TARROW ID .)
    WHILE           reduce using rule 29 (function_call -> ID TARROW ID .)
    NAMESPACE       reduce using rule 29 (function_call -> ID TARROW ID .)
    CLASS           reduce using rule 29 (function_call -> ID TARROW ID .)
    FUNC            reduce using rule 29 (function_call -> ID TARROW ID .)
    PYTHON_CODE_EXEC reduce using rule 29 (function_call -> ID TARROW ID .)
    PYTHON_CODE     reduce using rule 29 (function_call -> ID TARROW ID .)
    IF              reduce using rule 29 (function_call -> ID TARROW ID .)
    #               reduce using rule 29 (function_call -> ID TARROW ID .)
    !               reduce using rule 29 (function_call -> ID TARROW ID .)
    STRING          reduce using rule 29 (function_call -> ID TARROW ID .)
    FALSE           reduce using rule 29 (function_call -> ID TARROW ID .)
    TRUE            reduce using rule 29 (function_call -> ID TARROW ID .)
    FLOAT           reduce using rule 29 (function_call -> ID TARROW ID .)
    INT             reduce using rule 29 (function_call -> ID TARROW ID .)
    NULL            reduce using rule 29 (function_call -> ID TARROW ID .)
    $end            reduce using rule 29 (function_call -> ID TARROW ID .)


state 195

    (110) expression -> ID OF ID .
    ^               reduce using rule 110 (expression -> ID OF ID .)
    [               reduce using rule 110 (expression -> ID OF ID .)
    COLON_COLON     reduce using rule 110 (expression -> ID OF ID .)
    (               reduce using rule 110 (expression -> ID OF ID .)
    >               reduce using rule 110 (expression -> ID OF ID .)
    <               reduce using rule 110 (expression -> ID OF ID .)
    &               reduce using rule 110 (expression -> ID OF ID .)
    |               reduce using rule 110 (expression -> ID OF ID .)
    EQ_GREATER      reduce using rule 110 (expression -> ID OF ID .)
    EQ_LESS         reduce using rule 110 (expression -> ID OF ID .)
    NOT_EQEQ        reduce using rule 110 (expression -> ID OF ID .)
    EQEQ            reduce using rule 110 (expression -> ID OF ID .)
    %               reduce using rule 110 (expression -> ID OF ID .)
    *               reduce using rule 110 (expression -> ID OF ID .)
    /               reduce using rule 110 (expression -> ID OF ID .)
    -               reduce using rule 110 (expression -> ID OF ID .)
    +               reduce using rule 110 (expression -> ID OF ID .)
    :               reduce using rule 110 (expression -> ID OF ID .)
    ,               reduce using rule 110 (expression -> ID OF ID .)
    }               reduce using rule 110 (expression -> ID OF ID .)
    ;               reduce using rule 110 (expression -> ID OF ID .)
    IN              reduce using rule 110 (expression -> ID OF ID .)
    )               reduce using rule 110 (expression -> ID OF ID .)
    ]               reduce using rule 110 (expression -> ID OF ID .)
    EQ_DIV          reduce using rule 110 (expression -> ID OF ID .)
    EQ_MOD          reduce using rule 110 (expression -> ID OF ID .)
    EQ_MUL          reduce using rule 110 (expression -> ID OF ID .)
    EQ_SUB          reduce using rule 110 (expression -> ID OF ID .)
    EQ_ADD          reduce using rule 110 (expression -> ID OF ID .)
    =               reduce using rule 110 (expression -> ID OF ID .)
    ?               reduce using rule 110 (expression -> ID OF ID .)
    {               reduce using rule 110 (expression -> ID OF ID .)
    SANDBOX         reduce using rule 110 (expression -> ID OF ID .)
    LIMPORT         reduce using rule 110 (expression -> ID OF ID .)
    .               reduce using rule 110 (expression -> ID OF ID .)
    IMPORT          reduce using rule 110 (expression -> ID OF ID .)
    ID              reduce using rule 110 (expression -> ID OF ID .)
    RETURN          reduce using rule 110 (expression -> ID OF ID .)
    DEL             reduce using rule 110 (expression -> ID OF ID .)
    FOR             reduce using rule 110 (expression -> ID OF ID .)
    SKIP            reduce using rule 110 (expression -> ID OF ID .)
    BREAK           reduce using rule 110 (expression -> ID OF ID .)
    LET             reduce using rule 110 (expression -> ID OF ID .)
    WHILE           reduce using rule 110 (expression -> ID OF ID .)
    NAMESPACE       reduce using rule 110 (expression -> ID OF ID .)
    CLASS           reduce using rule 110 (expression -> ID OF ID .)
    FUNC            reduce using rule 110 (expression -> ID OF ID .)
    PYTHON_CODE_EXEC reduce using rule 110 (expression -> ID OF ID .)
    PYTHON_CODE     reduce using rule 110 (expression -> ID OF ID .)
    IF              reduce using rule 110 (expression -> ID OF ID .)
    #               reduce using rule 110 (expression -> ID OF ID .)
    !               reduce using rule 110 (expression -> ID OF ID .)
    STRING          reduce using rule 110 (expression -> ID OF ID .)
    FALSE           reduce using rule 110 (expression -> ID OF ID .)
    TRUE            reduce using rule 110 (expression -> ID OF ID .)
    FLOAT           reduce using rule 110 (expression -> ID OF ID .)
    INT             reduce using rule 110 (expression -> ID OF ID .)
    NULL            reduce using rule 110 (expression -> ID OF ID .)
    $end            reduce using rule 110 (expression -> ID OF ID .)


state 196

    (25) return_statement -> RETURN expression ; .
    SANDBOX         reduce using rule 25 (return_statement -> RETURN expression ; .)
    LIMPORT         reduce using rule 25 (return_statement -> RETURN expression ; .)
    .               reduce using rule 25 (return_statement -> RETURN expression ; .)
    IMPORT          reduce using rule 25 (return_statement -> RETURN expression ; .)
    ID              reduce using rule 25 (return_statement -> RETURN expression ; .)
    RETURN          reduce using rule 25 (return_statement -> RETURN expression ; .)
    DEL             reduce using rule 25 (return_statement -> RETURN expression ; .)
    FOR             reduce using rule 25 (return_statement -> RETURN expression ; .)
    SKIP            reduce using rule 25 (return_statement -> RETURN expression ; .)
    BREAK           reduce using rule 25 (return_statement -> RETURN expression ; .)
    LET             reduce using rule 25 (return_statement -> RETURN expression ; .)
    WHILE           reduce using rule 25 (return_statement -> RETURN expression ; .)
    NAMESPACE       reduce using rule 25 (return_statement -> RETURN expression ; .)
    CLASS           reduce using rule 25 (return_statement -> RETURN expression ; .)
    FUNC            reduce using rule 25 (return_statement -> RETURN expression ; .)
    PYTHON_CODE_EXEC reduce using rule 25 (return_statement -> RETURN expression ; .)
    PYTHON_CODE     reduce using rule 25 (return_statement -> RETURN expression ; .)
    IF              reduce using rule 25 (return_statement -> RETURN expression ; .)
    {               reduce using rule 25 (return_statement -> RETURN expression ; .)
    <               reduce using rule 25 (return_statement -> RETURN expression ; .)
    #               reduce using rule 25 (return_statement -> RETURN expression ; .)
    (               reduce using rule 25 (return_statement -> RETURN expression ; .)
    !               reduce using rule 25 (return_statement -> RETURN expression ; .)
    +               reduce using rule 25 (return_statement -> RETURN expression ; .)
    -               reduce using rule 25 (return_statement -> RETURN expression ; .)
    *               reduce using rule 25 (return_statement -> RETURN expression ; .)
    &               reduce using rule 25 (return_statement -> RETURN expression ; .)
    [               reduce using rule 25 (return_statement -> RETURN expression ; .)
    STRING          reduce using rule 25 (return_statement -> RETURN expression ; .)
    FALSE           reduce using rule 25 (return_statement -> RETURN expression ; .)
    TRUE            reduce using rule 25 (return_statement -> RETURN expression ; .)
    FLOAT           reduce using rule 25 (return_statement -> RETURN expression ; .)
    INT             reduce using rule 25 (return_statement -> RETURN expression ; .)
    NULL            reduce using rule 25 (return_statement -> RETURN expression ; .)
    $end            reduce using rule 25 (return_statement -> RETURN expression ; .)
    }               reduce using rule 25 (return_statement -> RETURN expression ; .)


state 197

    (74) delete_statement -> DEL ID ; .
    SANDBOX         reduce using rule 74 (delete_statement -> DEL ID ; .)
    LIMPORT         reduce using rule 74 (delete_statement -> DEL ID ; .)
    .               reduce using rule 74 (delete_statement -> DEL ID ; .)
    IMPORT          reduce using rule 74 (delete_statement -> DEL ID ; .)
    ID              reduce using rule 74 (delete_statement -> DEL ID ; .)
    RETURN          reduce using rule 74 (delete_statement -> DEL ID ; .)
    DEL             reduce using rule 74 (delete_statement -> DEL ID ; .)
    FOR             reduce using rule 74 (delete_statement -> DEL ID ; .)
    SKIP            reduce using rule 74 (delete_statement -> DEL ID ; .)
    BREAK           reduce using rule 74 (delete_statement -> DEL ID ; .)
    LET             reduce using rule 74 (delete_statement -> DEL ID ; .)
    WHILE           reduce using rule 74 (delete_statement -> DEL ID ; .)
    NAMESPACE       reduce using rule 74 (delete_statement -> DEL ID ; .)
    CLASS           reduce using rule 74 (delete_statement -> DEL ID ; .)
    FUNC            reduce using rule 74 (delete_statement -> DEL ID ; .)
    PYTHON_CODE_EXEC reduce using rule 74 (delete_statement -> DEL ID ; .)
    PYTHON_CODE     reduce using rule 74 (delete_statement -> DEL ID ; .)
    IF              reduce using rule 74 (delete_statement -> DEL ID ; .)
    {               reduce using rule 74 (delete_statement -> DEL ID ; .)
    <               reduce using rule 74 (delete_statement -> DEL ID ; .)
    #               reduce using rule 74 (delete_statement -> DEL ID ; .)
    (               reduce using rule 74 (delete_statement -> DEL ID ; .)
    !               reduce using rule 74 (delete_statement -> DEL ID ; .)
    +               reduce using rule 74 (delete_statement -> DEL ID ; .)
    -               reduce using rule 74 (delete_statement -> DEL ID ; .)
    *               reduce using rule 74 (delete_statement -> DEL ID ; .)
    &               reduce using rule 74 (delete_statement -> DEL ID ; .)
    [               reduce using rule 74 (delete_statement -> DEL ID ; .)
    STRING          reduce using rule 74 (delete_statement -> DEL ID ; .)
    FALSE           reduce using rule 74 (delete_statement -> DEL ID ; .)
    TRUE            reduce using rule 74 (delete_statement -> DEL ID ; .)
    FLOAT           reduce using rule 74 (delete_statement -> DEL ID ; .)
    INT             reduce using rule 74 (delete_statement -> DEL ID ; .)
    NULL            reduce using rule 74 (delete_statement -> DEL ID ; .)
    $end            reduce using rule 74 (delete_statement -> DEL ID ; .)
    }               reduce using rule 74 (delete_statement -> DEL ID ; .)


state 198

    (45) for_loop -> FOR expression IN . expression { program }
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 244
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 199

    (51) variable_assignment -> LET get_index = . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    get_index                      shift and go to state 83
    expression                     shift and go to state 245
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 200

    (52) variable_assignment -> LET ID : . ID = expression ;
    ID              shift and go to state 246


state 201

    (53) variable_assignment -> LET ID = . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 247
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 202

    (46) while_loop -> WHILE ( expression . ) { program }
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    )               shift and go to state 248
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 203

    (91) expression -> ( expression ) .
    ^               reduce using rule 91 (expression -> ( expression ) .)
    [               reduce using rule 91 (expression -> ( expression ) .)
    COLON_COLON     reduce using rule 91 (expression -> ( expression ) .)
    (               reduce using rule 91 (expression -> ( expression ) .)
    >               reduce using rule 91 (expression -> ( expression ) .)
    <               reduce using rule 91 (expression -> ( expression ) .)
    &               reduce using rule 91 (expression -> ( expression ) .)
    |               reduce using rule 91 (expression -> ( expression ) .)
    EQ_GREATER      reduce using rule 91 (expression -> ( expression ) .)
    EQ_LESS         reduce using rule 91 (expression -> ( expression ) .)
    NOT_EQEQ        reduce using rule 91 (expression -> ( expression ) .)
    EQEQ            reduce using rule 91 (expression -> ( expression ) .)
    %               reduce using rule 91 (expression -> ( expression ) .)
    *               reduce using rule 91 (expression -> ( expression ) .)
    /               reduce using rule 91 (expression -> ( expression ) .)
    -               reduce using rule 91 (expression -> ( expression ) .)
    +               reduce using rule 91 (expression -> ( expression ) .)
    :               reduce using rule 91 (expression -> ( expression ) .)
    ,               reduce using rule 91 (expression -> ( expression ) .)
    }               reduce using rule 91 (expression -> ( expression ) .)
    ;               reduce using rule 91 (expression -> ( expression ) .)
    IN              reduce using rule 91 (expression -> ( expression ) .)
    )               reduce using rule 91 (expression -> ( expression ) .)
    ]               reduce using rule 91 (expression -> ( expression ) .)
    EQ_DIV          reduce using rule 91 (expression -> ( expression ) .)
    EQ_MOD          reduce using rule 91 (expression -> ( expression ) .)
    EQ_MUL          reduce using rule 91 (expression -> ( expression ) .)
    EQ_SUB          reduce using rule 91 (expression -> ( expression ) .)
    EQ_ADD          reduce using rule 91 (expression -> ( expression ) .)
    =               reduce using rule 91 (expression -> ( expression ) .)
    ?               reduce using rule 91 (expression -> ( expression ) .)
    {               reduce using rule 91 (expression -> ( expression ) .)
    SANDBOX         reduce using rule 91 (expression -> ( expression ) .)
    LIMPORT         reduce using rule 91 (expression -> ( expression ) .)
    .               reduce using rule 91 (expression -> ( expression ) .)
    IMPORT          reduce using rule 91 (expression -> ( expression ) .)
    ID              reduce using rule 91 (expression -> ( expression ) .)
    RETURN          reduce using rule 91 (expression -> ( expression ) .)
    DEL             reduce using rule 91 (expression -> ( expression ) .)
    FOR             reduce using rule 91 (expression -> ( expression ) .)
    SKIP            reduce using rule 91 (expression -> ( expression ) .)
    BREAK           reduce using rule 91 (expression -> ( expression ) .)
    LET             reduce using rule 91 (expression -> ( expression ) .)
    WHILE           reduce using rule 91 (expression -> ( expression ) .)
    NAMESPACE       reduce using rule 91 (expression -> ( expression ) .)
    CLASS           reduce using rule 91 (expression -> ( expression ) .)
    FUNC            reduce using rule 91 (expression -> ( expression ) .)
    PYTHON_CODE_EXEC reduce using rule 91 (expression -> ( expression ) .)
    PYTHON_CODE     reduce using rule 91 (expression -> ( expression ) .)
    IF              reduce using rule 91 (expression -> ( expression ) .)
    #               reduce using rule 91 (expression -> ( expression ) .)
    !               reduce using rule 91 (expression -> ( expression ) .)
    STRING          reduce using rule 91 (expression -> ( expression ) .)
    FALSE           reduce using rule 91 (expression -> ( expression ) .)
    TRUE            reduce using rule 91 (expression -> ( expression ) .)
    FLOAT           reduce using rule 91 (expression -> ( expression ) .)
    INT             reduce using rule 91 (expression -> ( expression ) .)
    NULL            reduce using rule 91 (expression -> ( expression ) .)
    $end            reduce using rule 91 (expression -> ( expression ) .)


state 204

    (120) _numpy -> ( expression , . )
    (123) items -> expression , . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    )               shift and go to state 250
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 249
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 205

    (118) _numpy -> ( , ) .
    ^               reduce using rule 118 (_numpy -> ( , ) .)
    [               reduce using rule 118 (_numpy -> ( , ) .)
    COLON_COLON     reduce using rule 118 (_numpy -> ( , ) .)
    (               reduce using rule 118 (_numpy -> ( , ) .)
    >               reduce using rule 118 (_numpy -> ( , ) .)
    <               reduce using rule 118 (_numpy -> ( , ) .)
    &               reduce using rule 118 (_numpy -> ( , ) .)
    |               reduce using rule 118 (_numpy -> ( , ) .)
    EQ_GREATER      reduce using rule 118 (_numpy -> ( , ) .)
    EQ_LESS         reduce using rule 118 (_numpy -> ( , ) .)
    NOT_EQEQ        reduce using rule 118 (_numpy -> ( , ) .)
    EQEQ            reduce using rule 118 (_numpy -> ( , ) .)
    %               reduce using rule 118 (_numpy -> ( , ) .)
    *               reduce using rule 118 (_numpy -> ( , ) .)
    /               reduce using rule 118 (_numpy -> ( , ) .)
    -               reduce using rule 118 (_numpy -> ( , ) .)
    +               reduce using rule 118 (_numpy -> ( , ) .)
    :               reduce using rule 118 (_numpy -> ( , ) .)
    ,               reduce using rule 118 (_numpy -> ( , ) .)
    }               reduce using rule 118 (_numpy -> ( , ) .)
    ;               reduce using rule 118 (_numpy -> ( , ) .)
    IN              reduce using rule 118 (_numpy -> ( , ) .)
    )               reduce using rule 118 (_numpy -> ( , ) .)
    ]               reduce using rule 118 (_numpy -> ( , ) .)
    EQ_DIV          reduce using rule 118 (_numpy -> ( , ) .)
    EQ_MOD          reduce using rule 118 (_numpy -> ( , ) .)
    EQ_MUL          reduce using rule 118 (_numpy -> ( , ) .)
    EQ_SUB          reduce using rule 118 (_numpy -> ( , ) .)
    EQ_ADD          reduce using rule 118 (_numpy -> ( , ) .)
    =               reduce using rule 118 (_numpy -> ( , ) .)
    ?               reduce using rule 118 (_numpy -> ( , ) .)
    {               reduce using rule 118 (_numpy -> ( , ) .)
    SANDBOX         reduce using rule 118 (_numpy -> ( , ) .)
    LIMPORT         reduce using rule 118 (_numpy -> ( , ) .)
    .               reduce using rule 118 (_numpy -> ( , ) .)
    IMPORT          reduce using rule 118 (_numpy -> ( , ) .)
    ID              reduce using rule 118 (_numpy -> ( , ) .)
    RETURN          reduce using rule 118 (_numpy -> ( , ) .)
    DEL             reduce using rule 118 (_numpy -> ( , ) .)
    FOR             reduce using rule 118 (_numpy -> ( , ) .)
    SKIP            reduce using rule 118 (_numpy -> ( , ) .)
    BREAK           reduce using rule 118 (_numpy -> ( , ) .)
    LET             reduce using rule 118 (_numpy -> ( , ) .)
    WHILE           reduce using rule 118 (_numpy -> ( , ) .)
    NAMESPACE       reduce using rule 118 (_numpy -> ( , ) .)
    CLASS           reduce using rule 118 (_numpy -> ( , ) .)
    FUNC            reduce using rule 118 (_numpy -> ( , ) .)
    PYTHON_CODE_EXEC reduce using rule 118 (_numpy -> ( , ) .)
    PYTHON_CODE     reduce using rule 118 (_numpy -> ( , ) .)
    IF              reduce using rule 118 (_numpy -> ( , ) .)
    #               reduce using rule 118 (_numpy -> ( , ) .)
    !               reduce using rule 118 (_numpy -> ( , ) .)
    STRING          reduce using rule 118 (_numpy -> ( , ) .)
    FALSE           reduce using rule 118 (_numpy -> ( , ) .)
    TRUE            reduce using rule 118 (_numpy -> ( , ) .)
    FLOAT           reduce using rule 118 (_numpy -> ( , ) .)
    INT             reduce using rule 118 (_numpy -> ( , ) .)
    NULL            reduce using rule 118 (_numpy -> ( , ) .)
    $end            reduce using rule 118 (_numpy -> ( , ) .)


state 206

    (121) _numpy -> ( items , . )
    (124) items -> items , . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    )               shift and go to state 251
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 252
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 207

    (122) _numpy -> ( items ) .
    ^               reduce using rule 122 (_numpy -> ( items ) .)
    [               reduce using rule 122 (_numpy -> ( items ) .)
    COLON_COLON     reduce using rule 122 (_numpy -> ( items ) .)
    (               reduce using rule 122 (_numpy -> ( items ) .)
    >               reduce using rule 122 (_numpy -> ( items ) .)
    <               reduce using rule 122 (_numpy -> ( items ) .)
    &               reduce using rule 122 (_numpy -> ( items ) .)
    |               reduce using rule 122 (_numpy -> ( items ) .)
    EQ_GREATER      reduce using rule 122 (_numpy -> ( items ) .)
    EQ_LESS         reduce using rule 122 (_numpy -> ( items ) .)
    NOT_EQEQ        reduce using rule 122 (_numpy -> ( items ) .)
    EQEQ            reduce using rule 122 (_numpy -> ( items ) .)
    %               reduce using rule 122 (_numpy -> ( items ) .)
    *               reduce using rule 122 (_numpy -> ( items ) .)
    /               reduce using rule 122 (_numpy -> ( items ) .)
    -               reduce using rule 122 (_numpy -> ( items ) .)
    +               reduce using rule 122 (_numpy -> ( items ) .)
    :               reduce using rule 122 (_numpy -> ( items ) .)
    ,               reduce using rule 122 (_numpy -> ( items ) .)
    }               reduce using rule 122 (_numpy -> ( items ) .)
    ;               reduce using rule 122 (_numpy -> ( items ) .)
    IN              reduce using rule 122 (_numpy -> ( items ) .)
    )               reduce using rule 122 (_numpy -> ( items ) .)
    ]               reduce using rule 122 (_numpy -> ( items ) .)
    EQ_DIV          reduce using rule 122 (_numpy -> ( items ) .)
    EQ_MOD          reduce using rule 122 (_numpy -> ( items ) .)
    EQ_MUL          reduce using rule 122 (_numpy -> ( items ) .)
    EQ_SUB          reduce using rule 122 (_numpy -> ( items ) .)
    EQ_ADD          reduce using rule 122 (_numpy -> ( items ) .)
    =               reduce using rule 122 (_numpy -> ( items ) .)
    ?               reduce using rule 122 (_numpy -> ( items ) .)
    {               reduce using rule 122 (_numpy -> ( items ) .)
    SANDBOX         reduce using rule 122 (_numpy -> ( items ) .)
    LIMPORT         reduce using rule 122 (_numpy -> ( items ) .)
    .               reduce using rule 122 (_numpy -> ( items ) .)
    IMPORT          reduce using rule 122 (_numpy -> ( items ) .)
    ID              reduce using rule 122 (_numpy -> ( items ) .)
    RETURN          reduce using rule 122 (_numpy -> ( items ) .)
    DEL             reduce using rule 122 (_numpy -> ( items ) .)
    FOR             reduce using rule 122 (_numpy -> ( items ) .)
    SKIP            reduce using rule 122 (_numpy -> ( items ) .)
    BREAK           reduce using rule 122 (_numpy -> ( items ) .)
    LET             reduce using rule 122 (_numpy -> ( items ) .)
    WHILE           reduce using rule 122 (_numpy -> ( items ) .)
    NAMESPACE       reduce using rule 122 (_numpy -> ( items ) .)
    CLASS           reduce using rule 122 (_numpy -> ( items ) .)
    FUNC            reduce using rule 122 (_numpy -> ( items ) .)
    PYTHON_CODE_EXEC reduce using rule 122 (_numpy -> ( items ) .)
    PYTHON_CODE     reduce using rule 122 (_numpy -> ( items ) .)
    IF              reduce using rule 122 (_numpy -> ( items ) .)
    #               reduce using rule 122 (_numpy -> ( items ) .)
    !               reduce using rule 122 (_numpy -> ( items ) .)
    STRING          reduce using rule 122 (_numpy -> ( items ) .)
    FALSE           reduce using rule 122 (_numpy -> ( items ) .)
    TRUE            reduce using rule 122 (_numpy -> ( items ) .)
    FLOAT           reduce using rule 122 (_numpy -> ( items ) .)
    INT             reduce using rule 122 (_numpy -> ( items ) .)
    NULL            reduce using rule 122 (_numpy -> ( items ) .)
    $end            reduce using rule 122 (_numpy -> ( items ) .)


state 208

    (66) conditional -> if_statement else_if_loop else_statement .
    SANDBOX         reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    LIMPORT         reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    .               reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    IMPORT          reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    ID              reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    RETURN          reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    DEL             reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    FOR             reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    SKIP            reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    BREAK           reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    LET             reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    WHILE           reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    NAMESPACE       reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    CLASS           reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    FUNC            reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    PYTHON_CODE_EXEC reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    PYTHON_CODE     reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    IF              reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    {               reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    <               reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    #               reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    (               reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    !               reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    +               reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    -               reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    *               reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    &               reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    [               reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    STRING          reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    FALSE           reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    TRUE            reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    FLOAT           reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    INT             reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    NULL            reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    $end            reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)
    }               reduce using rule 66 (conditional -> if_statement else_if_loop else_statement .)


state 209

    (71) else_if_loop -> else_if_loop else_if_statement .
    ELSE            reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    SANDBOX         reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    LIMPORT         reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    .               reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    IMPORT          reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    ID              reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    RETURN          reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    DEL             reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    FOR             reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    SKIP            reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    BREAK           reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    LET             reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    WHILE           reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    NAMESPACE       reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    CLASS           reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    FUNC            reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    PYTHON_CODE_EXEC reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    PYTHON_CODE     reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    IF              reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    {               reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    <               reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    #               reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    (               reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    !               reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    +               reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    -               reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    *               reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    &               reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    [               reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    STRING          reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    FALSE           reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    TRUE            reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    FLOAT           reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    INT             reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    NULL            reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    $end            reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)
    }               reduce using rule 71 (else_if_loop -> else_if_loop else_if_statement .)


state 210

    (73) else_statement -> ELSE { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               reduce using rule 137 (empty -> .)
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    <               shift and go to state 46
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59

    program                        shift and go to state 253
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 211

    (72) else_if_statement -> ELSE IF . ( expression ) { program }
    (               shift and go to state 254


state 212

    (64) class_attribute_assignment -> class_attribute = expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 255
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 213

    (43) class_declaration -> NAMESPACE ID { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               reduce using rule 137 (empty -> .)
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    <               shift and go to state 46
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59

    program                        shift and go to state 256
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 214

    (44) class_declaration -> CLASS ID { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               reduce using rule 137 (empty -> .)
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    <               shift and go to state 46
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59

    program                        shift and go to state 257
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 215

    (36) function_declaration -> FUNC ID ( . empty ) { program } TARROW expression
    (39) function_declaration -> FUNC ID ( . function_arguments ) { program } TARROW expression
    (137) empty -> .
    (40) function_arguments -> . kwargs
    (41) function_arguments -> . positional_args , kwargs
    (42) function_arguments -> . positional_args
    (49) kwargs -> . ID = expression
    (50) kwargs -> . kwargs , id = expression
    (47) positional_args -> . expression
    (48) positional_args -> . positional_args , expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    )               reduce using rule 137 (empty -> .)
    ID              shift and go to state 168
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    empty                          shift and go to state 258
    expression                     shift and go to state 142
    function_arguments             shift and go to state 259
    kwargs                         shift and go to state 166
    positional_args                shift and go to state 167
    id                             shift and go to state 52
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 216

    (37) function_declaration -> FUNC ID COLON_COLON . ID ( empty ) { program } TARROW expression
    (38) function_declaration -> FUNC ID COLON_COLON . ID ( function_arguments ) { program } TARROW expression
    ID              shift and go to state 260


state 217

    (116) _list -> [ positional_args , . ]
    (48) positional_args -> positional_args , . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    ]               shift and go to state 261
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 226
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 218

    (117) _list -> [ positional_args ] .
    ^               reduce using rule 117 (_list -> [ positional_args ] .)
    [               reduce using rule 117 (_list -> [ positional_args ] .)
    COLON_COLON     reduce using rule 117 (_list -> [ positional_args ] .)
    (               reduce using rule 117 (_list -> [ positional_args ] .)
    >               reduce using rule 117 (_list -> [ positional_args ] .)
    <               reduce using rule 117 (_list -> [ positional_args ] .)
    &               reduce using rule 117 (_list -> [ positional_args ] .)
    |               reduce using rule 117 (_list -> [ positional_args ] .)
    EQ_GREATER      reduce using rule 117 (_list -> [ positional_args ] .)
    EQ_LESS         reduce using rule 117 (_list -> [ positional_args ] .)
    NOT_EQEQ        reduce using rule 117 (_list -> [ positional_args ] .)
    EQEQ            reduce using rule 117 (_list -> [ positional_args ] .)
    %               reduce using rule 117 (_list -> [ positional_args ] .)
    *               reduce using rule 117 (_list -> [ positional_args ] .)
    /               reduce using rule 117 (_list -> [ positional_args ] .)
    -               reduce using rule 117 (_list -> [ positional_args ] .)
    +               reduce using rule 117 (_list -> [ positional_args ] .)
    :               reduce using rule 117 (_list -> [ positional_args ] .)
    ,               reduce using rule 117 (_list -> [ positional_args ] .)
    }               reduce using rule 117 (_list -> [ positional_args ] .)
    ;               reduce using rule 117 (_list -> [ positional_args ] .)
    IN              reduce using rule 117 (_list -> [ positional_args ] .)
    )               reduce using rule 117 (_list -> [ positional_args ] .)
    ]               reduce using rule 117 (_list -> [ positional_args ] .)
    EQ_DIV          reduce using rule 117 (_list -> [ positional_args ] .)
    EQ_MOD          reduce using rule 117 (_list -> [ positional_args ] .)
    EQ_MUL          reduce using rule 117 (_list -> [ positional_args ] .)
    EQ_SUB          reduce using rule 117 (_list -> [ positional_args ] .)
    EQ_ADD          reduce using rule 117 (_list -> [ positional_args ] .)
    =               reduce using rule 117 (_list -> [ positional_args ] .)
    ?               reduce using rule 117 (_list -> [ positional_args ] .)
    {               reduce using rule 117 (_list -> [ positional_args ] .)
    SANDBOX         reduce using rule 117 (_list -> [ positional_args ] .)
    LIMPORT         reduce using rule 117 (_list -> [ positional_args ] .)
    .               reduce using rule 117 (_list -> [ positional_args ] .)
    IMPORT          reduce using rule 117 (_list -> [ positional_args ] .)
    ID              reduce using rule 117 (_list -> [ positional_args ] .)
    RETURN          reduce using rule 117 (_list -> [ positional_args ] .)
    DEL             reduce using rule 117 (_list -> [ positional_args ] .)
    FOR             reduce using rule 117 (_list -> [ positional_args ] .)
    SKIP            reduce using rule 117 (_list -> [ positional_args ] .)
    BREAK           reduce using rule 117 (_list -> [ positional_args ] .)
    LET             reduce using rule 117 (_list -> [ positional_args ] .)
    WHILE           reduce using rule 117 (_list -> [ positional_args ] .)
    NAMESPACE       reduce using rule 117 (_list -> [ positional_args ] .)
    CLASS           reduce using rule 117 (_list -> [ positional_args ] .)
    FUNC            reduce using rule 117 (_list -> [ positional_args ] .)
    PYTHON_CODE_EXEC reduce using rule 117 (_list -> [ positional_args ] .)
    PYTHON_CODE     reduce using rule 117 (_list -> [ positional_args ] .)
    IF              reduce using rule 117 (_list -> [ positional_args ] .)
    #               reduce using rule 117 (_list -> [ positional_args ] .)
    !               reduce using rule 117 (_list -> [ positional_args ] .)
    STRING          reduce using rule 117 (_list -> [ positional_args ] .)
    FALSE           reduce using rule 117 (_list -> [ positional_args ] .)
    TRUE            reduce using rule 117 (_list -> [ positional_args ] .)
    FLOAT           reduce using rule 117 (_list -> [ positional_args ] .)
    INT             reduce using rule 117 (_list -> [ positional_args ] .)
    NULL            reduce using rule 117 (_list -> [ positional_args ] .)
    $end            reduce using rule 117 (_list -> [ positional_args ] .)


state 219

    (69) if_statement -> IF ( expression . ) { program }
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    )               shift and go to state 262
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 220

    (28) function_call -> < ID > . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 263
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 221

    (30) function_call -> # DEPENDS expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for COLON_COLON resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    ;               reduce using rule 30 (function_call -> # DEPENDS expression .)
    :               reduce using rule 30 (function_call -> # DEPENDS expression .)
    ,               reduce using rule 30 (function_call -> # DEPENDS expression .)
    }               reduce using rule 30 (function_call -> # DEPENDS expression .)
    IN              reduce using rule 30 (function_call -> # DEPENDS expression .)
    )               reduce using rule 30 (function_call -> # DEPENDS expression .)
    ]               reduce using rule 30 (function_call -> # DEPENDS expression .)
    EQ_DIV          reduce using rule 30 (function_call -> # DEPENDS expression .)
    EQ_MOD          reduce using rule 30 (function_call -> # DEPENDS expression .)
    EQ_MUL          reduce using rule 30 (function_call -> # DEPENDS expression .)
    EQ_SUB          reduce using rule 30 (function_call -> # DEPENDS expression .)
    EQ_ADD          reduce using rule 30 (function_call -> # DEPENDS expression .)
    =               reduce using rule 30 (function_call -> # DEPENDS expression .)
    ?               reduce using rule 30 (function_call -> # DEPENDS expression .)
    {               reduce using rule 30 (function_call -> # DEPENDS expression .)
    SANDBOX         reduce using rule 30 (function_call -> # DEPENDS expression .)
    LIMPORT         reduce using rule 30 (function_call -> # DEPENDS expression .)
    .               reduce using rule 30 (function_call -> # DEPENDS expression .)
    IMPORT          reduce using rule 30 (function_call -> # DEPENDS expression .)
    ID              reduce using rule 30 (function_call -> # DEPENDS expression .)
    RETURN          reduce using rule 30 (function_call -> # DEPENDS expression .)
    DEL             reduce using rule 30 (function_call -> # DEPENDS expression .)
    FOR             reduce using rule 30 (function_call -> # DEPENDS expression .)
    SKIP            reduce using rule 30 (function_call -> # DEPENDS expression .)
    BREAK           reduce using rule 30 (function_call -> # DEPENDS expression .)
    LET             reduce using rule 30 (function_call -> # DEPENDS expression .)
    WHILE           reduce using rule 30 (function_call -> # DEPENDS expression .)
    NAMESPACE       reduce using rule 30 (function_call -> # DEPENDS expression .)
    CLASS           reduce using rule 30 (function_call -> # DEPENDS expression .)
    FUNC            reduce using rule 30 (function_call -> # DEPENDS expression .)
    PYTHON_CODE_EXEC reduce using rule 30 (function_call -> # DEPENDS expression .)
    PYTHON_CODE     reduce using rule 30 (function_call -> # DEPENDS expression .)
    IF              reduce using rule 30 (function_call -> # DEPENDS expression .)
    #               reduce using rule 30 (function_call -> # DEPENDS expression .)
    !               reduce using rule 30 (function_call -> # DEPENDS expression .)
    STRING          reduce using rule 30 (function_call -> # DEPENDS expression .)
    FALSE           reduce using rule 30 (function_call -> # DEPENDS expression .)
    TRUE            reduce using rule 30 (function_call -> # DEPENDS expression .)
    FLOAT           reduce using rule 30 (function_call -> # DEPENDS expression .)
    INT             reduce using rule 30 (function_call -> # DEPENDS expression .)
    NULL            reduce using rule 30 (function_call -> # DEPENDS expression .)
    $end            reduce using rule 30 (function_call -> # DEPENDS expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 222

    (31) function_call -> # DEFINE expression . ? ID
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ?               shift and go to state 264
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 223

    (19) sandbox -> SANDBOX { program } .
    SANDBOX         reduce using rule 19 (sandbox -> SANDBOX { program } .)
    LIMPORT         reduce using rule 19 (sandbox -> SANDBOX { program } .)
    .               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    IMPORT          reduce using rule 19 (sandbox -> SANDBOX { program } .)
    ID              reduce using rule 19 (sandbox -> SANDBOX { program } .)
    RETURN          reduce using rule 19 (sandbox -> SANDBOX { program } .)
    DEL             reduce using rule 19 (sandbox -> SANDBOX { program } .)
    FOR             reduce using rule 19 (sandbox -> SANDBOX { program } .)
    SKIP            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    BREAK           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    LET             reduce using rule 19 (sandbox -> SANDBOX { program } .)
    WHILE           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    NAMESPACE       reduce using rule 19 (sandbox -> SANDBOX { program } .)
    CLASS           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    FUNC            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    PYTHON_CODE_EXEC reduce using rule 19 (sandbox -> SANDBOX { program } .)
    PYTHON_CODE     reduce using rule 19 (sandbox -> SANDBOX { program } .)
    IF              reduce using rule 19 (sandbox -> SANDBOX { program } .)
    {               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    <               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    #               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    (               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    !               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    +               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    -               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    *               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    &               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    [               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    STRING          reduce using rule 19 (sandbox -> SANDBOX { program } .)
    FALSE           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    TRUE            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    FLOAT           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    INT             reduce using rule 19 (sandbox -> SANDBOX { program } .)
    NULL            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    $end            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    }               reduce using rule 19 (sandbox -> SANDBOX { program } .)


state 224

    (134) assoc_array_items -> assoc_array_items , expression . : expression
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    :               shift and go to state 265
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 225

    (114) _tuple -> { positional_args , } .
    ^               reduce using rule 114 (_tuple -> { positional_args , } .)
    [               reduce using rule 114 (_tuple -> { positional_args , } .)
    COLON_COLON     reduce using rule 114 (_tuple -> { positional_args , } .)
    (               reduce using rule 114 (_tuple -> { positional_args , } .)
    >               reduce using rule 114 (_tuple -> { positional_args , } .)
    <               reduce using rule 114 (_tuple -> { positional_args , } .)
    &               reduce using rule 114 (_tuple -> { positional_args , } .)
    |               reduce using rule 114 (_tuple -> { positional_args , } .)
    EQ_GREATER      reduce using rule 114 (_tuple -> { positional_args , } .)
    EQ_LESS         reduce using rule 114 (_tuple -> { positional_args , } .)
    NOT_EQEQ        reduce using rule 114 (_tuple -> { positional_args , } .)
    EQEQ            reduce using rule 114 (_tuple -> { positional_args , } .)
    %               reduce using rule 114 (_tuple -> { positional_args , } .)
    *               reduce using rule 114 (_tuple -> { positional_args , } .)
    /               reduce using rule 114 (_tuple -> { positional_args , } .)
    -               reduce using rule 114 (_tuple -> { positional_args , } .)
    +               reduce using rule 114 (_tuple -> { positional_args , } .)
    :               reduce using rule 114 (_tuple -> { positional_args , } .)
    ,               reduce using rule 114 (_tuple -> { positional_args , } .)
    }               reduce using rule 114 (_tuple -> { positional_args , } .)
    ;               reduce using rule 114 (_tuple -> { positional_args , } .)
    IN              reduce using rule 114 (_tuple -> { positional_args , } .)
    )               reduce using rule 114 (_tuple -> { positional_args , } .)
    ]               reduce using rule 114 (_tuple -> { positional_args , } .)
    EQ_DIV          reduce using rule 114 (_tuple -> { positional_args , } .)
    EQ_MOD          reduce using rule 114 (_tuple -> { positional_args , } .)
    EQ_MUL          reduce using rule 114 (_tuple -> { positional_args , } .)
    EQ_SUB          reduce using rule 114 (_tuple -> { positional_args , } .)
    EQ_ADD          reduce using rule 114 (_tuple -> { positional_args , } .)
    =               reduce using rule 114 (_tuple -> { positional_args , } .)
    ?               reduce using rule 114 (_tuple -> { positional_args , } .)
    {               reduce using rule 114 (_tuple -> { positional_args , } .)
    SANDBOX         reduce using rule 114 (_tuple -> { positional_args , } .)
    LIMPORT         reduce using rule 114 (_tuple -> { positional_args , } .)
    .               reduce using rule 114 (_tuple -> { positional_args , } .)
    IMPORT          reduce using rule 114 (_tuple -> { positional_args , } .)
    ID              reduce using rule 114 (_tuple -> { positional_args , } .)
    RETURN          reduce using rule 114 (_tuple -> { positional_args , } .)
    DEL             reduce using rule 114 (_tuple -> { positional_args , } .)
    FOR             reduce using rule 114 (_tuple -> { positional_args , } .)
    SKIP            reduce using rule 114 (_tuple -> { positional_args , } .)
    BREAK           reduce using rule 114 (_tuple -> { positional_args , } .)
    LET             reduce using rule 114 (_tuple -> { positional_args , } .)
    WHILE           reduce using rule 114 (_tuple -> { positional_args , } .)
    NAMESPACE       reduce using rule 114 (_tuple -> { positional_args , } .)
    CLASS           reduce using rule 114 (_tuple -> { positional_args , } .)
    FUNC            reduce using rule 114 (_tuple -> { positional_args , } .)
    PYTHON_CODE_EXEC reduce using rule 114 (_tuple -> { positional_args , } .)
    PYTHON_CODE     reduce using rule 114 (_tuple -> { positional_args , } .)
    IF              reduce using rule 114 (_tuple -> { positional_args , } .)
    #               reduce using rule 114 (_tuple -> { positional_args , } .)
    !               reduce using rule 114 (_tuple -> { positional_args , } .)
    STRING          reduce using rule 114 (_tuple -> { positional_args , } .)
    FALSE           reduce using rule 114 (_tuple -> { positional_args , } .)
    TRUE            reduce using rule 114 (_tuple -> { positional_args , } .)
    FLOAT           reduce using rule 114 (_tuple -> { positional_args , } .)
    INT             reduce using rule 114 (_tuple -> { positional_args , } .)
    NULL            reduce using rule 114 (_tuple -> { positional_args , } .)
    $end            reduce using rule 114 (_tuple -> { positional_args , } .)


state 226

    (48) positional_args -> positional_args , expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ,               reduce using rule 48 (positional_args -> positional_args , expression .)
    }               reduce using rule 48 (positional_args -> positional_args , expression .)
    ]               reduce using rule 48 (positional_args -> positional_args , expression .)
    )               reduce using rule 48 (positional_args -> positional_args , expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 227

    (133) assoc_array_items -> expression : expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    }               reduce using rule 133 (assoc_array_items -> expression : expression .)
    ,               reduce using rule 133 (assoc_array_items -> expression : expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 228

    (113) get_index -> expression [ expression ] .
    EQ_DIV          reduce using rule 113 (get_index -> expression [ expression ] .)
    EQ_MOD          reduce using rule 113 (get_index -> expression [ expression ] .)
    EQ_MUL          reduce using rule 113 (get_index -> expression [ expression ] .)
    EQ_SUB          reduce using rule 113 (get_index -> expression [ expression ] .)
    EQ_ADD          reduce using rule 113 (get_index -> expression [ expression ] .)
    ^               reduce using rule 113 (get_index -> expression [ expression ] .)
    [               reduce using rule 113 (get_index -> expression [ expression ] .)
    COLON_COLON     reduce using rule 113 (get_index -> expression [ expression ] .)
    (               reduce using rule 113 (get_index -> expression [ expression ] .)
    >               reduce using rule 113 (get_index -> expression [ expression ] .)
    <               reduce using rule 113 (get_index -> expression [ expression ] .)
    &               reduce using rule 113 (get_index -> expression [ expression ] .)
    |               reduce using rule 113 (get_index -> expression [ expression ] .)
    EQ_GREATER      reduce using rule 113 (get_index -> expression [ expression ] .)
    EQ_LESS         reduce using rule 113 (get_index -> expression [ expression ] .)
    NOT_EQEQ        reduce using rule 113 (get_index -> expression [ expression ] .)
    EQEQ            reduce using rule 113 (get_index -> expression [ expression ] .)
    %               reduce using rule 113 (get_index -> expression [ expression ] .)
    *               reduce using rule 113 (get_index -> expression [ expression ] .)
    /               reduce using rule 113 (get_index -> expression [ expression ] .)
    -               reduce using rule 113 (get_index -> expression [ expression ] .)
    +               reduce using rule 113 (get_index -> expression [ expression ] .)
    :               reduce using rule 113 (get_index -> expression [ expression ] .)
    ,               reduce using rule 113 (get_index -> expression [ expression ] .)
    }               reduce using rule 113 (get_index -> expression [ expression ] .)
    ;               reduce using rule 113 (get_index -> expression [ expression ] .)
    IN              reduce using rule 113 (get_index -> expression [ expression ] .)
    =               reduce using rule 113 (get_index -> expression [ expression ] .)
    )               reduce using rule 113 (get_index -> expression [ expression ] .)
    ]               reduce using rule 113 (get_index -> expression [ expression ] .)
    ?               reduce using rule 113 (get_index -> expression [ expression ] .)
    {               reduce using rule 113 (get_index -> expression [ expression ] .)
    SANDBOX         reduce using rule 113 (get_index -> expression [ expression ] .)
    LIMPORT         reduce using rule 113 (get_index -> expression [ expression ] .)
    .               reduce using rule 113 (get_index -> expression [ expression ] .)
    IMPORT          reduce using rule 113 (get_index -> expression [ expression ] .)
    ID              reduce using rule 113 (get_index -> expression [ expression ] .)
    RETURN          reduce using rule 113 (get_index -> expression [ expression ] .)
    DEL             reduce using rule 113 (get_index -> expression [ expression ] .)
    FOR             reduce using rule 113 (get_index -> expression [ expression ] .)
    SKIP            reduce using rule 113 (get_index -> expression [ expression ] .)
    BREAK           reduce using rule 113 (get_index -> expression [ expression ] .)
    LET             reduce using rule 113 (get_index -> expression [ expression ] .)
    WHILE           reduce using rule 113 (get_index -> expression [ expression ] .)
    NAMESPACE       reduce using rule 113 (get_index -> expression [ expression ] .)
    CLASS           reduce using rule 113 (get_index -> expression [ expression ] .)
    FUNC            reduce using rule 113 (get_index -> expression [ expression ] .)
    PYTHON_CODE_EXEC reduce using rule 113 (get_index -> expression [ expression ] .)
    PYTHON_CODE     reduce using rule 113 (get_index -> expression [ expression ] .)
    IF              reduce using rule 113 (get_index -> expression [ expression ] .)
    #               reduce using rule 113 (get_index -> expression [ expression ] .)
    !               reduce using rule 113 (get_index -> expression [ expression ] .)
    STRING          reduce using rule 113 (get_index -> expression [ expression ] .)
    FALSE           reduce using rule 113 (get_index -> expression [ expression ] .)
    TRUE            reduce using rule 113 (get_index -> expression [ expression ] .)
    FLOAT           reduce using rule 113 (get_index -> expression [ expression ] .)
    INT             reduce using rule 113 (get_index -> expression [ expression ] .)
    NULL            reduce using rule 113 (get_index -> expression [ expression ] .)
    $end            reduce using rule 113 (get_index -> expression [ expression ] .)


state 229

    (27) function_call -> expression ( empty ) . FARROW { program }
    (32) function_call -> expression ( empty ) .
    FARROW          shift and go to state 266
    ;               reduce using rule 32 (function_call -> expression ( empty ) .)
    ^               reduce using rule 32 (function_call -> expression ( empty ) .)
    [               reduce using rule 32 (function_call -> expression ( empty ) .)
    COLON_COLON     reduce using rule 32 (function_call -> expression ( empty ) .)
    (               reduce using rule 32 (function_call -> expression ( empty ) .)
    >               reduce using rule 32 (function_call -> expression ( empty ) .)
    <               reduce using rule 32 (function_call -> expression ( empty ) .)
    &               reduce using rule 32 (function_call -> expression ( empty ) .)
    |               reduce using rule 32 (function_call -> expression ( empty ) .)
    EQ_GREATER      reduce using rule 32 (function_call -> expression ( empty ) .)
    EQ_LESS         reduce using rule 32 (function_call -> expression ( empty ) .)
    NOT_EQEQ        reduce using rule 32 (function_call -> expression ( empty ) .)
    EQEQ            reduce using rule 32 (function_call -> expression ( empty ) .)
    %               reduce using rule 32 (function_call -> expression ( empty ) .)
    *               reduce using rule 32 (function_call -> expression ( empty ) .)
    /               reduce using rule 32 (function_call -> expression ( empty ) .)
    -               reduce using rule 32 (function_call -> expression ( empty ) .)
    +               reduce using rule 32 (function_call -> expression ( empty ) .)
    :               reduce using rule 32 (function_call -> expression ( empty ) .)
    ,               reduce using rule 32 (function_call -> expression ( empty ) .)
    }               reduce using rule 32 (function_call -> expression ( empty ) .)
    IN              reduce using rule 32 (function_call -> expression ( empty ) .)
    )               reduce using rule 32 (function_call -> expression ( empty ) .)
    ]               reduce using rule 32 (function_call -> expression ( empty ) .)
    EQ_DIV          reduce using rule 32 (function_call -> expression ( empty ) .)
    EQ_MOD          reduce using rule 32 (function_call -> expression ( empty ) .)
    EQ_MUL          reduce using rule 32 (function_call -> expression ( empty ) .)
    EQ_SUB          reduce using rule 32 (function_call -> expression ( empty ) .)
    EQ_ADD          reduce using rule 32 (function_call -> expression ( empty ) .)
    =               reduce using rule 32 (function_call -> expression ( empty ) .)
    ?               reduce using rule 32 (function_call -> expression ( empty ) .)
    {               reduce using rule 32 (function_call -> expression ( empty ) .)
    SANDBOX         reduce using rule 32 (function_call -> expression ( empty ) .)
    LIMPORT         reduce using rule 32 (function_call -> expression ( empty ) .)
    .               reduce using rule 32 (function_call -> expression ( empty ) .)
    IMPORT          reduce using rule 32 (function_call -> expression ( empty ) .)
    ID              reduce using rule 32 (function_call -> expression ( empty ) .)
    RETURN          reduce using rule 32 (function_call -> expression ( empty ) .)
    DEL             reduce using rule 32 (function_call -> expression ( empty ) .)
    FOR             reduce using rule 32 (function_call -> expression ( empty ) .)
    SKIP            reduce using rule 32 (function_call -> expression ( empty ) .)
    BREAK           reduce using rule 32 (function_call -> expression ( empty ) .)
    LET             reduce using rule 32 (function_call -> expression ( empty ) .)
    WHILE           reduce using rule 32 (function_call -> expression ( empty ) .)
    NAMESPACE       reduce using rule 32 (function_call -> expression ( empty ) .)
    CLASS           reduce using rule 32 (function_call -> expression ( empty ) .)
    FUNC            reduce using rule 32 (function_call -> expression ( empty ) .)
    PYTHON_CODE_EXEC reduce using rule 32 (function_call -> expression ( empty ) .)
    PYTHON_CODE     reduce using rule 32 (function_call -> expression ( empty ) .)
    IF              reduce using rule 32 (function_call -> expression ( empty ) .)
    #               reduce using rule 32 (function_call -> expression ( empty ) .)
    !               reduce using rule 32 (function_call -> expression ( empty ) .)
    STRING          reduce using rule 32 (function_call -> expression ( empty ) .)
    FALSE           reduce using rule 32 (function_call -> expression ( empty ) .)
    TRUE            reduce using rule 32 (function_call -> expression ( empty ) .)
    FLOAT           reduce using rule 32 (function_call -> expression ( empty ) .)
    INT             reduce using rule 32 (function_call -> expression ( empty ) .)
    NULL            reduce using rule 32 (function_call -> expression ( empty ) .)
    $end            reduce using rule 32 (function_call -> expression ( empty ) .)


state 230

    (33) function_call -> expression ( function_arguments ) . FARROW { program }
    (34) function_call -> expression ( function_arguments ) .
    FARROW          shift and go to state 267
    ;               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    ^               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    [               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    COLON_COLON     reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    (               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    >               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    <               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    &               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    |               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    EQ_GREATER      reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    EQ_LESS         reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    NOT_EQEQ        reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    EQEQ            reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    %               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    *               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    /               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    -               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    +               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    :               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    ,               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    }               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    IN              reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    )               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    ]               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    EQ_DIV          reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    EQ_MOD          reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    EQ_MUL          reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    EQ_SUB          reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    EQ_ADD          reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    =               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    ?               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    {               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    SANDBOX         reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    LIMPORT         reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    .               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    IMPORT          reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    ID              reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    RETURN          reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    DEL             reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    FOR             reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    SKIP            reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    BREAK           reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    LET             reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    WHILE           reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    NAMESPACE       reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    CLASS           reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    FUNC            reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    PYTHON_CODE_EXEC reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    PYTHON_CODE     reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    IF              reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    #               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    !               reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    STRING          reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    FALSE           reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    TRUE            reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    FLOAT           reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    INT             reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    NULL            reduce using rule 34 (function_call -> expression ( function_arguments ) .)
    $end            reduce using rule 34 (function_call -> expression ( function_arguments ) .)


state 231

    (50) kwargs -> kwargs , . id = expression
    (131) id -> . ID
    ID              shift and go to state 269

    id                             shift and go to state 268

state 232

    (41) function_arguments -> positional_args , . kwargs
    (48) positional_args -> positional_args , . expression
    (49) kwargs -> . ID = expression
    (50) kwargs -> . kwargs , id = expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    ID              shift and go to state 168
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    kwargs                         shift and go to state 270
    expression                     shift and go to state 226
    id                             shift and go to state 52
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 233

    (49) kwargs -> ID = . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 271
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 234

    (54) variable_operation -> get_index EQ_DIV expression ; .
    SANDBOX         reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    LIMPORT         reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    .               reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    IMPORT          reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    ID              reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    RETURN          reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    DEL             reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    FOR             reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    SKIP            reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    BREAK           reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    LET             reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    WHILE           reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    NAMESPACE       reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    CLASS           reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    FUNC            reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    PYTHON_CODE_EXEC reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    PYTHON_CODE     reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    IF              reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    {               reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    <               reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    #               reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    (               reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    !               reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    +               reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    -               reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    *               reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    &               reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    [               reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    STRING          reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    FALSE           reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    TRUE            reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    FLOAT           reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    INT             reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    NULL            reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    $end            reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)
    }               reduce using rule 54 (variable_operation -> get_index EQ_DIV expression ; .)


state 235

    (56) variable_operation -> get_index EQ_MOD expression ; .
    SANDBOX         reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    LIMPORT         reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    .               reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    IMPORT          reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    ID              reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    RETURN          reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    DEL             reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    FOR             reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    SKIP            reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    BREAK           reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    LET             reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    WHILE           reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    NAMESPACE       reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    CLASS           reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    FUNC            reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    PYTHON_CODE     reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    IF              reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    {               reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    <               reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    #               reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    (               reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    !               reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    +               reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    -               reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    *               reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    &               reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    [               reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    STRING          reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    FALSE           reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    TRUE            reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    FLOAT           reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    INT             reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    NULL            reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    $end            reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)
    }               reduce using rule 56 (variable_operation -> get_index EQ_MOD expression ; .)


state 236

    (58) variable_operation -> get_index EQ_MUL expression ; .
    SANDBOX         reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    LIMPORT         reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    .               reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    IMPORT          reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    ID              reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    RETURN          reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    DEL             reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    FOR             reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    SKIP            reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    BREAK           reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    LET             reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    WHILE           reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    NAMESPACE       reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    CLASS           reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    FUNC            reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    PYTHON_CODE_EXEC reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    PYTHON_CODE     reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    IF              reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    {               reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    <               reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    #               reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    (               reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    !               reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    +               reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    -               reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    *               reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    &               reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    [               reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    STRING          reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    FALSE           reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    TRUE            reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    FLOAT           reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    INT             reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    NULL            reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    $end            reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)
    }               reduce using rule 58 (variable_operation -> get_index EQ_MUL expression ; .)


state 237

    (60) variable_operation -> get_index EQ_SUB expression ; .
    SANDBOX         reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    LIMPORT         reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    .               reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    IMPORT          reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    ID              reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    RETURN          reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    DEL             reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    FOR             reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    SKIP            reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    BREAK           reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    LET             reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    WHILE           reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    NAMESPACE       reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    CLASS           reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    FUNC            reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    PYTHON_CODE_EXEC reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    PYTHON_CODE     reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    IF              reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    {               reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    <               reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    #               reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    (               reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    !               reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    +               reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    -               reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    *               reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    &               reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    [               reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    STRING          reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    FALSE           reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    TRUE            reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    FLOAT           reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    INT             reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    NULL            reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    $end            reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)
    }               reduce using rule 60 (variable_operation -> get_index EQ_SUB expression ; .)


state 238

    (62) variable_operation -> get_index EQ_ADD expression ; .
    SANDBOX         reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    LIMPORT         reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    .               reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    IMPORT          reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    ID              reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    RETURN          reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    DEL             reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    FOR             reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    SKIP            reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    BREAK           reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    LET             reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    WHILE           reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    NAMESPACE       reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    CLASS           reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    FUNC            reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    PYTHON_CODE     reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    IF              reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    {               reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    <               reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    #               reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    (               reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    !               reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    +               reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    -               reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    *               reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    &               reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    [               reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    STRING          reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    FALSE           reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    TRUE            reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    FLOAT           reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    INT             reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    NULL            reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    $end            reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)
    }               reduce using rule 62 (variable_operation -> get_index EQ_ADD expression ; .)


state 239

    (55) variable_operation -> ID EQ_DIV expression ; .
    SANDBOX         reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    LIMPORT         reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    .               reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    IMPORT          reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    ID              reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    RETURN          reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    DEL             reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    FOR             reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    SKIP            reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    BREAK           reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    LET             reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    WHILE           reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    NAMESPACE       reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    CLASS           reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    FUNC            reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    PYTHON_CODE_EXEC reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    PYTHON_CODE     reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    IF              reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    {               reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    <               reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    #               reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    (               reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    !               reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    +               reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    -               reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    *               reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    &               reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    [               reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    STRING          reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    FALSE           reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    TRUE            reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    FLOAT           reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    INT             reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    NULL            reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    $end            reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)
    }               reduce using rule 55 (variable_operation -> ID EQ_DIV expression ; .)


state 240

    (57) variable_operation -> ID EQ_MOD expression ; .
    SANDBOX         reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    LIMPORT         reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    .               reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    IMPORT          reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    ID              reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    RETURN          reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    DEL             reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    FOR             reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    SKIP            reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    BREAK           reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    LET             reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    WHILE           reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    NAMESPACE       reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    CLASS           reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    FUNC            reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    PYTHON_CODE     reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    IF              reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    {               reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    <               reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    #               reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    (               reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    !               reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    +               reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    -               reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    *               reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    &               reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    [               reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    STRING          reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    FALSE           reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    TRUE            reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    FLOAT           reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    INT             reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    NULL            reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    $end            reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)
    }               reduce using rule 57 (variable_operation -> ID EQ_MOD expression ; .)


state 241

    (59) variable_operation -> ID EQ_MUL expression ; .
    SANDBOX         reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    LIMPORT         reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    .               reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    IMPORT          reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    ID              reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    RETURN          reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    DEL             reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    FOR             reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    SKIP            reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    BREAK           reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    LET             reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    WHILE           reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    NAMESPACE       reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    CLASS           reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    FUNC            reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    PYTHON_CODE_EXEC reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    PYTHON_CODE     reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    IF              reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    {               reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    <               reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    #               reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    (               reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    !               reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    +               reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    -               reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    *               reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    &               reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    [               reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    STRING          reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    FALSE           reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    TRUE            reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    FLOAT           reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    INT             reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    NULL            reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    $end            reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)
    }               reduce using rule 59 (variable_operation -> ID EQ_MUL expression ; .)


state 242

    (61) variable_operation -> ID EQ_SUB expression ; .
    SANDBOX         reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    LIMPORT         reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    .               reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    IMPORT          reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    ID              reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    RETURN          reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    DEL             reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    FOR             reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    SKIP            reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    BREAK           reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    LET             reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    WHILE           reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    NAMESPACE       reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    CLASS           reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    FUNC            reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    PYTHON_CODE_EXEC reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    PYTHON_CODE     reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    IF              reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    {               reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    <               reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    #               reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    (               reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    !               reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    +               reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    -               reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    *               reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    &               reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    [               reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    STRING          reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    FALSE           reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    TRUE            reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    FLOAT           reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    INT             reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    NULL            reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    $end            reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)
    }               reduce using rule 61 (variable_operation -> ID EQ_SUB expression ; .)


state 243

    (63) variable_operation -> ID EQ_ADD expression ; .
    SANDBOX         reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    LIMPORT         reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    .               reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    IMPORT          reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    ID              reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    RETURN          reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    DEL             reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    FOR             reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    SKIP            reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    BREAK           reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    LET             reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    WHILE           reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    NAMESPACE       reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    CLASS           reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    FUNC            reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    PYTHON_CODE     reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    IF              reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    {               reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    <               reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    #               reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    (               reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    !               reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    +               reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    -               reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    *               reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    &               reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    [               reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    STRING          reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    FALSE           reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    TRUE            reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    FLOAT           reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    INT             reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    NULL            reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    $end            reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)
    }               reduce using rule 63 (variable_operation -> ID EQ_ADD expression ; .)


state 244

    (45) for_loop -> FOR expression IN expression . { program }
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    {               shift and go to state 272
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 245

    (51) variable_assignment -> LET get_index = expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 273
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 246

    (52) variable_assignment -> LET ID : ID . = expression ;
    =               shift and go to state 274


state 247

    (53) variable_assignment -> LET ID = expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 275
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 248

    (46) while_loop -> WHILE ( expression ) . { program }
    {               shift and go to state 276


state 249

    (123) items -> expression , expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ,               reduce using rule 123 (items -> expression , expression .)
    )               reduce using rule 123 (items -> expression , expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 250

    (120) _numpy -> ( expression , ) .
    ^               reduce using rule 120 (_numpy -> ( expression , ) .)
    [               reduce using rule 120 (_numpy -> ( expression , ) .)
    COLON_COLON     reduce using rule 120 (_numpy -> ( expression , ) .)
    (               reduce using rule 120 (_numpy -> ( expression , ) .)
    >               reduce using rule 120 (_numpy -> ( expression , ) .)
    <               reduce using rule 120 (_numpy -> ( expression , ) .)
    &               reduce using rule 120 (_numpy -> ( expression , ) .)
    |               reduce using rule 120 (_numpy -> ( expression , ) .)
    EQ_GREATER      reduce using rule 120 (_numpy -> ( expression , ) .)
    EQ_LESS         reduce using rule 120 (_numpy -> ( expression , ) .)
    NOT_EQEQ        reduce using rule 120 (_numpy -> ( expression , ) .)
    EQEQ            reduce using rule 120 (_numpy -> ( expression , ) .)
    %               reduce using rule 120 (_numpy -> ( expression , ) .)
    *               reduce using rule 120 (_numpy -> ( expression , ) .)
    /               reduce using rule 120 (_numpy -> ( expression , ) .)
    -               reduce using rule 120 (_numpy -> ( expression , ) .)
    +               reduce using rule 120 (_numpy -> ( expression , ) .)
    :               reduce using rule 120 (_numpy -> ( expression , ) .)
    ,               reduce using rule 120 (_numpy -> ( expression , ) .)
    }               reduce using rule 120 (_numpy -> ( expression , ) .)
    ;               reduce using rule 120 (_numpy -> ( expression , ) .)
    IN              reduce using rule 120 (_numpy -> ( expression , ) .)
    )               reduce using rule 120 (_numpy -> ( expression , ) .)
    ]               reduce using rule 120 (_numpy -> ( expression , ) .)
    EQ_DIV          reduce using rule 120 (_numpy -> ( expression , ) .)
    EQ_MOD          reduce using rule 120 (_numpy -> ( expression , ) .)
    EQ_MUL          reduce using rule 120 (_numpy -> ( expression , ) .)
    EQ_SUB          reduce using rule 120 (_numpy -> ( expression , ) .)
    EQ_ADD          reduce using rule 120 (_numpy -> ( expression , ) .)
    =               reduce using rule 120 (_numpy -> ( expression , ) .)
    ?               reduce using rule 120 (_numpy -> ( expression , ) .)
    {               reduce using rule 120 (_numpy -> ( expression , ) .)
    SANDBOX         reduce using rule 120 (_numpy -> ( expression , ) .)
    LIMPORT         reduce using rule 120 (_numpy -> ( expression , ) .)
    .               reduce using rule 120 (_numpy -> ( expression , ) .)
    IMPORT          reduce using rule 120 (_numpy -> ( expression , ) .)
    ID              reduce using rule 120 (_numpy -> ( expression , ) .)
    RETURN          reduce using rule 120 (_numpy -> ( expression , ) .)
    DEL             reduce using rule 120 (_numpy -> ( expression , ) .)
    FOR             reduce using rule 120 (_numpy -> ( expression , ) .)
    SKIP            reduce using rule 120 (_numpy -> ( expression , ) .)
    BREAK           reduce using rule 120 (_numpy -> ( expression , ) .)
    LET             reduce using rule 120 (_numpy -> ( expression , ) .)
    WHILE           reduce using rule 120 (_numpy -> ( expression , ) .)
    NAMESPACE       reduce using rule 120 (_numpy -> ( expression , ) .)
    CLASS           reduce using rule 120 (_numpy -> ( expression , ) .)
    FUNC            reduce using rule 120 (_numpy -> ( expression , ) .)
    PYTHON_CODE_EXEC reduce using rule 120 (_numpy -> ( expression , ) .)
    PYTHON_CODE     reduce using rule 120 (_numpy -> ( expression , ) .)
    IF              reduce using rule 120 (_numpy -> ( expression , ) .)
    #               reduce using rule 120 (_numpy -> ( expression , ) .)
    !               reduce using rule 120 (_numpy -> ( expression , ) .)
    STRING          reduce using rule 120 (_numpy -> ( expression , ) .)
    FALSE           reduce using rule 120 (_numpy -> ( expression , ) .)
    TRUE            reduce using rule 120 (_numpy -> ( expression , ) .)
    FLOAT           reduce using rule 120 (_numpy -> ( expression , ) .)
    INT             reduce using rule 120 (_numpy -> ( expression , ) .)
    NULL            reduce using rule 120 (_numpy -> ( expression , ) .)
    $end            reduce using rule 120 (_numpy -> ( expression , ) .)


state 251

    (121) _numpy -> ( items , ) .
    ^               reduce using rule 121 (_numpy -> ( items , ) .)
    [               reduce using rule 121 (_numpy -> ( items , ) .)
    COLON_COLON     reduce using rule 121 (_numpy -> ( items , ) .)
    (               reduce using rule 121 (_numpy -> ( items , ) .)
    >               reduce using rule 121 (_numpy -> ( items , ) .)
    <               reduce using rule 121 (_numpy -> ( items , ) .)
    &               reduce using rule 121 (_numpy -> ( items , ) .)
    |               reduce using rule 121 (_numpy -> ( items , ) .)
    EQ_GREATER      reduce using rule 121 (_numpy -> ( items , ) .)
    EQ_LESS         reduce using rule 121 (_numpy -> ( items , ) .)
    NOT_EQEQ        reduce using rule 121 (_numpy -> ( items , ) .)
    EQEQ            reduce using rule 121 (_numpy -> ( items , ) .)
    %               reduce using rule 121 (_numpy -> ( items , ) .)
    *               reduce using rule 121 (_numpy -> ( items , ) .)
    /               reduce using rule 121 (_numpy -> ( items , ) .)
    -               reduce using rule 121 (_numpy -> ( items , ) .)
    +               reduce using rule 121 (_numpy -> ( items , ) .)
    :               reduce using rule 121 (_numpy -> ( items , ) .)
    ,               reduce using rule 121 (_numpy -> ( items , ) .)
    }               reduce using rule 121 (_numpy -> ( items , ) .)
    ;               reduce using rule 121 (_numpy -> ( items , ) .)
    IN              reduce using rule 121 (_numpy -> ( items , ) .)
    )               reduce using rule 121 (_numpy -> ( items , ) .)
    ]               reduce using rule 121 (_numpy -> ( items , ) .)
    EQ_DIV          reduce using rule 121 (_numpy -> ( items , ) .)
    EQ_MOD          reduce using rule 121 (_numpy -> ( items , ) .)
    EQ_MUL          reduce using rule 121 (_numpy -> ( items , ) .)
    EQ_SUB          reduce using rule 121 (_numpy -> ( items , ) .)
    EQ_ADD          reduce using rule 121 (_numpy -> ( items , ) .)
    =               reduce using rule 121 (_numpy -> ( items , ) .)
    ?               reduce using rule 121 (_numpy -> ( items , ) .)
    {               reduce using rule 121 (_numpy -> ( items , ) .)
    SANDBOX         reduce using rule 121 (_numpy -> ( items , ) .)
    LIMPORT         reduce using rule 121 (_numpy -> ( items , ) .)
    .               reduce using rule 121 (_numpy -> ( items , ) .)
    IMPORT          reduce using rule 121 (_numpy -> ( items , ) .)
    ID              reduce using rule 121 (_numpy -> ( items , ) .)
    RETURN          reduce using rule 121 (_numpy -> ( items , ) .)
    DEL             reduce using rule 121 (_numpy -> ( items , ) .)
    FOR             reduce using rule 121 (_numpy -> ( items , ) .)
    SKIP            reduce using rule 121 (_numpy -> ( items , ) .)
    BREAK           reduce using rule 121 (_numpy -> ( items , ) .)
    LET             reduce using rule 121 (_numpy -> ( items , ) .)
    WHILE           reduce using rule 121 (_numpy -> ( items , ) .)
    NAMESPACE       reduce using rule 121 (_numpy -> ( items , ) .)
    CLASS           reduce using rule 121 (_numpy -> ( items , ) .)
    FUNC            reduce using rule 121 (_numpy -> ( items , ) .)
    PYTHON_CODE_EXEC reduce using rule 121 (_numpy -> ( items , ) .)
    PYTHON_CODE     reduce using rule 121 (_numpy -> ( items , ) .)
    IF              reduce using rule 121 (_numpy -> ( items , ) .)
    #               reduce using rule 121 (_numpy -> ( items , ) .)
    !               reduce using rule 121 (_numpy -> ( items , ) .)
    STRING          reduce using rule 121 (_numpy -> ( items , ) .)
    FALSE           reduce using rule 121 (_numpy -> ( items , ) .)
    TRUE            reduce using rule 121 (_numpy -> ( items , ) .)
    FLOAT           reduce using rule 121 (_numpy -> ( items , ) .)
    INT             reduce using rule 121 (_numpy -> ( items , ) .)
    NULL            reduce using rule 121 (_numpy -> ( items , ) .)
    $end            reduce using rule 121 (_numpy -> ( items , ) .)


state 252

    (124) items -> items , expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ,               reduce using rule 124 (items -> items , expression .)
    )               reduce using rule 124 (items -> items , expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 253

    (73) else_statement -> ELSE { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               shift and go to state 277
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    SKIP            shift and go to state 30
    BREAK           shift and go to state 31
    LET             shift and go to state 32
    WHILE           shift and go to state 34
    NAMESPACE       shift and go to state 39
    CLASS           shift and go to state 40
    FUNC            shift and go to state 41
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44
    IF              shift and go to state 45
    {               shift and go to state 20
    <               shift and go to state 46
    #               shift and go to state 47
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68

    statement                      shift and go to state 69
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 254

    (72) else_if_statement -> ELSE IF ( . expression ) { program }
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 278
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 255

    (64) class_attribute_assignment -> class_attribute = expression ; .
    SANDBOX         reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    LIMPORT         reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    .               reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    IMPORT          reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    ID              reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    RETURN          reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    DEL             reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    FOR             reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    SKIP            reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    BREAK           reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    LET             reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    WHILE           reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    NAMESPACE       reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    CLASS           reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    FUNC            reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    PYTHON_CODE     reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    IF              reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    {               reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    <               reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    #               reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    (               reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    !               reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    +               reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    -               reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    *               reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    &               reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    [               reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    STRING          reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    FALSE           reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    TRUE            reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    FLOAT           reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    INT             reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    NULL            reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    $end            reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)
    }               reduce using rule 64 (class_attribute_assignment -> class_attribute = expression ; .)


state 256

    (43) class_declaration -> NAMESPACE ID { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               shift and go to state 279
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    SKIP            shift and go to state 30
    BREAK           shift and go to state 31
    LET             shift and go to state 32
    WHILE           shift and go to state 34
    NAMESPACE       shift and go to state 39
    CLASS           shift and go to state 40
    FUNC            shift and go to state 41
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44
    IF              shift and go to state 45
    {               shift and go to state 20
    <               shift and go to state 46
    #               shift and go to state 47
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68

    statement                      shift and go to state 69
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 257

    (44) class_declaration -> CLASS ID { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               shift and go to state 280
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    SKIP            shift and go to state 30
    BREAK           shift and go to state 31
    LET             shift and go to state 32
    WHILE           shift and go to state 34
    NAMESPACE       shift and go to state 39
    CLASS           shift and go to state 40
    FUNC            shift and go to state 41
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44
    IF              shift and go to state 45
    {               shift and go to state 20
    <               shift and go to state 46
    #               shift and go to state 47
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68

    statement                      shift and go to state 69
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 258

    (36) function_declaration -> FUNC ID ( empty . ) { program } TARROW expression
    )               shift and go to state 281


state 259

    (39) function_declaration -> FUNC ID ( function_arguments . ) { program } TARROW expression
    )               shift and go to state 282


state 260

    (37) function_declaration -> FUNC ID COLON_COLON ID . ( empty ) { program } TARROW expression
    (38) function_declaration -> FUNC ID COLON_COLON ID . ( function_arguments ) { program } TARROW expression
    (               shift and go to state 283


state 261

    (116) _list -> [ positional_args , ] .
    ^               reduce using rule 116 (_list -> [ positional_args , ] .)
    [               reduce using rule 116 (_list -> [ positional_args , ] .)
    COLON_COLON     reduce using rule 116 (_list -> [ positional_args , ] .)
    (               reduce using rule 116 (_list -> [ positional_args , ] .)
    >               reduce using rule 116 (_list -> [ positional_args , ] .)
    <               reduce using rule 116 (_list -> [ positional_args , ] .)
    &               reduce using rule 116 (_list -> [ positional_args , ] .)
    |               reduce using rule 116 (_list -> [ positional_args , ] .)
    EQ_GREATER      reduce using rule 116 (_list -> [ positional_args , ] .)
    EQ_LESS         reduce using rule 116 (_list -> [ positional_args , ] .)
    NOT_EQEQ        reduce using rule 116 (_list -> [ positional_args , ] .)
    EQEQ            reduce using rule 116 (_list -> [ positional_args , ] .)
    %               reduce using rule 116 (_list -> [ positional_args , ] .)
    *               reduce using rule 116 (_list -> [ positional_args , ] .)
    /               reduce using rule 116 (_list -> [ positional_args , ] .)
    -               reduce using rule 116 (_list -> [ positional_args , ] .)
    +               reduce using rule 116 (_list -> [ positional_args , ] .)
    :               reduce using rule 116 (_list -> [ positional_args , ] .)
    ,               reduce using rule 116 (_list -> [ positional_args , ] .)
    }               reduce using rule 116 (_list -> [ positional_args , ] .)
    ;               reduce using rule 116 (_list -> [ positional_args , ] .)
    IN              reduce using rule 116 (_list -> [ positional_args , ] .)
    )               reduce using rule 116 (_list -> [ positional_args , ] .)
    ]               reduce using rule 116 (_list -> [ positional_args , ] .)
    EQ_DIV          reduce using rule 116 (_list -> [ positional_args , ] .)
    EQ_MOD          reduce using rule 116 (_list -> [ positional_args , ] .)
    EQ_MUL          reduce using rule 116 (_list -> [ positional_args , ] .)
    EQ_SUB          reduce using rule 116 (_list -> [ positional_args , ] .)
    EQ_ADD          reduce using rule 116 (_list -> [ positional_args , ] .)
    =               reduce using rule 116 (_list -> [ positional_args , ] .)
    ?               reduce using rule 116 (_list -> [ positional_args , ] .)
    {               reduce using rule 116 (_list -> [ positional_args , ] .)
    SANDBOX         reduce using rule 116 (_list -> [ positional_args , ] .)
    LIMPORT         reduce using rule 116 (_list -> [ positional_args , ] .)
    .               reduce using rule 116 (_list -> [ positional_args , ] .)
    IMPORT          reduce using rule 116 (_list -> [ positional_args , ] .)
    ID              reduce using rule 116 (_list -> [ positional_args , ] .)
    RETURN          reduce using rule 116 (_list -> [ positional_args , ] .)
    DEL             reduce using rule 116 (_list -> [ positional_args , ] .)
    FOR             reduce using rule 116 (_list -> [ positional_args , ] .)
    SKIP            reduce using rule 116 (_list -> [ positional_args , ] .)
    BREAK           reduce using rule 116 (_list -> [ positional_args , ] .)
    LET             reduce using rule 116 (_list -> [ positional_args , ] .)
    WHILE           reduce using rule 116 (_list -> [ positional_args , ] .)
    NAMESPACE       reduce using rule 116 (_list -> [ positional_args , ] .)
    CLASS           reduce using rule 116 (_list -> [ positional_args , ] .)
    FUNC            reduce using rule 116 (_list -> [ positional_args , ] .)
    PYTHON_CODE_EXEC reduce using rule 116 (_list -> [ positional_args , ] .)
    PYTHON_CODE     reduce using rule 116 (_list -> [ positional_args , ] .)
    IF              reduce using rule 116 (_list -> [ positional_args , ] .)
    #               reduce using rule 116 (_list -> [ positional_args , ] .)
    !               reduce using rule 116 (_list -> [ positional_args , ] .)
    STRING          reduce using rule 116 (_list -> [ positional_args , ] .)
    FALSE           reduce using rule 116 (_list -> [ positional_args , ] .)
    TRUE            reduce using rule 116 (_list -> [ positional_args , ] .)
    FLOAT           reduce using rule 116 (_list -> [ positional_args , ] .)
    INT             reduce using rule 116 (_list -> [ positional_args , ] .)
    NULL            reduce using rule 116 (_list -> [ positional_args , ] .)
    $end            reduce using rule 116 (_list -> [ positional_args , ] .)


state 262

    (69) if_statement -> IF ( expression ) . { program }
    {               shift and go to state 284


state 263

    (28) function_call -> < ID > expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               reduce using rule 28 (function_call -> < ID > expression .)
    ^               reduce using rule 28 (function_call -> < ID > expression .)
    [               reduce using rule 28 (function_call -> < ID > expression .)
    (               reduce using rule 28 (function_call -> < ID > expression .)
    >               reduce using rule 28 (function_call -> < ID > expression .)
    <               reduce using rule 28 (function_call -> < ID > expression .)
    &               reduce using rule 28 (function_call -> < ID > expression .)
    |               reduce using rule 28 (function_call -> < ID > expression .)
    EQ_GREATER      reduce using rule 28 (function_call -> < ID > expression .)
    EQ_LESS         reduce using rule 28 (function_call -> < ID > expression .)
    NOT_EQEQ        reduce using rule 28 (function_call -> < ID > expression .)
    EQEQ            reduce using rule 28 (function_call -> < ID > expression .)
    :               reduce using rule 28 (function_call -> < ID > expression .)
    ,               reduce using rule 28 (function_call -> < ID > expression .)
    }               reduce using rule 28 (function_call -> < ID > expression .)
    IN              reduce using rule 28 (function_call -> < ID > expression .)
    )               reduce using rule 28 (function_call -> < ID > expression .)
    ]               reduce using rule 28 (function_call -> < ID > expression .)
    EQ_DIV          reduce using rule 28 (function_call -> < ID > expression .)
    EQ_MOD          reduce using rule 28 (function_call -> < ID > expression .)
    EQ_MUL          reduce using rule 28 (function_call -> < ID > expression .)
    EQ_SUB          reduce using rule 28 (function_call -> < ID > expression .)
    EQ_ADD          reduce using rule 28 (function_call -> < ID > expression .)
    =               reduce using rule 28 (function_call -> < ID > expression .)
    ?               reduce using rule 28 (function_call -> < ID > expression .)
    {               reduce using rule 28 (function_call -> < ID > expression .)
    SANDBOX         reduce using rule 28 (function_call -> < ID > expression .)
    LIMPORT         reduce using rule 28 (function_call -> < ID > expression .)
    .               reduce using rule 28 (function_call -> < ID > expression .)
    IMPORT          reduce using rule 28 (function_call -> < ID > expression .)
    ID              reduce using rule 28 (function_call -> < ID > expression .)
    RETURN          reduce using rule 28 (function_call -> < ID > expression .)
    DEL             reduce using rule 28 (function_call -> < ID > expression .)
    FOR             reduce using rule 28 (function_call -> < ID > expression .)
    SKIP            reduce using rule 28 (function_call -> < ID > expression .)
    BREAK           reduce using rule 28 (function_call -> < ID > expression .)
    LET             reduce using rule 28 (function_call -> < ID > expression .)
    WHILE           reduce using rule 28 (function_call -> < ID > expression .)
    NAMESPACE       reduce using rule 28 (function_call -> < ID > expression .)
    CLASS           reduce using rule 28 (function_call -> < ID > expression .)
    FUNC            reduce using rule 28 (function_call -> < ID > expression .)
    PYTHON_CODE_EXEC reduce using rule 28 (function_call -> < ID > expression .)
    PYTHON_CODE     reduce using rule 28 (function_call -> < ID > expression .)
    IF              reduce using rule 28 (function_call -> < ID > expression .)
    #               reduce using rule 28 (function_call -> < ID > expression .)
    !               reduce using rule 28 (function_call -> < ID > expression .)
    STRING          reduce using rule 28 (function_call -> < ID > expression .)
    FALSE           reduce using rule 28 (function_call -> < ID > expression .)
    TRUE            reduce using rule 28 (function_call -> < ID > expression .)
    FLOAT           reduce using rule 28 (function_call -> < ID > expression .)
    INT             reduce using rule 28 (function_call -> < ID > expression .)
    NULL            reduce using rule 28 (function_call -> < ID > expression .)
    $end            reduce using rule 28 (function_call -> < ID > expression .)
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89


state 264

    (31) function_call -> # DEFINE expression ? . ID
    ID              shift and go to state 285


state 265

    (134) assoc_array_items -> assoc_array_items , expression : . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 286
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 266

    (27) function_call -> expression ( empty ) FARROW . { program }
    {               shift and go to state 287


state 267

    (33) function_call -> expression ( function_arguments ) FARROW . { program }
    {               shift and go to state 288


state 268

    (50) kwargs -> kwargs , id . = expression
    =               shift and go to state 289


state 269

    (131) id -> ID .
    =               reduce using rule 131 (id -> ID .)


state 270

    (41) function_arguments -> positional_args , kwargs .
    (50) kwargs -> kwargs . , id = expression
    )               reduce using rule 41 (function_arguments -> positional_args , kwargs .)
    ,               shift and go to state 231


state 271

    (49) kwargs -> ID = expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ,               reduce using rule 49 (kwargs -> ID = expression .)
    )               reduce using rule 49 (kwargs -> ID = expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 272

    (45) for_loop -> FOR expression IN expression { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               reduce using rule 137 (empty -> .)
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    <               shift and go to state 46
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59

    expression                     shift and go to state 22
    program                        shift and go to state 290
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 273

    (51) variable_assignment -> LET get_index = expression ; .
    SANDBOX         reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    LIMPORT         reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    .               reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    IMPORT          reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    ID              reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    RETURN          reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    DEL             reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    FOR             reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    SKIP            reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    BREAK           reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    LET             reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    WHILE           reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    NAMESPACE       reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    CLASS           reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    FUNC            reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    PYTHON_CODE     reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    IF              reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    {               reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    <               reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    #               reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    (               reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    !               reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    +               reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    -               reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    *               reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    &               reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    [               reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    STRING          reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    FALSE           reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    TRUE            reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    FLOAT           reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    INT             reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    NULL            reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    $end            reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)
    }               reduce using rule 51 (variable_assignment -> LET get_index = expression ; .)


state 274

    (52) variable_assignment -> LET ID : ID = . expression ;
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 291
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 275

    (53) variable_assignment -> LET ID = expression ; .
    SANDBOX         reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    LIMPORT         reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    .               reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    IMPORT          reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    ID              reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    RETURN          reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    DEL             reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    FOR             reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    SKIP            reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    BREAK           reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    LET             reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    WHILE           reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    NAMESPACE       reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    CLASS           reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    FUNC            reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    PYTHON_CODE     reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    IF              reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    {               reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    <               reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    #               reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    (               reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    !               reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    +               reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    -               reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    *               reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    &               reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    [               reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    STRING          reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    FALSE           reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    TRUE            reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    FLOAT           reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    INT             reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    NULL            reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    $end            reduce using rule 53 (variable_assignment -> LET ID = expression ; .)
    }               reduce using rule 53 (variable_assignment -> LET ID = expression ; .)


state 276

    (46) while_loop -> WHILE ( expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               reduce using rule 137 (empty -> .)
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    <               shift and go to state 46
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59

    expression                     shift and go to state 22
    program                        shift and go to state 292
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 277

    (73) else_statement -> ELSE { program } .
    SANDBOX         reduce using rule 73 (else_statement -> ELSE { program } .)
    LIMPORT         reduce using rule 73 (else_statement -> ELSE { program } .)
    .               reduce using rule 73 (else_statement -> ELSE { program } .)
    IMPORT          reduce using rule 73 (else_statement -> ELSE { program } .)
    ID              reduce using rule 73 (else_statement -> ELSE { program } .)
    RETURN          reduce using rule 73 (else_statement -> ELSE { program } .)
    DEL             reduce using rule 73 (else_statement -> ELSE { program } .)
    FOR             reduce using rule 73 (else_statement -> ELSE { program } .)
    SKIP            reduce using rule 73 (else_statement -> ELSE { program } .)
    BREAK           reduce using rule 73 (else_statement -> ELSE { program } .)
    LET             reduce using rule 73 (else_statement -> ELSE { program } .)
    WHILE           reduce using rule 73 (else_statement -> ELSE { program } .)
    NAMESPACE       reduce using rule 73 (else_statement -> ELSE { program } .)
    CLASS           reduce using rule 73 (else_statement -> ELSE { program } .)
    FUNC            reduce using rule 73 (else_statement -> ELSE { program } .)
    PYTHON_CODE_EXEC reduce using rule 73 (else_statement -> ELSE { program } .)
    PYTHON_CODE     reduce using rule 73 (else_statement -> ELSE { program } .)
    IF              reduce using rule 73 (else_statement -> ELSE { program } .)
    {               reduce using rule 73 (else_statement -> ELSE { program } .)
    <               reduce using rule 73 (else_statement -> ELSE { program } .)
    #               reduce using rule 73 (else_statement -> ELSE { program } .)
    (               reduce using rule 73 (else_statement -> ELSE { program } .)
    !               reduce using rule 73 (else_statement -> ELSE { program } .)
    +               reduce using rule 73 (else_statement -> ELSE { program } .)
    -               reduce using rule 73 (else_statement -> ELSE { program } .)
    *               reduce using rule 73 (else_statement -> ELSE { program } .)
    &               reduce using rule 73 (else_statement -> ELSE { program } .)
    [               reduce using rule 73 (else_statement -> ELSE { program } .)
    STRING          reduce using rule 73 (else_statement -> ELSE { program } .)
    FALSE           reduce using rule 73 (else_statement -> ELSE { program } .)
    TRUE            reduce using rule 73 (else_statement -> ELSE { program } .)
    FLOAT           reduce using rule 73 (else_statement -> ELSE { program } .)
    INT             reduce using rule 73 (else_statement -> ELSE { program } .)
    NULL            reduce using rule 73 (else_statement -> ELSE { program } .)
    $end            reduce using rule 73 (else_statement -> ELSE { program } .)
    }               reduce using rule 73 (else_statement -> ELSE { program } .)


state 278

    (72) else_if_statement -> ELSE IF ( expression . ) { program }
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    )               shift and go to state 293
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 279

    (43) class_declaration -> NAMESPACE ID { program } .
    SANDBOX         reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    LIMPORT         reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    .               reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    IMPORT          reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    ID              reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    RETURN          reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    DEL             reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    FOR             reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    SKIP            reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    BREAK           reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    LET             reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    WHILE           reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    NAMESPACE       reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    CLASS           reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    FUNC            reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    PYTHON_CODE_EXEC reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    PYTHON_CODE     reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    IF              reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    {               reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    <               reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    #               reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    (               reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    !               reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    +               reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    -               reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    *               reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    &               reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    [               reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    STRING          reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    FALSE           reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    TRUE            reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    FLOAT           reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    INT             reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    NULL            reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    $end            reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)
    }               reduce using rule 43 (class_declaration -> NAMESPACE ID { program } .)


state 280

    (44) class_declaration -> CLASS ID { program } .
    SANDBOX         reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    LIMPORT         reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    .               reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    IMPORT          reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    ID              reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    RETURN          reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    DEL             reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    FOR             reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    SKIP            reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    BREAK           reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    LET             reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    WHILE           reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    NAMESPACE       reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    CLASS           reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    FUNC            reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    PYTHON_CODE_EXEC reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    PYTHON_CODE     reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    IF              reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    {               reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    <               reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    #               reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    (               reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    !               reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    +               reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    -               reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    *               reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    &               reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    [               reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    STRING          reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    FALSE           reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    TRUE            reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    FLOAT           reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    INT             reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    NULL            reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    $end            reduce using rule 44 (class_declaration -> CLASS ID { program } .)
    }               reduce using rule 44 (class_declaration -> CLASS ID { program } .)


state 281

    (36) function_declaration -> FUNC ID ( empty ) . { program } TARROW expression
    {               shift and go to state 294


state 282

    (39) function_declaration -> FUNC ID ( function_arguments ) . { program } TARROW expression
    {               shift and go to state 295


state 283

    (37) function_declaration -> FUNC ID COLON_COLON ID ( . empty ) { program } TARROW expression
    (38) function_declaration -> FUNC ID COLON_COLON ID ( . function_arguments ) { program } TARROW expression
    (137) empty -> .
    (40) function_arguments -> . kwargs
    (41) function_arguments -> . positional_args , kwargs
    (42) function_arguments -> . positional_args
    (49) kwargs -> . ID = expression
    (50) kwargs -> . kwargs , id = expression
    (47) positional_args -> . expression
    (48) positional_args -> . positional_args , expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    )               reduce using rule 137 (empty -> .)
    ID              shift and go to state 168
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    empty                          shift and go to state 296
    expression                     shift and go to state 142
    function_arguments             shift and go to state 297
    kwargs                         shift and go to state 166
    positional_args                shift and go to state 167
    id                             shift and go to state 52
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 284

    (69) if_statement -> IF ( expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               reduce using rule 137 (empty -> .)
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    <               shift and go to state 46
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59

    expression                     shift and go to state 22
    program                        shift and go to state 298
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 285

    (31) function_call -> # DEFINE expression ? ID .
    ;               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    ^               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    [               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    COLON_COLON     reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    (               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    >               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    <               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    &               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    |               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    EQ_GREATER      reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    EQ_LESS         reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    NOT_EQEQ        reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    EQEQ            reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    %               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    *               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    /               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    -               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    +               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    :               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    ,               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    }               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    IN              reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    )               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    ]               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    EQ_DIV          reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    EQ_MOD          reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    EQ_MUL          reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    EQ_SUB          reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    EQ_ADD          reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    =               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    ?               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    {               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    SANDBOX         reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    LIMPORT         reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    .               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    IMPORT          reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    ID              reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    RETURN          reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    DEL             reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    FOR             reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    SKIP            reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    BREAK           reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    LET             reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    WHILE           reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    NAMESPACE       reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    CLASS           reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    FUNC            reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    PYTHON_CODE_EXEC reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    PYTHON_CODE     reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    IF              reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    #               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    !               reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    STRING          reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    FALSE           reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    TRUE            reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    FLOAT           reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    INT             reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    NULL            reduce using rule 31 (function_call -> # DEFINE expression ? ID .)
    $end            reduce using rule 31 (function_call -> # DEFINE expression ? ID .)


state 286

    (134) assoc_array_items -> assoc_array_items , expression : expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    }               reduce using rule 134 (assoc_array_items -> assoc_array_items , expression : expression .)
    ,               reduce using rule 134 (assoc_array_items -> assoc_array_items , expression : expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 287

    (27) function_call -> expression ( empty ) FARROW { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               reduce using rule 137 (empty -> .)
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    <               shift and go to state 46
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59

    expression                     shift and go to state 22
    empty                          shift and go to state 2
    program                        shift and go to state 299
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 288

    (33) function_call -> expression ( function_arguments ) FARROW { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               reduce using rule 137 (empty -> .)
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    <               shift and go to state 46
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59

    expression                     shift and go to state 22
    program                        shift and go to state 300
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 289

    (50) kwargs -> kwargs , id = . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    id                             shift and go to state 52
    expression                     shift and go to state 301
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 290

    (45) for_loop -> FOR expression IN expression { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               shift and go to state 302
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    SKIP            shift and go to state 30
    BREAK           shift and go to state 31
    LET             shift and go to state 32
    WHILE           shift and go to state 34
    NAMESPACE       shift and go to state 39
    CLASS           shift and go to state 40
    FUNC            shift and go to state 41
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44
    IF              shift and go to state 45
    {               shift and go to state 20
    <               shift and go to state 46
    #               shift and go to state 47
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68

    expression                     shift and go to state 22
    statement                      shift and go to state 69
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 291

    (52) variable_assignment -> LET ID : ID = expression . ;
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ;               shift and go to state 303
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 292

    (46) while_loop -> WHILE ( expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               shift and go to state 304
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    SKIP            shift and go to state 30
    BREAK           shift and go to state 31
    LET             shift and go to state 32
    WHILE           shift and go to state 34
    NAMESPACE       shift and go to state 39
    CLASS           shift and go to state 40
    FUNC            shift and go to state 41
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44
    IF              shift and go to state 45
    {               shift and go to state 20
    <               shift and go to state 46
    #               shift and go to state 47
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68

    expression                     shift and go to state 22
    statement                      shift and go to state 69
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 293

    (72) else_if_statement -> ELSE IF ( expression ) . { program }
    {               shift and go to state 305


state 294

    (36) function_declaration -> FUNC ID ( empty ) { . program } TARROW expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               reduce using rule 137 (empty -> .)
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    <               shift and go to state 46
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59

    empty                          shift and go to state 2
    program                        shift and go to state 306
    expression                     shift and go to state 22
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 295

    (39) function_declaration -> FUNC ID ( function_arguments ) { . program } TARROW expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               reduce using rule 137 (empty -> .)
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    <               shift and go to state 46
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59

    program                        shift and go to state 307
    expression                     shift and go to state 22
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 296

    (37) function_declaration -> FUNC ID COLON_COLON ID ( empty . ) { program } TARROW expression
    )               shift and go to state 308


state 297

    (38) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments . ) { program } TARROW expression
    )               shift and go to state 309


state 298

    (69) if_statement -> IF ( expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               shift and go to state 310
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    SKIP            shift and go to state 30
    BREAK           shift and go to state 31
    LET             shift and go to state 32
    WHILE           shift and go to state 34
    NAMESPACE       shift and go to state 39
    CLASS           shift and go to state 40
    FUNC            shift and go to state 41
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44
    IF              shift and go to state 45
    {               shift and go to state 20
    <               shift and go to state 46
    #               shift and go to state 47
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68

    expression                     shift and go to state 22
    statement                      shift and go to state 69
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 299

    (27) function_call -> expression ( empty ) FARROW { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               shift and go to state 311
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    SKIP            shift and go to state 30
    BREAK           shift and go to state 31
    LET             shift and go to state 32
    WHILE           shift and go to state 34
    NAMESPACE       shift and go to state 39
    CLASS           shift and go to state 40
    FUNC            shift and go to state 41
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44
    IF              shift and go to state 45
    {               shift and go to state 20
    <               shift and go to state 46
    #               shift and go to state 47
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68

    expression                     shift and go to state 22
    statement                      shift and go to state 69
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 300

    (33) function_call -> expression ( function_arguments ) FARROW { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               shift and go to state 312
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    SKIP            shift and go to state 30
    BREAK           shift and go to state 31
    LET             shift and go to state 32
    WHILE           shift and go to state 34
    NAMESPACE       shift and go to state 39
    CLASS           shift and go to state 40
    FUNC            shift and go to state 41
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44
    IF              shift and go to state 45
    {               shift and go to state 20
    <               shift and go to state 46
    #               shift and go to state 47
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68

    expression                     shift and go to state 22
    statement                      shift and go to state 69
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 301

    (50) kwargs -> kwargs , id = expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
    ,               reduce using rule 50 (kwargs -> kwargs , id = expression .)
    )               reduce using rule 50 (kwargs -> kwargs , id = expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 302

    (45) for_loop -> FOR expression IN expression { program } .
    SANDBOX         reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    LIMPORT         reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    .               reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    IMPORT          reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    ID              reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    RETURN          reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    DEL             reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    FOR             reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    SKIP            reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    BREAK           reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    LET             reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    WHILE           reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    NAMESPACE       reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    CLASS           reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    FUNC            reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    PYTHON_CODE_EXEC reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    PYTHON_CODE     reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    IF              reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    {               reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    <               reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    #               reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    (               reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    !               reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    +               reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    -               reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    *               reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    &               reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    [               reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    STRING          reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    FALSE           reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    TRUE            reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    FLOAT           reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    INT             reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    NULL            reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    $end            reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)
    }               reduce using rule 45 (for_loop -> FOR expression IN expression { program } .)


state 303

    (52) variable_assignment -> LET ID : ID = expression ; .
    SANDBOX         reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    LIMPORT         reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    .               reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    IMPORT          reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    ID              reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    RETURN          reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    DEL             reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    FOR             reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    SKIP            reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    BREAK           reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    LET             reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    WHILE           reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    NAMESPACE       reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    CLASS           reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    FUNC            reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    PYTHON_CODE     reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    IF              reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    {               reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    <               reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    #               reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    (               reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    !               reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    +               reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    -               reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    *               reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    &               reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    [               reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    STRING          reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    FALSE           reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    TRUE            reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    FLOAT           reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    INT             reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    NULL            reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    $end            reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)
    }               reduce using rule 52 (variable_assignment -> LET ID : ID = expression ; .)


state 304

    (46) while_loop -> WHILE ( expression ) { program } .
    SANDBOX         reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    LIMPORT         reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    .               reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    IMPORT          reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    ID              reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    RETURN          reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    DEL             reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    FOR             reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    SKIP            reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    BREAK           reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    LET             reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    WHILE           reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    NAMESPACE       reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    CLASS           reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    FUNC            reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    IF              reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    {               reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    <               reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    #               reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    (               reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    !               reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    +               reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    -               reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    *               reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    &               reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    [               reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    STRING          reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    FALSE           reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    TRUE            reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    FLOAT           reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    INT             reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    NULL            reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    $end            reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)
    }               reduce using rule 46 (while_loop -> WHILE ( expression ) { program } .)


state 305

    (72) else_if_statement -> ELSE IF ( expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               reduce using rule 137 (empty -> .)
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    <               shift and go to state 46
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59

    expression                     shift and go to state 22
    program                        shift and go to state 313
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 306

    (36) function_declaration -> FUNC ID ( empty ) { program . } TARROW expression
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               shift and go to state 314
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    SKIP            shift and go to state 30
    BREAK           shift and go to state 31
    LET             shift and go to state 32
    WHILE           shift and go to state 34
    NAMESPACE       shift and go to state 39
    CLASS           shift and go to state 40
    FUNC            shift and go to state 41
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44
    IF              shift and go to state 45
    {               shift and go to state 20
    <               shift and go to state 46
    #               shift and go to state 47
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68

    expression                     shift and go to state 22
    statement                      shift and go to state 69
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 307

    (39) function_declaration -> FUNC ID ( function_arguments ) { program . } TARROW expression
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               shift and go to state 315
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    SKIP            shift and go to state 30
    BREAK           shift and go to state 31
    LET             shift and go to state 32
    WHILE           shift and go to state 34
    NAMESPACE       shift and go to state 39
    CLASS           shift and go to state 40
    FUNC            shift and go to state 41
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44
    IF              shift and go to state 45
    {               shift and go to state 20
    <               shift and go to state 46
    #               shift and go to state 47
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68

    expression                     shift and go to state 22
    statement                      shift and go to state 69
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 308

    (37) function_declaration -> FUNC ID COLON_COLON ID ( empty ) . { program } TARROW expression
    {               shift and go to state 316


state 309

    (38) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) . { program } TARROW expression
    {               shift and go to state 317


state 310

    (69) if_statement -> IF ( expression ) { program } .
    ELSE            reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    SANDBOX         reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    LIMPORT         reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    .               reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    IMPORT          reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    ID              reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    RETURN          reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    DEL             reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    FOR             reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    SKIP            reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    BREAK           reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    LET             reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    WHILE           reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    NAMESPACE       reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    CLASS           reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    FUNC            reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    IF              reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    {               reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    <               reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    #               reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    (               reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    !               reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    +               reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    -               reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    *               reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    &               reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    [               reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    STRING          reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    FALSE           reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    TRUE            reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    FLOAT           reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    INT             reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    NULL            reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    $end            reduce using rule 69 (if_statement -> IF ( expression ) { program } .)
    }               reduce using rule 69 (if_statement -> IF ( expression ) { program } .)


state 311

    (27) function_call -> expression ( empty ) FARROW { program } .
    ;               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    ^               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    [               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    COLON_COLON     reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    (               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    >               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    <               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    &               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    |               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_GREATER      reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_LESS         reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    NOT_EQEQ        reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    EQEQ            reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    %               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    *               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    /               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    -               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    +               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    :               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    ,               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    }               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    IN              reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    )               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    ]               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_DIV          reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_MOD          reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_MUL          reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_SUB          reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_ADD          reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    =               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    ?               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    {               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    SANDBOX         reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    LIMPORT         reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    .               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    IMPORT          reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    ID              reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    RETURN          reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    DEL             reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    FOR             reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    SKIP            reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    BREAK           reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    LET             reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    WHILE           reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    NAMESPACE       reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    CLASS           reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    FUNC            reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    PYTHON_CODE_EXEC reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    PYTHON_CODE     reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    IF              reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    #               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    !               reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    STRING          reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    FALSE           reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    TRUE            reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    FLOAT           reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    INT             reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    NULL            reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)
    $end            reduce using rule 27 (function_call -> expression ( empty ) FARROW { program } .)


state 312

    (33) function_call -> expression ( function_arguments ) FARROW { program } .
    ;               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ^               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    [               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    COLON_COLON     reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    (               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    >               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    <               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    &               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    |               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_GREATER      reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_LESS         reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    NOT_EQEQ        reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQEQ            reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    %               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    *               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    /               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    -               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    +               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    :               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ,               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    }               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    IN              reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    )               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ]               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_DIV          reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_MOD          reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_MUL          reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_SUB          reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    EQ_ADD          reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    =               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ?               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    {               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    SANDBOX         reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    LIMPORT         reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    .               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    IMPORT          reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    ID              reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    RETURN          reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    DEL             reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FOR             reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    SKIP            reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    BREAK           reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    LET             reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    WHILE           reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    NAMESPACE       reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    CLASS           reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FUNC            reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    PYTHON_CODE_EXEC reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    PYTHON_CODE     reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    IF              reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    #               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    !               reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    STRING          reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FALSE           reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    TRUE            reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    FLOAT           reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    INT             reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    NULL            reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)
    $end            reduce using rule 33 (function_call -> expression ( function_arguments ) FARROW { program } .)


state 313

    (72) else_if_statement -> ELSE IF ( expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               shift and go to state 318
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    SKIP            shift and go to state 30
    BREAK           shift and go to state 31
    LET             shift and go to state 32
    WHILE           shift and go to state 34
    NAMESPACE       shift and go to state 39
    CLASS           shift and go to state 40
    FUNC            shift and go to state 41
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44
    IF              shift and go to state 45
    {               shift and go to state 20
    <               shift and go to state 46
    #               shift and go to state 47
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68

    expression                     shift and go to state 22
    statement                      shift and go to state 69
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 314

    (36) function_declaration -> FUNC ID ( empty ) { program } . TARROW expression
    TARROW          shift and go to state 319


state 315

    (39) function_declaration -> FUNC ID ( function_arguments ) { program } . TARROW expression
    TARROW          shift and go to state 320


state 316

    (37) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { . program } TARROW expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               reduce using rule 137 (empty -> .)
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    <               shift and go to state 46
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59

    empty                          shift and go to state 2
    program                        shift and go to state 321
    expression                     shift and go to state 22
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 317

    (38) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { . program } TARROW expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (137) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               reduce using rule 137 (empty -> .)
    SANDBOX         reduce using rule 137 (empty -> .)
    LIMPORT         reduce using rule 137 (empty -> .)
    .               reduce using rule 137 (empty -> .)
    IMPORT          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    DEL             reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    SKIP            reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    NAMESPACE       reduce using rule 137 (empty -> .)
    CLASS           reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 137 (empty -> .)
    PYTHON_CODE     reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    {               reduce using rule 137 (empty -> .)
    #               reduce using rule 137 (empty -> .)
    (               reduce using rule 137 (empty -> .)
    [               reduce using rule 137 (empty -> .)
    STRING          reduce using rule 137 (empty -> .)
    FALSE           reduce using rule 137 (empty -> .)
    TRUE            reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    NULL            reduce using rule 137 (empty -> .)
    <               shift and go to state 46
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59

    program                        shift and go to state 322
    expression                     shift and go to state 22
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 318

    (72) else_if_statement -> ELSE IF ( expression ) { program } .
    ELSE            reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    SANDBOX         reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    LIMPORT         reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    .               reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    IMPORT          reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    ID              reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    RETURN          reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    DEL             reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FOR             reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    SKIP            reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    BREAK           reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    LET             reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    WHILE           reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    NAMESPACE       reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    CLASS           reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FUNC            reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    IF              reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    {               reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    <               reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    #               reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    (               reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    !               reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    +               reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    -               reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    *               reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    &               reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    [               reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    STRING          reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FALSE           reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    TRUE            reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FLOAT           reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    INT             reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    NULL            reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    $end            reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)
    }               reduce using rule 72 (else_if_statement -> ELSE IF ( expression ) { program } .)


state 319

    (36) function_declaration -> FUNC ID ( empty ) { program } TARROW . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 323
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 320

    (39) function_declaration -> FUNC ID ( function_arguments ) { program } TARROW . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 324
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 321

    (37) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program . } TARROW expression
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               shift and go to state 325
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    SKIP            shift and go to state 30
    BREAK           shift and go to state 31
    LET             shift and go to state 32
    WHILE           shift and go to state 34
    NAMESPACE       shift and go to state 39
    CLASS           shift and go to state 40
    FUNC            shift and go to state 41
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44
    IF              shift and go to state 45
    {               shift and go to state 20
    <               shift and go to state 46
    #               shift and go to state 47
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68

    expression                     shift and go to state 22
    statement                      shift and go to state 69
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 322

    (38) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program . } TARROW expression
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (75) import_statement -> . . GLOBAL ;
    (76) import_statement -> . IMPORT expression ;
    (54) variable_operation -> . get_index EQ_DIV expression ;
    (55) variable_operation -> . ID EQ_DIV expression ;
    (56) variable_operation -> . get_index EQ_MOD expression ;
    (57) variable_operation -> . ID EQ_MOD expression ;
    (58) variable_operation -> . get_index EQ_MUL expression ;
    (59) variable_operation -> . ID EQ_MUL expression ;
    (60) variable_operation -> . get_index EQ_SUB expression ;
    (61) variable_operation -> . ID EQ_SUB expression ;
    (62) variable_operation -> . get_index EQ_ADD expression ;
    (63) variable_operation -> . ID EQ_ADD expression ;
    (25) return_statement -> . RETURN expression ;
    (74) delete_statement -> . DEL ID ;
    (45) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . SKIP ;
    (24) break_statement -> . BREAK ;
    (51) variable_assignment -> . LET get_index = expression ;
    (52) variable_assignment -> . LET ID : ID = expression ;
    (53) variable_assignment -> . LET ID = expression ;
    (22) python_code_statement -> . python_code ;
    (46) while_loop -> . WHILE ( expression ) { program }
    (65) conditional -> . if_statement else_statement
    (66) conditional -> . if_statement else_if_loop else_statement
    (67) conditional -> . if_statement else_if_loop
    (68) conditional -> . if_statement
    (64) class_attribute_assignment -> . class_attribute = expression ;
    (21) function_call_statement -> . function_call ;
    (43) class_declaration -> . NAMESPACE ID { program }
    (44) class_declaration -> . CLASS ID { program }
    (36) function_declaration -> . FUNC ID ( empty ) { program } TARROW expression
    (37) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (38) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (39) function_declaration -> . FUNC ID ( function_arguments ) { program } TARROW expression
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (69) if_statement -> . IF ( expression ) { program }
    (130) class_attribute -> . expression COLON_COLON ID
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    }               shift and go to state 326
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    FOR             shift and go to state 29
    SKIP            shift and go to state 30
    BREAK           shift and go to state 31
    LET             shift and go to state 32
    WHILE           shift and go to state 34
    NAMESPACE       shift and go to state 39
    CLASS           shift and go to state 40
    FUNC            shift and go to state 41
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44
    IF              shift and go to state 45
    {               shift and go to state 20
    <               shift and go to state 46
    #               shift and go to state 47
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68

    expression                     shift and go to state 22
    statement                      shift and go to state 69
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 33
    if_statement                   shift and go to state 36
    class_attribute                shift and go to state 37
    function_call                  shift and go to state 38
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57

state 323

    (36) function_declaration -> FUNC ID ( empty ) { program } TARROW expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    SANDBOX         reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    LIMPORT         reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    .               reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    IMPORT          reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    ID              reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    RETURN          reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    DEL             reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    FOR             reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    SKIP            reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    BREAK           reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    LET             reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    WHILE           reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    NAMESPACE       reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    CLASS           reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    FUNC            reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    PYTHON_CODE_EXEC reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    PYTHON_CODE     reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    IF              reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    {               reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    #               reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    !               reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    STRING          reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    FALSE           reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    TRUE            reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    FLOAT           reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    INT             reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    NULL            reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    $end            reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    }               reduce using rule 36 (function_declaration -> FUNC ID ( empty ) { program } TARROW expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 324

    (39) function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    SANDBOX         reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    LIMPORT         reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    .               reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    IMPORT          reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    ID              reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    RETURN          reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    DEL             reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    FOR             reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    SKIP            reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    BREAK           reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    LET             reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    WHILE           reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    NAMESPACE       reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    CLASS           reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    FUNC            reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    PYTHON_CODE_EXEC reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    PYTHON_CODE     reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    IF              reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    {               reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    #               reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    !               reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    STRING          reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    FALSE           reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    TRUE            reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    FLOAT           reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    INT             reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    NULL            reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    $end            reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    }               reduce using rule 39 (function_declaration -> FUNC ID ( function_arguments ) { program } TARROW expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 325

    (37) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } . TARROW expression
    TARROW          shift and go to state 327


state 326

    (38) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } . TARROW expression
    TARROW          shift and go to state 328


state 327

    (37) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 329
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 328

    (38) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW . expression
    (77) expression -> . assoc_array
    (78) expression -> . _numpy
    (79) expression -> . _list
    (80) expression -> . _tuple
    (81) expression -> . class_attribute
    (82) expression -> . id
    (83) expression -> . string
    (84) expression -> . bool
    (85) expression -> . float
    (86) expression -> . int
    (87) expression -> . null
    (88) expression -> . get_index
    (89) expression -> . function_call
    (90) expression -> . python_code
    (91) expression -> . ( expression )
    (92) expression -> . expression > expression
    (93) expression -> . expression < expression
    (94) expression -> . ! expression
    (95) expression -> . expression & expression
    (96) expression -> . expression | expression
    (97) expression -> . expression EQ_GREATER expression
    (98) expression -> . expression EQ_LESS expression
    (99) expression -> . expression NOT_EQEQ expression
    (100) expression -> . expression EQEQ expression
    (101) expression -> . expression % expression
    (102) expression -> . expression * expression
    (103) expression -> . expression / expression
    (104) expression -> . expression - expression
    (105) expression -> . expression + expression
    (106) expression -> . + expression
    (107) expression -> . - expression
    (108) expression -> . * ID
    (109) expression -> . & ID
    (110) expression -> . ID OF ID
    (132) assoc_array -> . { assoc_array_items }
    (118) _numpy -> . ( , )
    (119) _numpy -> . ( )
    (120) _numpy -> . ( expression , )
    (121) _numpy -> . ( items , )
    (122) _numpy -> . ( items )
    (116) _list -> . [ positional_args , ]
    (117) _list -> . [ positional_args ]
    (114) _tuple -> . { positional_args , }
    (115) _tuple -> . { positional_args }
    (130) class_attribute -> . expression COLON_COLON ID
    (131) id -> . ID
    (126) string -> . STRING
    (128) bool -> . FALSE
    (129) bool -> . TRUE
    (127) float -> . FLOAT
    (125) int -> . INT
    (111) null -> . NULL
    (112) get_index -> . expression ^ expression
    (113) get_index -> . expression [ expression ]
    (26) function_call -> . { program }
    (27) function_call -> . expression ( empty ) FARROW { program }
    (28) function_call -> . < ID > expression
    (29) function_call -> . ID TARROW ID
    (30) function_call -> . # DEPENDS expression
    (31) function_call -> . # DEFINE expression ? ID
    (32) function_call -> . expression ( empty )
    (33) function_call -> . expression ( function_arguments ) FARROW { program }
    (34) function_call -> . expression ( function_arguments )
    (135) python_code -> . PYTHON_CODE_EXEC
    (136) python_code -> . PYTHON_CODE
    (               shift and go to state 35
    !               shift and go to state 58
    +               shift and go to state 62
    -               shift and go to state 61
    *               shift and go to state 60
    &               shift and go to state 59
    ID              shift and go to state 86
    {               shift and go to state 71
    [               shift and go to state 42
    STRING          shift and go to state 63
    FALSE           shift and go to state 64
    TRUE            shift and go to state 65
    FLOAT           shift and go to state 66
    INT             shift and go to state 67
    NULL            shift and go to state 68
    <               shift and go to state 46
    #               shift and go to state 47
    PYTHON_CODE_EXEC shift and go to state 43
    PYTHON_CODE     shift and go to state 44

    expression                     shift and go to state 330
    assoc_array                    shift and go to state 48
    _numpy                         shift and go to state 49
    _list                          shift and go to state 50
    _tuple                         shift and go to state 51
    class_attribute                shift and go to state 82
    id                             shift and go to state 52
    string                         shift and go to state 53
    bool                           shift and go to state 54
    float                          shift and go to state 55
    int                            shift and go to state 56
    null                           shift and go to state 57
    get_index                      shift and go to state 83
    function_call                  shift and go to state 84
    python_code                    shift and go to state 85

state 329

    (37) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    SANDBOX         reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    LIMPORT         reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    .               reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    IMPORT          reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    ID              reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    RETURN          reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    DEL             reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FOR             reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    SKIP            reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    BREAK           reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    LET             reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    WHILE           reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    NAMESPACE       reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    CLASS           reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FUNC            reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    PYTHON_CODE_EXEC reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    PYTHON_CODE     reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    IF              reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    {               reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    #               reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    !               reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    STRING          reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FALSE           reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    TRUE            reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FLOAT           reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    INT             reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    NULL            reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    $end            reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    }               reduce using rule 37 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


state 330

    (38) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .
    (92) expression -> expression . > expression
    (93) expression -> expression . < expression
    (95) expression -> expression . & expression
    (96) expression -> expression . | expression
    (97) expression -> expression . EQ_GREATER expression
    (98) expression -> expression . EQ_LESS expression
    (99) expression -> expression . NOT_EQEQ expression
    (100) expression -> expression . EQEQ expression
    (101) expression -> expression . % expression
    (102) expression -> expression . * expression
    (103) expression -> expression . / expression
    (104) expression -> expression . - expression
    (105) expression -> expression . + expression
    (130) class_attribute -> expression . COLON_COLON ID
    (112) get_index -> expression . ^ expression
    (113) get_index -> expression . [ expression ]
    (27) function_call -> expression . ( empty ) FARROW { program }
    (32) function_call -> expression . ( empty )
    (33) function_call -> expression . ( function_arguments ) FARROW { program }
    (34) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    SANDBOX         reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    LIMPORT         reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    .               reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    IMPORT          reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    ID              reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    RETURN          reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    DEL             reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FOR             reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    SKIP            reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    BREAK           reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    LET             reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    WHILE           reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    NAMESPACE       reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    CLASS           reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FUNC            reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    PYTHON_CODE_EXEC reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    PYTHON_CODE     reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    IF              reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    {               reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    #               reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    !               reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    STRING          reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FALSE           reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    TRUE            reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FLOAT           reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    INT             reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    NULL            reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    $end            reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    }               reduce using rule 38 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    |               shift and go to state 94
    EQ_GREATER      shift and go to state 95
    EQ_LESS         shift and go to state 96
    NOT_EQEQ        shift and go to state 97
    EQEQ            shift and go to state 98
    %               shift and go to state 99
    *               shift and go to state 100
    /               shift and go to state 101
    -               shift and go to state 102
    +               shift and go to state 103
    COLON_COLON     shift and go to state 89
    ^               shift and go to state 87
    [               shift and go to state 88
    (               shift and go to state 90


Conflicts:

shift/reduce conflict for > in state 161 resolved as shift
shift/reduce conflict for < in state 161 resolved as shift
shift/reduce conflict for & in state 161 resolved as shift
shift/reduce conflict for | in state 161 resolved as shift
shift/reduce conflict for EQ_GREATER in state 161 resolved as shift
shift/reduce conflict for EQ_LESS in state 161 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 161 resolved as shift
shift/reduce conflict for EQEQ in state 161 resolved as shift
shift/reduce conflict for % in state 161 resolved as shift
shift/reduce conflict for * in state 161 resolved as shift
shift/reduce conflict for / in state 161 resolved as shift
shift/reduce conflict for - in state 161 resolved as shift
shift/reduce conflict for + in state 161 resolved as shift
shift/reduce conflict for COLON_COLON in state 161 resolved as shift
shift/reduce conflict for ^ in state 161 resolved as shift
shift/reduce conflict for [ in state 161 resolved as shift
shift/reduce conflict for ( in state 161 resolved as shift
shift/reduce conflict for > in state 221 resolved as shift
shift/reduce conflict for < in state 221 resolved as shift
shift/reduce conflict for & in state 221 resolved as shift
shift/reduce conflict for | in state 221 resolved as shift
shift/reduce conflict for EQ_GREATER in state 221 resolved as shift
shift/reduce conflict for EQ_LESS in state 221 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 221 resolved as shift
shift/reduce conflict for EQEQ in state 221 resolved as shift
shift/reduce conflict for % in state 221 resolved as shift
shift/reduce conflict for * in state 221 resolved as shift
shift/reduce conflict for / in state 221 resolved as shift
shift/reduce conflict for - in state 221 resolved as shift
shift/reduce conflict for + in state 221 resolved as shift
shift/reduce conflict for COLON_COLON in state 221 resolved as shift
shift/reduce conflict for ^ in state 221 resolved as shift
shift/reduce conflict for [ in state 221 resolved as shift
shift/reduce conflict for ( in state 221 resolved as shift
shift/reduce conflict for < in state 323 resolved as shift
shift/reduce conflict for & in state 323 resolved as shift
shift/reduce conflict for * in state 323 resolved as shift
shift/reduce conflict for - in state 323 resolved as shift
shift/reduce conflict for + in state 323 resolved as shift
shift/reduce conflict for [ in state 323 resolved as shift
shift/reduce conflict for ( in state 323 resolved as shift
shift/reduce conflict for < in state 324 resolved as shift
shift/reduce conflict for & in state 324 resolved as shift
shift/reduce conflict for * in state 324 resolved as shift
shift/reduce conflict for - in state 324 resolved as shift
shift/reduce conflict for + in state 324 resolved as shift
shift/reduce conflict for [ in state 324 resolved as shift
shift/reduce conflict for ( in state 324 resolved as shift
shift/reduce conflict for < in state 329 resolved as shift
shift/reduce conflict for & in state 329 resolved as shift
shift/reduce conflict for * in state 329 resolved as shift
shift/reduce conflict for - in state 329 resolved as shift
shift/reduce conflict for + in state 329 resolved as shift
shift/reduce conflict for [ in state 329 resolved as shift
shift/reduce conflict for ( in state 329 resolved as shift
shift/reduce conflict for < in state 330 resolved as shift
shift/reduce conflict for & in state 330 resolved as shift
shift/reduce conflict for * in state 330 resolved as shift
shift/reduce conflict for - in state 330 resolved as shift
shift/reduce conflict for + in state 330 resolved as shift
shift/reduce conflict for [ in state 330 resolved as shift
shift/reduce conflict for ( in state 330 resolved as shift